
08_1_HTS221_Temperature_stm32L475.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f2c  08005f2c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005f2c  08005f2c  00015f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f34  08005f34  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000080  08005fbc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005fbc  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bee  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253d  00000000  00000000  00033c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000361e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00036fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c7f  00000000  00000000  00037cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dbf  00000000  00000000  0005f957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee29f  00000000  00000000  00070716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e9b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a4  00000000  00000000  0015ea08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d84 	.word	0x08005d84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005d84 	.word	0x08005d84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 ffa1 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f85b 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f91b 	bl	8000b78 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000942:	f000 f8a9 	bl	8000a98 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000946:	f000 f8e7 	bl	8000b18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("****** Temperature values measurement ******\n\n\r");
 800094a:	4824      	ldr	r0, [pc, #144]	; (80009dc <main+0xac>)
 800094c:	f004 fa1c 	bl	8004d88 <iprintf>
    printf("=====> Initialize Temperature sensor HTS221 \r\n");
 8000950:	4823      	ldr	r0, [pc, #140]	; (80009e0 <main+0xb0>)
 8000952:	f004 fa9f 	bl	8004e94 <puts>
    BSP_TSENSOR_Init();
 8000956:	f000 feb3 	bl	80016c0 <BSP_TSENSOR_Init>
    printf("=====> Temperature sensor HTS221 initialized \r\n ");
 800095a:	4822      	ldr	r0, [pc, #136]	; (80009e4 <main+0xb4>)
 800095c:	f004 fa14 	bl	8004d88 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  temp_value = BSP_TSENSOR_ReadTemp();
 8000960:	f000 feca 	bl	80016f8 <BSP_TSENSOR_ReadTemp>
 8000964:	eef0 7a40 	vmov.f32	s15, s0
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <main+0xb8>)
 800096a:	edc3 7a00 	vstr	s15, [r3]
	  	  int tmpInt1 = temp_value;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <main+0xb8>)
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000978:	ee17 3a90 	vmov	r3, s15
 800097c:	60fb      	str	r3, [r7, #12]
	  	  float tmpFrac = temp_value - tmpInt1;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0xb8>)
 8000980:	ed93 7a00 	vldr	s14, [r3]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	ee07 3a90 	vmov	s15, r3
 800098a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000992:	edc7 7a02 	vstr	s15, [r7, #8]
	  	  int tmpInt2 = trunc(tmpFrac * 100);
 8000996:	edd7 7a02 	vldr	s15, [r7, #8]
 800099a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80009ec <main+0xbc>
 800099e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a2:	ee17 0a90 	vmov	r0, s15
 80009a6:	f7ff fdc7 	bl	8000538 <__aeabi_f2d>
 80009aa:	4602      	mov	r2, r0
 80009ac:	460b      	mov	r3, r1
 80009ae:	ec43 2b10 	vmov	d0, r2, r3
 80009b2:	f005 f9b5 	bl	8005d20 <trunc>
 80009b6:	ec53 2b10 	vmov	r2, r3, d0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	f7ff fe13 	bl	80005e8 <__aeabi_d2iz>
 80009c2:	4603      	mov	r3, r0
 80009c4:	607b      	str	r3, [r7, #4]
	  	  printf(" TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68f9      	ldr	r1, [r7, #12]
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <main+0xc0>)
 80009cc:	f004 f9dc 	bl	8004d88 <iprintf>

	  	  HAL_Delay(3000);
 80009d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009d4:	f000 ffc6 	bl	8001964 <HAL_Delay>
  {
 80009d8:	e7c2      	b.n	8000960 <main+0x30>
 80009da:	bf00      	nop
 80009dc:	08005d9c 	.word	0x08005d9c
 80009e0:	08005dcc 	.word	0x08005dcc
 80009e4:	08005dfc 	.word	0x08005dfc
 80009e8:	2000009c 	.word	0x2000009c
 80009ec:	42c80000 	.word	0x42c80000
 80009f0:	08005e30 	.word	0x08005e30

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b096      	sub	sp, #88	; 0x58
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2244      	movs	r2, #68	; 0x44
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 f9b8 	bl	8004d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a1a:	f002 f9eb 	bl	8002df4 <HAL_PWREx_ControlVoltageScaling>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a24:	f000 fac0 	bl	8000fa8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a44:	2328      	movs	r3, #40	; 0x28
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fa21 	bl	8002ea0 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a64:	f000 faa0 	bl	8000fa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fde7 	bl	8003654 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a8c:	f000 fa8c 	bl	8000fa8 <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3758      	adds	r7, #88	; 0x58
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <MX_I2C2_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <MX_I2C2_Init+0x7c>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ad2:	480e      	ldr	r0, [pc, #56]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000ad4:	f001 fb55 	bl	8002182 <HAL_I2C_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ade:	f000 fa63 	bl	8000fa8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000ae6:	f002 f8df 	bl	8002ca8 <HAL_I2CEx_ConfigAnalogFilter>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000af0:	f000 fa5a 	bl	8000fa8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_I2C2_Init+0x74>)
 8000af8:	f002 f921 	bl	8002d3e <HAL_I2CEx_ConfigDigitalFilter>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b02:	f000 fa51 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000b0 	.word	0x200000b0
 8000b10:	40005800 	.word	0x40005800
 8000b14:	10909cec 	.word	0x10909cec

08000b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART1_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b5c:	f003 fc5a 	bl	8004414 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 fa1f 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000104 	.word	0x20000104
 8000b74:	40013800 	.word	0x40013800

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	4bbc      	ldr	r3, [pc, #752]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4abb      	ldr	r2, [pc, #748]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4bb9      	ldr	r3, [pc, #740]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4bb6      	ldr	r3, [pc, #728]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4ab5      	ldr	r2, [pc, #724]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4bb3      	ldr	r3, [pc, #716]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4bb0      	ldr	r3, [pc, #704]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4aaf      	ldr	r2, [pc, #700]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4bad      	ldr	r3, [pc, #692]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4baa      	ldr	r3, [pc, #680]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4aa9      	ldr	r2, [pc, #676]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4ba7      	ldr	r3, [pc, #668]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bee:	4ba4      	ldr	r3, [pc, #656]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4aa3      	ldr	r2, [pc, #652]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4ba1      	ldr	r3, [pc, #644]	; (8000e80 <MX_GPIO_Init+0x308>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c0c:	489d      	ldr	r0, [pc, #628]	; (8000e84 <MX_GPIO_Init+0x30c>)
 8000c0e:	f001 fa7d 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f248 1104 	movw	r1, #33028	; 0x8104
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 fa76 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c20:	2200      	movs	r2, #0
 8000c22:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000c26:	4898      	ldr	r0, [pc, #608]	; (8000e88 <MX_GPIO_Init+0x310>)
 8000c28:	f001 fa70 	bl	800210c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c32:	4896      	ldr	r0, [pc, #600]	; (8000e8c <MX_GPIO_Init+0x314>)
 8000c34:	f001 fa6a 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3e:	4893      	ldr	r0, [pc, #588]	; (8000e8c <MX_GPIO_Init+0x314>)
 8000c40:	f001 fa64 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c4a:	4891      	ldr	r0, [pc, #580]	; (8000e90 <MX_GPIO_Init+0x318>)
 8000c4c:	f001 fa5e 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2120      	movs	r1, #32
 8000c54:	488c      	ldr	r0, [pc, #560]	; (8000e88 <MX_GPIO_Init+0x310>)
 8000c56:	f001 fa59 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4889      	ldr	r0, [pc, #548]	; (8000e84 <MX_GPIO_Init+0x30c>)
 8000c60:	f001 fa54 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c64:	f240 1315 	movw	r3, #277	; 0x115
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4881      	ldr	r0, [pc, #516]	; (8000e84 <MX_GPIO_Init+0x30c>)
 8000c7e:	f000 ffa7 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c82:	236a      	movs	r3, #106	; 0x6a
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	487b      	ldr	r0, [pc, #492]	; (8000e84 <MX_GPIO_Init+0x30c>)
 8000c98:	f000 ff9a 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4877      	ldr	r0, [pc, #476]	; (8000e90 <MX_GPIO_Init+0x318>)
 8000cb4:	f000 ff8c 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000cb8:	233f      	movs	r3, #63	; 0x3f
 8000cba:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cbc:	230b      	movs	r3, #11
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4871      	ldr	r0, [pc, #452]	; (8000e90 <MX_GPIO_Init+0x318>)
 8000ccc:	f000 ff80 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f000 ff6f 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000cf2:	f248 1304 	movw	r3, #33028	; 0x8104
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 ff5f 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d12:	2308      	movs	r3, #8
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d22:	2301      	movs	r3, #1
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d30:	f000 ff4e 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d34:	2310      	movs	r3, #16
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d38:	230b      	movs	r3, #11
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f000 ff41 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000d4e:	23e0      	movs	r3, #224	; 0xe0
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6c:	f000 ff30 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d70:	2301      	movs	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4840      	ldr	r0, [pc, #256]	; (8000e88 <MX_GPIO_Init+0x310>)
 8000d86:	f000 ff23 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d8e:	230b      	movs	r3, #11
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	483a      	ldr	r0, [pc, #232]	; (8000e88 <MX_GPIO_Init+0x310>)
 8000d9e:	f000 ff17 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000da2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000da6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4833      	ldr	r0, [pc, #204]	; (8000e88 <MX_GPIO_Init+0x310>)
 8000dbc:	f000 ff08 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dc0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4829      	ldr	r0, [pc, #164]	; (8000e84 <MX_GPIO_Init+0x30c>)
 8000dde:	f000 fef7 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000de2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000de6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000df4:	230a      	movs	r3, #10
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4821      	ldr	r0, [pc, #132]	; (8000e84 <MX_GPIO_Init+0x30c>)
 8000e00:	f000 fee6 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000e04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e16:	2307      	movs	r3, #7
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481a      	ldr	r0, [pc, #104]	; (8000e8c <MX_GPIO_Init+0x314>)
 8000e22:	f000 fed5 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e26:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e2a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4813      	ldr	r0, [pc, #76]	; (8000e8c <MX_GPIO_Init+0x314>)
 8000e3e:	f000 fec7 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e42:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_GPIO_Init+0x314>)
 8000e5c:	f000 feb8 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e60:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_GPIO_Init+0x318>)
 8000e7a:	f000 fea9 	bl	8001bd0 <HAL_GPIO_Init>
 8000e7e:	e009      	b.n	8000e94 <MX_GPIO_Init+0x31c>
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48001000 	.word	0x48001000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	48000c00 	.word	0x48000c00
 8000e90:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	483c      	ldr	r0, [pc, #240]	; (8000f9c <MX_GPIO_Init+0x424>)
 8000eac:	f000 fe90 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f000 fe82 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000ecc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f000 fe70 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000ef0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f02:	2306      	movs	r3, #6
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4823      	ldr	r0, [pc, #140]	; (8000f9c <MX_GPIO_Init+0x424>)
 8000f0e:	f000 fe5f 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000f12:	2302      	movs	r3, #2
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f22:	2305      	movs	r3, #5
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <MX_GPIO_Init+0x428>)
 8000f2e:	f000 fe4f 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000f32:	2378      	movs	r3, #120	; 0x78
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f42:	2307      	movs	r3, #7
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <MX_GPIO_Init+0x428>)
 8000f4e:	f000 fe3f 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f64:	2304      	movs	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_GPIO_Init+0x42c>)
 8000f70:	f000 fe2e 	bl	8001bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2017      	movs	r0, #23
 8000f7a:	f000 fdf2 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f7e:	2017      	movs	r0, #23
 8000f80:	f000 fe0b 	bl	8001b9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2028      	movs	r0, #40	; 0x28
 8000f8a:	f000 fdea 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f8e:	2028      	movs	r0, #40	; 0x28
 8000f90:	f000 fe03 	bl	8001b9a <HAL_NVIC_EnableIRQ>

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	48000c00 	.word	0x48000c00
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <Error_Handler+0x8>
	...

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0ac      	sub	sp, #176	; 0xb0
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2288      	movs	r2, #136	; 0x88
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f003 feab 	bl	8004d78 <memset>
  if(hi2c->Instance==I2C2)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a21      	ldr	r2, [pc, #132]	; (80010ac <HAL_I2C_MspInit+0xb0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d13b      	bne.n	80010a4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001030:	2300      	movs	r3, #0
 8001032:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fd2f 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001044:	f7ff ffb0 	bl	8000fa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_I2C_MspInit+0xb4>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_I2C_MspInit+0xb4>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_I2C_MspInit+0xb4>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001060:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001068:	2312      	movs	r3, #18
 800106a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800107a:	2304      	movs	r3, #4
 800107c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001084:	4619      	mov	r1, r3
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_I2C_MspInit+0xb8>)
 8001088:	f000 fda2 	bl	8001bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_I2C_MspInit+0xb4>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_I2C_MspInit+0xb4>)
 8001092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001096:	6593      	str	r3, [r2, #88]	; 0x58
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_I2C_MspInit+0xb4>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	37b0      	adds	r7, #176	; 0xb0
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40005800 	.word	0x40005800
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000400 	.word	0x48000400

080010b8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_I2C_MspDeInit+0x3c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10f      	bne.n	80010ea <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_I2C_MspDeInit+0x40>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_I2C_MspDeInit+0x40>)
 80010d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80010d4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <HAL_I2C_MspDeInit+0x44>)
 80010dc:	f000 ff22 	bl	8001f24 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_I2C_MspDeInit+0x44>)
 80010e6:	f000 ff1d 	bl	8001f24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40005800 	.word	0x40005800
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000400 	.word	0x48000400

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ac      	sub	sp, #176	; 0xb0
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2288      	movs	r2, #136	; 0x88
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fe29 	bl	8004d78 <memset>
  if(huart->Instance==USART1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_UART_MspInit+0xb0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d13a      	bne.n	80011a6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001130:	2301      	movs	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001134:	2300      	movs	r3, #0
 8001136:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fcad 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001148:	f7ff ff2e 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_UART_MspInit+0xb4>)
 800114e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001150:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <HAL_UART_MspInit+0xb4>)
 8001152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001156:	6613      	str	r3, [r2, #96]	; 0x60
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_UART_MspInit+0xb4>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_UART_MspInit+0xb4>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_UART_MspInit+0xb4>)
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_UART_MspInit+0xb4>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800117c:	23c0      	movs	r3, #192	; 0xc0
 800117e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001194:	2307      	movs	r3, #7
 8001196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_UART_MspInit+0xb8>)
 80011a2:	f000 fd15 	bl	8001bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	37b0      	adds	r7, #176	; 0xb0
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40013800 	.word	0x40013800
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000400 	.word	0x48000400

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001208:	f000 fb8c 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001214:	2020      	movs	r0, #32
 8001216:	f000 ff91 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800121a:	2040      	movs	r0, #64	; 0x40
 800121c:	f000 ff8e 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001220:	2080      	movs	r0, #128	; 0x80
 8001222:	f000 ff8b 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001226:	f44f 7080 	mov.w	r0, #256	; 0x100
 800122a:	f000 ff87 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}

08001232 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001236:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800123a:	f000 ff7f 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800123e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001242:	f000 ff7b 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001246:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800124a:	f000 ff77 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800124e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001252:	f000 ff73 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800125a:	f000 ff6f 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}

08001262 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e00a      	b.n	800128a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001274:	f3af 8000 	nop.w
 8001278:	4601      	mov	r1, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	60ba      	str	r2, [r7, #8]
 8001280:	b2ca      	uxtb	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	429a      	cmp	r2, r3
 8001290:	dbf0      	blt.n	8001274 <_read+0x12>
	}

return len;
 8001292:	687b      	ldr	r3, [r7, #4]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e009      	b.n	80012c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	60ba      	str	r2, [r7, #8]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dbf1      	blt.n	80012ae <_write+0x12>
	}
	return len;
 80012ca:	687b      	ldr	r3, [r7, #4]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_close>:

int _close(int file)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	return -1;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fc:	605a      	str	r2, [r3, #4]
	return 0;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_isatty>:

int _isatty(int file)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	return 1;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
	return 0;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f003 fcda 	bl	8004d24 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20018000 	.word	0x20018000
 800139c:	00000400 	.word	0x00000400
 80013a0:	200000a0 	.word	0x200000a0
 80013a4:	20000278 	.word	0x20000278

080013a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f003 fc99 	bl	8004d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff fa97 	bl	8000930 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001404:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001410:	08005f3c 	.word	0x08005f3c
  ldr r2, =_sbss
 8001414:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001418:	20000274 	.word	0x20000274

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <I2Cx_MspInit+0xa8>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <I2Cx_MspInit+0xa8>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <I2Cx_MspInit+0xa8>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001440:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001444:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001446:	2312      	movs	r3, #18
 8001448:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001452:	2304      	movs	r3, #4
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	481b      	ldr	r0, [pc, #108]	; (80014cc <I2Cx_MspInit+0xac>)
 800145e:	f000 fbb7 	bl	8001bd0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <I2Cx_MspInit+0xac>)
 800146a:	f000 fbb1 	bl	8001bd0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <I2Cx_MspInit+0xa8>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <I2Cx_MspInit+0xa8>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001478:	6593      	str	r3, [r2, #88]	; 0x58
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <I2Cx_MspInit+0xa8>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <I2Cx_MspInit+0xa8>)
 8001488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <I2Cx_MspInit+0xa8>)
 800148c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001490:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <I2Cx_MspInit+0xa8>)
 8001494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <I2Cx_MspInit+0xa8>)
 8001498:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800149c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	210f      	movs	r1, #15
 80014a2:	2021      	movs	r0, #33	; 0x21
 80014a4:	f000 fb5d 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80014a8:	2021      	movs	r0, #33	; 0x21
 80014aa:	f000 fb76 	bl	8001b9a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	210f      	movs	r1, #15
 80014b2:	2022      	movs	r0, #34	; 0x22
 80014b4:	f000 fb55 	bl	8001b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80014b8:	2022      	movs	r0, #34	; 0x22
 80014ba:	f000 fb6e 	bl	8001b9a <HAL_NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	48000400 	.word	0x48000400

080014d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <I2Cx_Init+0x54>)
 80014dc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <I2Cx_Init+0x58>)
 80014e2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff89 	bl	8001420 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fe37 	bl	8002182 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001514:	2100      	movs	r1, #0
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f001 fbc6 	bl	8002ca8 <HAL_I2CEx_ConfigAnalogFilter>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40005800 	.word	0x40005800
 8001528:	00702681 	.word	0x00702681

0800152c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af04      	add	r7, sp, #16
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4603      	mov	r3, r0
 800153c:	72fb      	strb	r3, [r7, #11]
 800153e:	460b      	mov	r3, r1
 8001540:	813b      	strh	r3, [r7, #8]
 8001542:	4613      	mov	r3, r2
 8001544:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	b299      	uxth	r1, r3
 800154e:	88f8      	ldrh	r0, [r7, #6]
 8001550:	893a      	ldrh	r2, [r7, #8]
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4603      	mov	r3, r0
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 ffe0 	bl	8002528 <HAL_I2C_Mem_Read>
 8001568:	4603      	mov	r3, r0
 800156a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	4619      	mov	r1, r3
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f832 	bl	80015e0 <I2Cx_Error>
  }
  return status;
 800157c:	7dfb      	ldrb	r3, [r7, #23]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b08a      	sub	sp, #40	; 0x28
 800158a:	af04      	add	r7, sp, #16
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	4608      	mov	r0, r1
 8001590:	4611      	mov	r1, r2
 8001592:	461a      	mov	r2, r3
 8001594:	4603      	mov	r3, r0
 8001596:	72fb      	strb	r3, [r7, #11]
 8001598:	460b      	mov	r3, r1
 800159a:	813b      	strh	r3, [r7, #8]
 800159c:	4613      	mov	r3, r2
 800159e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	b299      	uxth	r1, r3
 80015a8:	88f8      	ldrh	r0, [r7, #6]
 80015aa:	893a      	ldrh	r2, [r7, #8]
 80015ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 fe9f 	bl	8002300 <HAL_I2C_Mem_Write>
 80015c2:	4603      	mov	r3, r0
 80015c4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	4619      	mov	r1, r3
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f805 	bl	80015e0 <I2Cx_Error>
  }
  return status;
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fe57 	bl	80022a0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff6c 	bl	80014d0 <I2Cx_Init>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <SENSOR_IO_Init+0x10>)
 8001606:	f7ff ff63 	bl	80014d0 <I2Cx_Init>
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000020c 	.word	0x2000020c

08001614 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af02      	add	r7, sp, #8
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	460b      	mov	r3, r1
 8001620:	71bb      	strb	r3, [r7, #6]
 8001622:	4613      	mov	r3, r2
 8001624:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	b29a      	uxth	r2, r3
 800162a:	79f9      	ldrb	r1, [r7, #7]
 800162c:	2301      	movs	r3, #1
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	1d7b      	adds	r3, r7, #5
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <SENSOR_IO_Write+0x30>)
 8001638:	f7ff ffa5 	bl	8001586 <I2Cx_WriteMultiple>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000020c 	.word	0x2000020c

08001648 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af02      	add	r7, sp, #8
 800164e:	4603      	mov	r3, r0
 8001650:	460a      	mov	r2, r1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	b29a      	uxth	r2, r3
 8001660:	79f9      	ldrb	r1, [r7, #7]
 8001662:	2301      	movs	r3, #1
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	f107 030f 	add.w	r3, r7, #15
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <SENSOR_IO_Read+0x38>)
 8001670:	f7ff ff5c 	bl	800152c <I2Cx_ReadMultiple>

  return read_value;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000020c 	.word	0x2000020c

08001684 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af02      	add	r7, sp, #8
 800168a:	603a      	str	r2, [r7, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	460b      	mov	r3, r1
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	4613      	mov	r3, r2
 8001698:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800169a:	79bb      	ldrb	r3, [r7, #6]
 800169c:	b29a      	uxth	r2, r3
 800169e:	79f9      	ldrb	r1, [r7, #7]
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	4804      	ldr	r0, [pc, #16]	; (80016bc <SENSOR_IO_ReadMultiple+0x38>)
 80016ac:	f7ff ff3e 	bl	800152c <I2Cx_ReadMultiple>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29b      	uxth	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000020c 	.word	0x2000020c

080016c0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <BSP_TSENSOR_Init+0x30>)
 80016cc:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <BSP_TSENSOR_Init+0x34>)
 80016ce:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80016d0:	f7ff ff96 	bl	8001600 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <BSP_TSENSOR_Init+0x30>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2100      	movs	r1, #0
 80016dc:	20be      	movs	r0, #190	; 0xbe
 80016de:	4798      	blx	r3

  ret = TSENSOR_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80016e4:	79fb      	ldrb	r3, [r7, #7]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000a4 	.word	0x200000a4
 80016f4:	20000004 	.word	0x20000004

080016f8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <BSP_TSENSOR_ReadTemp+0x18>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	20be      	movs	r0, #190	; 0xbe
 8001704:	4798      	blx	r3
 8001706:	eef0 7a40 	vmov.f32	s15, s0
}
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200000a4 	.word	0x200000a4

08001714 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2120      	movs	r1, #32
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff8e 	bl	8001648 <SENSOR_IO_Read>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	f023 0303 	bic.w	r3, r3, #3
 8001746:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001756:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	2120      	movs	r1, #32
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff57 	bl	8001614 <SENSOR_IO_Write>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b088      	sub	sp, #32
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	b2d8      	uxtb	r0, r3
 800177c:	f107 0208 	add.w	r2, r7, #8
 8001780:	2302      	movs	r3, #2
 8001782:	21b2      	movs	r1, #178	; 0xb2
 8001784:	f7ff ff7e 	bl	8001684 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2135      	movs	r1, #53	; 0x35
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff5a 	bl	8001648 <SENSOR_IO_Read>
 8001794:	4603      	mov	r3, r0
 8001796:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001798:	7ffb      	ldrb	r3, [r7, #31]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	b21b      	sxth	r3, r3
 800179e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	7a3b      	ldrb	r3, [r7, #8]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80017ac:	7ffb      	ldrb	r3, [r7, #31]
 80017ae:	019b      	lsls	r3, r3, #6
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	7a7b      	ldrb	r3, [r7, #9]
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80017c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017c4:	10db      	asrs	r3, r3, #3
 80017c6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80017c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017cc:	10db      	asrs	r3, r3, #3
 80017ce:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	b2d8      	uxtb	r0, r3
 80017d4:	f107 0208 	add.w	r2, r7, #8
 80017d8:	2304      	movs	r3, #4
 80017da:	21bc      	movs	r1, #188	; 0xbc
 80017dc:	f7ff ff52 	bl	8001684 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80017e0:	7a7b      	ldrb	r3, [r7, #9]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	7a3b      	ldrb	r3, [r7, #8]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80017ee:	7afb      	ldrb	r3, [r7, #11]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7abb      	ldrb	r3, [r7, #10]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	b2d8      	uxtb	r0, r3
 8001800:	f107 0208 	add.w	r2, r7, #8
 8001804:	2302      	movs	r3, #2
 8001806:	21aa      	movs	r1, #170	; 0xaa
 8001808:	f7ff ff3c 	bl	8001684 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800180c:	7a7b      	ldrb	r3, [r7, #9]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b21a      	sxth	r2, r3
 8001812:	7a3b      	ldrb	r3, [r7, #8]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800181a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800181e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001830:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001842:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001846:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001858:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001868:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	ee07 3a90 	vmov	s15, r3
}
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001886:	2003      	movs	r0, #3
 8001888:	f000 f960 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800188c:	2000      	movs	r0, #0
 800188e:	f000 f80d 	bl	80018ac <HAL_InitTick>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	e001      	b.n	80018a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800189e:	f7ff fb89 	bl	8000fb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_InitTick+0x6c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_InitTick+0x70>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_InitTick+0x6c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f96d 	bl	8001bb6 <HAL_SYSTICK_Config>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d809      	bhi.n	80018fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f000 f937 	bl	8001b62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_InitTick+0x74>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e007      	b.n	800190c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e004      	b.n	800190c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e001      	b.n	800190c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000018 	.word	0x20000018
 800191c:	20000000 	.word	0x20000000
 8001920:	20000014 	.word	0x20000014

08001924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000018 	.word	0x20000018
 8001948:	20000260 	.word	0x20000260

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000260 	.word	0x20000260

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff ffee 	bl	800194c <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_Delay+0x44>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffde 	bl	800194c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000018 	.word	0x20000018

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	; (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff29 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff3e 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff8e 	bl	8001aa0 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff31 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffa2 	bl	8001b08 <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bde:	e17f      	b.n	8001ee0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8171 	beq.w	8001eda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d005      	beq.n	8001c10 <HAL_GPIO_Init+0x40>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d130      	bne.n	8001c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c46:	2201      	movs	r2, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f003 0201 	and.w	r2, r3, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d118      	bne.n	8001cb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c84:	2201      	movs	r2, #1
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	f003 0201 	and.w	r2, r3, #1
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d017      	beq.n	8001cec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d123      	bne.n	8001d40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	08da      	lsrs	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	6939      	ldr	r1, [r7, #16]
 8001d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80ac 	beq.w	8001eda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <HAL_GPIO_Init+0x330>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	4a5e      	ldr	r2, [pc, #376]	; (8001f00 <HAL_GPIO_Init+0x330>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <HAL_GPIO_Init+0x330>)
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d9a:	4a5a      	ldr	r2, [pc, #360]	; (8001f04 <HAL_GPIO_Init+0x334>)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc4:	d025      	beq.n	8001e12 <HAL_GPIO_Init+0x242>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4f      	ldr	r2, [pc, #316]	; (8001f08 <HAL_GPIO_Init+0x338>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01f      	beq.n	8001e0e <HAL_GPIO_Init+0x23e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <HAL_GPIO_Init+0x33c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x23a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_GPIO_Init+0x340>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x236>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <HAL_GPIO_Init+0x344>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x232>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <HAL_GPIO_Init+0x348>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x22e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4a      	ldr	r2, [pc, #296]	; (8001f1c <HAL_GPIO_Init+0x34c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x22a>
 8001df6:	2306      	movs	r3, #6
 8001df8:	e00c      	b.n	8001e14 <HAL_GPIO_Init+0x244>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e00a      	b.n	8001e14 <HAL_GPIO_Init+0x244>
 8001dfe:	2305      	movs	r3, #5
 8001e00:	e008      	b.n	8001e14 <HAL_GPIO_Init+0x244>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x244>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e004      	b.n	8001e14 <HAL_GPIO_Init+0x244>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_Init+0x244>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_GPIO_Init+0x244>
 8001e12:	2300      	movs	r3, #0
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	f002 0203 	and.w	r2, r2, #3
 8001e1a:	0092      	lsls	r2, r2, #2
 8001e1c:	4093      	lsls	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e24:	4937      	ldr	r1, [pc, #220]	; (8001f04 <HAL_GPIO_Init+0x334>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e32:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e56:	4a32      	ldr	r2, [pc, #200]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e5c:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e80:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f47f ae78 	bne.w	8001be0 <HAL_GPIO_Init+0x10>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	48000800 	.word	0x48000800
 8001f10:	48000c00 	.word	0x48000c00
 8001f14:	48001000 	.word	0x48001000
 8001f18:	48001400 	.word	0x48001400
 8001f1c:	48001800 	.word	0x48001800
 8001f20:	40010400 	.word	0x40010400

08001f24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f32:	e0cd      	b.n	80020d0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f34:	2201      	movs	r2, #1
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80c0 	beq.w	80020ca <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f4a:	4a68      	ldr	r2, [pc, #416]	; (80020ec <HAL_GPIO_DeInit+0x1c8>)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f72:	d025      	beq.n	8001fc0 <HAL_GPIO_DeInit+0x9c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a5e      	ldr	r2, [pc, #376]	; (80020f0 <HAL_GPIO_DeInit+0x1cc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d01f      	beq.n	8001fbc <HAL_GPIO_DeInit+0x98>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a5d      	ldr	r2, [pc, #372]	; (80020f4 <HAL_GPIO_DeInit+0x1d0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d019      	beq.n	8001fb8 <HAL_GPIO_DeInit+0x94>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a5c      	ldr	r2, [pc, #368]	; (80020f8 <HAL_GPIO_DeInit+0x1d4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_GPIO_DeInit+0x90>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a5b      	ldr	r2, [pc, #364]	; (80020fc <HAL_GPIO_DeInit+0x1d8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00d      	beq.n	8001fb0 <HAL_GPIO_DeInit+0x8c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a5a      	ldr	r2, [pc, #360]	; (8002100 <HAL_GPIO_DeInit+0x1dc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_DeInit+0x88>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a59      	ldr	r2, [pc, #356]	; (8002104 <HAL_GPIO_DeInit+0x1e0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_GPIO_DeInit+0x84>
 8001fa4:	2306      	movs	r3, #6
 8001fa6:	e00c      	b.n	8001fc2 <HAL_GPIO_DeInit+0x9e>
 8001fa8:	2307      	movs	r3, #7
 8001faa:	e00a      	b.n	8001fc2 <HAL_GPIO_DeInit+0x9e>
 8001fac:	2305      	movs	r3, #5
 8001fae:	e008      	b.n	8001fc2 <HAL_GPIO_DeInit+0x9e>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_DeInit+0x9e>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e004      	b.n	8001fc2 <HAL_GPIO_DeInit+0x9e>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_DeInit+0x9e>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_GPIO_DeInit+0x9e>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d132      	bne.n	8002038 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001fd2:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <HAL_GPIO_DeInit+0x1e4>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	494b      	ldr	r1, [pc, #300]	; (8002108 <HAL_GPIO_DeInit+0x1e4>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001fe0:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_GPIO_DeInit+0x1e4>)
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	4947      	ldr	r1, [pc, #284]	; (8002108 <HAL_GPIO_DeInit+0x1e4>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_GPIO_DeInit+0x1e4>)
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4944      	ldr	r1, [pc, #272]	; (8002108 <HAL_GPIO_DeInit+0x1e4>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_GPIO_DeInit+0x1e4>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	4940      	ldr	r1, [pc, #256]	; (8002108 <HAL_GPIO_DeInit+0x1e4>)
 8002006:	4013      	ands	r3, r2
 8002008:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800201a:	4a34      	ldr	r2, [pc, #208]	; (80020ec <HAL_GPIO_DeInit+0x1c8>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43da      	mvns	r2, r3
 800202a:	4830      	ldr	r0, [pc, #192]	; (80020ec <HAL_GPIO_DeInit+0x1c8>)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	400a      	ands	r2, r1
 8002032:	3302      	adds	r3, #2
 8002034:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2103      	movs	r1, #3
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	08da      	lsrs	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3208      	adds	r2, #8
 8002054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	08d2      	lsrs	r2, r2, #3
 800206c:	4019      	ands	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2103      	movs	r1, #3
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2101      	movs	r1, #1
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	401a      	ands	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2103      	movs	r1, #3
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ba:	2101      	movs	r1, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	401a      	ands	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f47f af2b 	bne.w	8001f34 <HAL_GPIO_DeInit+0x10>
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40010000 	.word	0x40010000
 80020f0:	48000400 	.word	0x48000400
 80020f4:	48000800 	.word	0x48000800
 80020f8:	48000c00 	.word	0x48000c00
 80020fc:	48001000 	.word	0x48001000
 8002100:	48001400 	.word	0x48001400
 8002104:	48001800 	.word	0x48001800
 8002108:	40010400 	.word	0x40010400

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002128:	e002      	b.n	8002130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f806 	bl	800216c <HAL_GPIO_EXTI_Callback>
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e081      	b.n	8002298 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe ff27 	bl	8000ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2224      	movs	r2, #36	; 0x24
 80021b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d107      	bne.n	80021fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	e006      	b.n	800220a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002208:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d104      	bne.n	800221c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800221a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800222a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69d9      	ldr	r1, [r3, #28]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e021      	b.n	80022f6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2224      	movs	r2, #36	; 0x24
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fef4 	bl	80010b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4603      	mov	r3, r0
 8002310:	817b      	strh	r3, [r7, #10]
 8002312:	460b      	mov	r3, r1
 8002314:	813b      	strh	r3, [r7, #8]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b20      	cmp	r3, #32
 8002324:	f040 80f9 	bne.w	800251a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_I2C_Mem_Write+0x34>
 800232e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0ed      	b.n	800251c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_I2C_Mem_Write+0x4e>
 800234a:	2302      	movs	r3, #2
 800234c:	e0e6      	b.n	800251c <HAL_I2C_Mem_Write+0x21c>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002356:	f7ff faf9 	bl	800194c <HAL_GetTick>
 800235a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2319      	movs	r3, #25
 8002362:	2201      	movs	r2, #1
 8002364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fac3 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0d1      	b.n	800251c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2221      	movs	r2, #33	; 0x21
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a0:	88f8      	ldrh	r0, [r7, #6]
 80023a2:	893a      	ldrh	r2, [r7, #8]
 80023a4:	8979      	ldrh	r1, [r7, #10]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4603      	mov	r3, r0
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f9d3 	bl	800275c <I2C_RequestMemoryWrite>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0a9      	b.n	800251c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2bff      	cmp	r3, #255	; 0xff
 80023d0:	d90e      	bls.n	80023f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	22ff      	movs	r2, #255	; 0xff
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	8979      	ldrh	r1, [r7, #10]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fc2b 	bl	8002c44 <I2C_TransferConfig>
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	8979      	ldrh	r1, [r7, #10]
 8002402:	2300      	movs	r3, #0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fc1a 	bl	8002c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 faad 	bl	8002974 <I2C_WaitOnTXISFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e07b      	b.n	800251c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d034      	beq.n	80024c8 <HAL_I2C_Mem_Write+0x1c8>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	2b00      	cmp	r3, #0
 8002464:	d130      	bne.n	80024c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	2200      	movs	r2, #0
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa3f 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e04d      	b.n	800251c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2bff      	cmp	r3, #255	; 0xff
 8002488:	d90e      	bls.n	80024a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	22ff      	movs	r2, #255	; 0xff
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	b2da      	uxtb	r2, r3
 8002496:	8979      	ldrh	r1, [r7, #10]
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fbcf 	bl	8002c44 <I2C_TransferConfig>
 80024a6:	e00f      	b.n	80024c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	2300      	movs	r3, #0
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fbbe 	bl	8002c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d19e      	bne.n	8002410 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fa8c 	bl	80029f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e01a      	b.n	800251c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2220      	movs	r2, #32
 80024ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_I2C_Mem_Write+0x224>)
 80024fa:	400b      	ands	r3, r1
 80024fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	fe00e800 	.word	0xfe00e800

08002528 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4603      	mov	r3, r0
 8002538:	817b      	strh	r3, [r7, #10]
 800253a:	460b      	mov	r3, r1
 800253c:	813b      	strh	r3, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b20      	cmp	r3, #32
 800254c:	f040 80fd 	bne.w	800274a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_I2C_Mem_Read+0x34>
 8002556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002562:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0f1      	b.n	800274c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_I2C_Mem_Read+0x4e>
 8002572:	2302      	movs	r3, #2
 8002574:	e0ea      	b.n	800274c <HAL_I2C_Mem_Read+0x224>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800257e:	f7ff f9e5 	bl	800194c <HAL_GetTick>
 8002582:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2319      	movs	r3, #25
 800258a:	2201      	movs	r2, #1
 800258c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f9af 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0d5      	b.n	800274c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2222      	movs	r2, #34	; 0x22
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025c8:	88f8      	ldrh	r0, [r7, #6]
 80025ca:	893a      	ldrh	r2, [r7, #8]
 80025cc:	8979      	ldrh	r1, [r7, #10]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	4603      	mov	r3, r0
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f913 	bl	8002804 <I2C_RequestMemoryRead>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0ad      	b.n	800274c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2bff      	cmp	r3, #255	; 0xff
 80025f8:	d90e      	bls.n	8002618 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	22ff      	movs	r2, #255	; 0xff
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	b2da      	uxtb	r2, r3
 8002606:	8979      	ldrh	r1, [r7, #10]
 8002608:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_I2C_Mem_Read+0x22c>)
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fb17 	bl	8002c44 <I2C_TransferConfig>
 8002616:	e00f      	b.n	8002638 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	b2da      	uxtb	r2, r3
 8002628:	8979      	ldrh	r1, [r7, #10]
 800262a:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_I2C_Mem_Read+0x22c>)
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fb06 	bl	8002c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263e:	2200      	movs	r2, #0
 8002640:	2104      	movs	r1, #4
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f956 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e07c      	b.n	800274c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d034      	beq.n	80026f8 <HAL_I2C_Mem_Read+0x1d0>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d130      	bne.n	80026f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	2200      	movs	r2, #0
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f927 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e04d      	b.n	800274c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2bff      	cmp	r3, #255	; 0xff
 80026b8:	d90e      	bls.n	80026d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	22ff      	movs	r2, #255	; 0xff
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fab7 	bl	8002c44 <I2C_TransferConfig>
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 faa6 	bl	8002c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d19a      	bne.n	8002638 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f974 	bl	80029f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e01a      	b.n	800274c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2220      	movs	r2, #32
 800271c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_I2C_Mem_Read+0x230>)
 800272a:	400b      	ands	r3, r1
 800272c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	80002400 	.word	0x80002400
 8002758:	fe00e800 	.word	0xfe00e800

0800275c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	461a      	mov	r2, r3
 800276a:	4603      	mov	r3, r0
 800276c:	817b      	strh	r3, [r7, #10]
 800276e:	460b      	mov	r3, r1
 8002770:	813b      	strh	r3, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	8979      	ldrh	r1, [r7, #10]
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <I2C_RequestMemoryWrite+0xa4>)
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fa5d 	bl	8002c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	69b9      	ldr	r1, [r7, #24]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f8f0 	bl	8002974 <I2C_WaitOnTXISFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e02c      	b.n	80027f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027a4:	893b      	ldrh	r3, [r7, #8]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	629a      	str	r2, [r3, #40]	; 0x28
 80027ae:	e015      	b.n	80027dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027b0:	893b      	ldrh	r3, [r7, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	69b9      	ldr	r1, [r7, #24]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f8d6 	bl	8002974 <I2C_WaitOnTXISFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e012      	b.n	80027f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d2:	893b      	ldrh	r3, [r7, #8]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2200      	movs	r2, #0
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f884 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	80002000 	.word	0x80002000

08002804 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	817b      	strh	r3, [r7, #10]
 8002816:	460b      	mov	r3, r1
 8002818:	813b      	strh	r3, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	8979      	ldrh	r1, [r7, #10]
 8002824:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <I2C_RequestMemoryRead+0xa4>)
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2300      	movs	r3, #0
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fa0a 	bl	8002c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f89d 	bl	8002974 <I2C_WaitOnTXISFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e02c      	b.n	800289e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800284a:	893b      	ldrh	r3, [r7, #8]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
 8002854:	e015      	b.n	8002882 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002856:	893b      	ldrh	r3, [r7, #8]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	b29b      	uxth	r3, r3
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	69b9      	ldr	r1, [r7, #24]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f883 	bl	8002974 <I2C_WaitOnTXISFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e012      	b.n	800289e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002878:	893b      	ldrh	r3, [r7, #8]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2200      	movs	r2, #0
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f831 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	80002000 	.word	0x80002000

080028ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d103      	bne.n	80028ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d007      	beq.n	80028e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	619a      	str	r2, [r3, #24]
  }
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002904:	e022      	b.n	800294c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d01e      	beq.n	800294c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7ff f81d 	bl	800194c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d113      	bne.n	800294c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e00f      	b.n	800296c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	429a      	cmp	r2, r3
 8002968:	d0cd      	beq.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002980:	e02c      	b.n	80029dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f870 	bl	8002a6c <I2C_IsErrorOccurred>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e02a      	b.n	80029ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d01e      	beq.n	80029dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299e:	f7fe ffd5 	bl	800194c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d113      	bne.n	80029dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e007      	b.n	80029ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d1cb      	bne.n	8002982 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a00:	e028      	b.n	8002a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f830 	bl	8002a6c <I2C_IsErrorOccurred>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e026      	b.n	8002a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a16:	f7fe ff99 	bl	800194c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d113      	bne.n	8002a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e007      	b.n	8002a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d1cf      	bne.n	8002a02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d075      	beq.n	8002b84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aa0:	e056      	b.n	8002b50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d052      	beq.n	8002b50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aaa:	f7fe ff4f 	bl	800194c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <I2C_IsErrorOccurred+0x54>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d147      	bne.n	8002b50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ad2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae2:	d12e      	bne.n	8002b42 <I2C_IsErrorOccurred+0xd6>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aea:	d02a      	beq.n	8002b42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d027      	beq.n	8002b42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b02:	f7fe ff23 	bl	800194c <HAL_GetTick>
 8002b06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b08:	e01b      	b.n	8002b42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b0a:	f7fe ff1f 	bl	800194c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b19      	cmp	r3, #25
 8002b16:	d914      	bls.n	8002b42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d1dc      	bne.n	8002b0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d003      	beq.n	8002b66 <I2C_IsErrorOccurred+0xfa>
 8002b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d09d      	beq.n	8002aa2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f043 0308 	orr.w	r3, r3, #8
 8002bbe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01c      	beq.n	8002c34 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff fe56 	bl	80028ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <I2C_IsErrorOccurred+0x1d4>)
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	fe00e800 	.word	0xfe00e800

08002c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	817b      	strh	r3, [r7, #10]
 8002c52:	4613      	mov	r3, r2
 8002c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c56:	897b      	ldrh	r3, [r7, #10]
 8002c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c5c:	7a7b      	ldrb	r3, [r7, #9]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	0d5b      	lsrs	r3, r3, #21
 8002c7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <I2C_TransferConfig+0x60>)
 8002c84:	430b      	orrs	r3, r1
 8002c86:	43db      	mvns	r3, r3
 8002c88:	ea02 0103 	and.w	r1, r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	03ff63ff 	.word	0x03ff63ff

08002ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d138      	bne.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e032      	b.n	8002d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	; 0x24
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6819      	ldr	r1, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d139      	bne.n	8002dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e033      	b.n	8002dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2224      	movs	r2, #36	; 0x24
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40007000 	.word	0x40007000

08002df4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e02:	d130      	bne.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e04:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e10:	d038      	beq.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2232      	movs	r2, #50	; 0x32
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0c9b      	lsrs	r3, r3, #18
 8002e34:	3301      	adds	r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e38:	e002      	b.n	8002e40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4c:	d102      	bne.n	8002e54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f2      	bne.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e60:	d110      	bne.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e00f      	b.n	8002e86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d007      	beq.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e7c:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40007000 	.word	0x40007000
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	431bde83 	.word	0x431bde83

08002ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e3c6      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb2:	4ba1      	ldr	r3, [pc, #644]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ebc:	4b9e      	ldr	r3, [pc, #632]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80e4 	beq.w	800309c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_RCC_OscConfig+0x4a>
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	f040 808b 	bne.w	8002ff8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	f040 8087 	bne.w	8002ff8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eea:	4b93      	ldr	r3, [pc, #588]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_RCC_OscConfig+0x62>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e39e      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	4b8c      	ldr	r3, [pc, #560]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <HAL_RCC_OscConfig+0x7c>
 8002f12:	4b89      	ldr	r3, [pc, #548]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1a:	e005      	b.n	8002f28 <HAL_RCC_OscConfig+0x88>
 8002f1c:	4b86      	ldr	r3, [pc, #536]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d223      	bcs.n	8002f74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fd53 	bl	80039dc <RCC_SetFlashLatencyFromMSIRange>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e37f      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f40:	4b7d      	ldr	r3, [pc, #500]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a7c      	ldr	r2, [pc, #496]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f46:	f043 0308 	orr.w	r3, r3, #8
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b7a      	ldr	r3, [pc, #488]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4977      	ldr	r1, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	4972      	ldr	r1, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
 8002f72:	e025      	b.n	8002fc0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f74:	4b70      	ldr	r3, [pc, #448]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6f      	ldr	r2, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f7a:	f043 0308 	orr.w	r3, r3, #8
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	496a      	ldr	r1, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f92:	4b69      	ldr	r3, [pc, #420]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	4965      	ldr	r1, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fd13 	bl	80039dc <RCC_SetFlashLatencyFromMSIRange>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e33f      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fc0:	f000 fc48 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b5c      	ldr	r3, [pc, #368]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	495a      	ldr	r1, [pc, #360]	; (800313c <HAL_RCC_OscConfig+0x29c>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fdc:	4a58      	ldr	r2, [pc, #352]	; (8003140 <HAL_RCC_OscConfig+0x2a0>)
 8002fde:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fe0:	4b58      	ldr	r3, [pc, #352]	; (8003144 <HAL_RCC_OscConfig+0x2a4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe fc61 	bl	80018ac <HAL_InitTick>
 8002fea:	4603      	mov	r3, r0
 8002fec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d052      	beq.n	800309a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	e323      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d032      	beq.n	8003066 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003000:	4b4d      	ldr	r3, [pc, #308]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a4c      	ldr	r2, [pc, #304]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800300c:	f7fe fc9e 	bl	800194c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003014:	f7fe fc9a 	bl	800194c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e30c      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003026:	4b44      	ldr	r3, [pc, #272]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a40      	ldr	r2, [pc, #256]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003038:	f043 0308 	orr.w	r3, r3, #8
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	493b      	ldr	r1, [pc, #236]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003050:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
 8003064:	e01a      	b.n	800309c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003066:	4b34      	ldr	r3, [pc, #208]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a33      	ldr	r2, [pc, #204]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003072:	f7fe fc6b 	bl	800194c <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800307a:	f7fe fc67 	bl	800194c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e2d9      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x1da>
 8003098:	e000      	b.n	800309c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800309a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d074      	beq.n	8003192 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d005      	beq.n	80030ba <HAL_RCC_OscConfig+0x21a>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d10e      	bne.n	80030d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ba:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d064      	beq.n	8003190 <HAL_RCC_OscConfig+0x2f0>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d160      	bne.n	8003190 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e2b6      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x24a>
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a15      	ldr	r2, [pc, #84]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e01d      	b.n	8003126 <HAL_RCC_OscConfig+0x286>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f2:	d10c      	bne.n	800310e <HAL_RCC_OscConfig+0x26e>
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 80030fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	e00b      	b.n	8003126 <HAL_RCC_OscConfig+0x286>
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a09      	ldr	r2, [pc, #36]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a06      	ldr	r2, [pc, #24]	; (8003138 <HAL_RCC_OscConfig+0x298>)
 8003120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01c      	beq.n	8003168 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fe fc0d 	bl	800194c <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003134:	e011      	b.n	800315a <HAL_RCC_OscConfig+0x2ba>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	08005e4c 	.word	0x08005e4c
 8003140:	20000000 	.word	0x20000000
 8003144:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fc00 	bl	800194c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e272      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315a:	4baf      	ldr	r3, [pc, #700]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x2a8>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe fbf0 	bl	800194c <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe fbec 	bl	800194c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e25e      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003182:	4ba5      	ldr	r3, [pc, #660]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x2d0>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d060      	beq.n	8003260 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_OscConfig+0x310>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d119      	bne.n	80031de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d116      	bne.n	80031de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b0:	4b99      	ldr	r3, [pc, #612]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_OscConfig+0x328>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e23b      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c8:	4b93      	ldr	r3, [pc, #588]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	4990      	ldr	r1, [pc, #576]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031dc:	e040      	b.n	8003260 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d023      	beq.n	800322e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e6:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a8b      	ldr	r2, [pc, #556]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe fbab 	bl	800194c <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fa:	f7fe fba7 	bl	800194c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e219      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800320c:	4b82      	ldr	r3, [pc, #520]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003218:	4b7f      	ldr	r3, [pc, #508]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	497c      	ldr	r1, [pc, #496]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
 800322c:	e018      	b.n	8003260 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322e:	4b7a      	ldr	r3, [pc, #488]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a79      	ldr	r2, [pc, #484]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe fb87 	bl	800194c <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003242:	f7fe fb83 	bl	800194c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e1f5      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003254:	4b70      	ldr	r3, [pc, #448]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d03c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01c      	beq.n	80032ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003274:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327a:	4a67      	ldr	r2, [pc, #412]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fb62 	bl	800194c <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328c:	f7fe fb5e 	bl	800194c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1d0      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800329e:	4b5e      	ldr	r3, [pc, #376]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80032a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ef      	beq.n	800328c <HAL_RCC_OscConfig+0x3ec>
 80032ac:	e01b      	b.n	80032e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ae:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80032b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fb45 	bl	800194c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fe fb41 	bl	800194c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1b3      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032d8:	4b4f      	ldr	r3, [pc, #316]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ef      	bne.n	80032c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80a6 	beq.w	8003440 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f4:	2300      	movs	r3, #0
 80032f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032f8:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003304:	4b44      	ldr	r3, [pc, #272]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	4a43      	ldr	r2, [pc, #268]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6593      	str	r3, [r2, #88]	; 0x58
 8003310:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331c:	2301      	movs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003320:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCC_OscConfig+0x57c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d118      	bne.n	800335e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800332c:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_OscConfig+0x57c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a3a      	ldr	r2, [pc, #232]	; (800341c <HAL_RCC_OscConfig+0x57c>)
 8003332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003338:	f7fe fb08 	bl	800194c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003340:	f7fe fb04 	bl	800194c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e176      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003352:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCC_OscConfig+0x57c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d108      	bne.n	8003378 <HAL_RCC_OscConfig+0x4d8>
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336c:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003376:	e024      	b.n	80033c2 <HAL_RCC_OscConfig+0x522>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b05      	cmp	r3, #5
 800337e:	d110      	bne.n	80033a2 <HAL_RCC_OscConfig+0x502>
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	4a24      	ldr	r2, [pc, #144]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	4a20      	ldr	r2, [pc, #128]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033a0:	e00f      	b.n	80033c2 <HAL_RCC_OscConfig+0x522>
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	4a17      	ldr	r2, [pc, #92]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe fabf 	bl	800194c <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe fabb 	bl	800194c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e12b      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_OscConfig+0x578>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ed      	beq.n	80033d2 <HAL_RCC_OscConfig+0x532>
 80033f6:	e01a      	b.n	800342e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe faa8 	bl	800194c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033fe:	e00f      	b.n	8003420 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fe faa4 	bl	800194c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d906      	bls.n	8003420 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e114      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003420:	4b89      	ldr	r3, [pc, #548]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e8      	bne.n	8003400 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d105      	bne.n	8003440 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003434:	4b84      	ldr	r3, [pc, #528]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	4a83      	ldr	r2, [pc, #524]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 800343a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80fa 	beq.w	800363e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	2b02      	cmp	r3, #2
 8003450:	f040 80d0 	bne.w	80035f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003454:	4b7c      	ldr	r3, [pc, #496]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0203 	and.w	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	429a      	cmp	r2, r3
 8003466:	d130      	bne.n	80034ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	3b01      	subs	r3, #1
 8003474:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d127      	bne.n	80034ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003484:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d11f      	bne.n	80034ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003494:	2a07      	cmp	r2, #7
 8003496:	bf14      	ite	ne
 8003498:	2201      	movne	r2, #1
 800349a:	2200      	moveq	r2, #0
 800349c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800349e:	4293      	cmp	r3, r2
 80034a0:	d113      	bne.n	80034ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	3b01      	subs	r3, #1
 80034b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d06e      	beq.n	80035a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d069      	beq.n	80035a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034d0:	4b5d      	ldr	r3, [pc, #372]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034dc:	4b5a      	ldr	r3, [pc, #360]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0a9      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034ec:	4b56      	ldr	r3, [pc, #344]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a55      	ldr	r2, [pc, #340]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80034f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034f8:	f7fe fa28 	bl	800194c <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe fa24 	bl	800194c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e096      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003512:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351e:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	4b4a      	ldr	r3, [pc, #296]	; (800364c <HAL_RCC_OscConfig+0x7ac>)
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800352e:	3a01      	subs	r2, #1
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003538:	0212      	lsls	r2, r2, #8
 800353a:	4311      	orrs	r1, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003540:	0852      	lsrs	r2, r2, #1
 8003542:	3a01      	subs	r2, #1
 8003544:	0552      	lsls	r2, r2, #21
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800354c:	0852      	lsrs	r2, r2, #1
 800354e:	3a01      	subs	r2, #1
 8003550:	0652      	lsls	r2, r2, #25
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003558:	0912      	lsrs	r2, r2, #4
 800355a:	0452      	lsls	r2, r2, #17
 800355c:	430a      	orrs	r2, r1
 800355e:	493a      	ldr	r1, [pc, #232]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003564:	4b38      	ldr	r3, [pc, #224]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a37      	ldr	r2, [pc, #220]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003570:	4b35      	ldr	r3, [pc, #212]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a34      	ldr	r2, [pc, #208]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800357a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800357c:	f7fe f9e6 	bl	800194c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe f9e2 	bl	800194c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e054      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035a2:	e04c      	b.n	800363e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e04b      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d144      	bne.n	800363e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c0:	4b21      	ldr	r3, [pc, #132]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80035c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035cc:	f7fe f9be 	bl	800194c <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fe f9ba 	bl	800194c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e02c      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x734>
 80035f2:	e024      	b.n	800363e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d01f      	beq.n	800363a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a12      	ldr	r2, [pc, #72]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fe f9a1 	bl	800194c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe f99d 	bl	800194c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e00f      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	4905      	ldr	r1, [pc, #20]	; (8003648 <HAL_RCC_OscConfig+0x7a8>)
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <HAL_RCC_OscConfig+0x7b0>)
 8003634:	4013      	ands	r3, r2
 8003636:	60cb      	str	r3, [r1, #12]
 8003638:	e001      	b.n	800363e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	f99d808c 	.word	0xf99d808c
 8003650:	feeefffc 	.word	0xfeeefffc

08003654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0e7      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003668:	4b75      	ldr	r3, [pc, #468]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d910      	bls.n	8003698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b72      	ldr	r3, [pc, #456]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 0207 	bic.w	r2, r3, #7
 800367e:	4970      	ldr	r1, [pc, #448]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b6e      	ldr	r3, [pc, #440]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0cf      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d010      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	4b66      	ldr	r3, [pc, #408]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d908      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b4:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4960      	ldr	r1, [pc, #384]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d04c      	beq.n	800376c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	4b5a      	ldr	r3, [pc, #360]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d121      	bne.n	800372a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e0a6      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f2:	4b54      	ldr	r3, [pc, #336]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d115      	bne.n	800372a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e09a      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800370a:	4b4e      	ldr	r3, [pc, #312]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e08e      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e086      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800372a:	4b46      	ldr	r3, [pc, #280]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4943      	ldr	r1, [pc, #268]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fe f906 	bl	800194c <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fe f902 	bl	800194c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e06e      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 020c 	and.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d1eb      	bne.n	8003744 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003784:	429a      	cmp	r2, r3
 8003786:	d208      	bcs.n	800379a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003788:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	492b      	ldr	r1, [pc, #172]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d210      	bcs.n	80037ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 0207 	bic.w	r2, r3, #7
 80037b0:	4923      	ldr	r1, [pc, #140]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d001      	beq.n	80037ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e036      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4918      	ldr	r1, [pc, #96]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4910      	ldr	r1, [pc, #64]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003808:	f000 f824 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	490b      	ldr	r1, [pc, #44]	; (8003848 <HAL_RCC_ClockConfig+0x1f4>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
 8003824:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1f8>)
 8003826:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1fc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe f83d 	bl	80018ac <HAL_InitTick>
 8003832:	4603      	mov	r3, r0
 8003834:	72fb      	strb	r3, [r7, #11]

  return status;
 8003836:	7afb      	ldrb	r3, [r7, #11]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40022000 	.word	0x40022000
 8003844:	40021000 	.word	0x40021000
 8003848:	08005e4c 	.word	0x08005e4c
 800384c:	20000000 	.word	0x20000000
 8003850:	20000014 	.word	0x20000014

08003854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003862:	4b3e      	ldr	r3, [pc, #248]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800386c:	4b3b      	ldr	r3, [pc, #236]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x34>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d121      	bne.n	80038c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d11e      	bne.n	80038c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003894:	4b31      	ldr	r3, [pc, #196]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 8003896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	e005      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038a4:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10d      	bne.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d102      	bne.n	80038d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e004      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038d8:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_RCC_GetSysClockFreq+0x114>)
 80038da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b0c      	cmp	r3, #12
 80038e0:	d134      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0xa6>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d003      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0xac>
 80038f8:	e005      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <HAL_RCC_GetSysClockFreq+0x110>)
 80038fc:	617b      	str	r3, [r7, #20]
      break;
 80038fe:	e005      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_RCC_GetSysClockFreq+0x114>)
 8003902:	617b      	str	r3, [r7, #20]
      break;
 8003904:	e002      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	617b      	str	r3, [r7, #20]
      break;
 800390a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	3301      	adds	r3, #1
 8003918:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	fb02 f203 	mul.w	r2, r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	0e5b      	lsrs	r3, r3, #25
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	3301      	adds	r3, #1
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800394c:	69bb      	ldr	r3, [r7, #24]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	08005e64 	.word	0x08005e64
 8003964:	00f42400 	.word	0x00f42400
 8003968:	007a1200 	.word	0x007a1200

0800396c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_RCC_GetHCLKFreq+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000000 	.word	0x20000000

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003988:	f7ff fff0 	bl	800396c <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4904      	ldr	r1, [pc, #16]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08005e5c 	.word	0x08005e5c

080039b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039b4:	f7ff ffda 	bl	800396c <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0adb      	lsrs	r3, r3, #11
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4904      	ldr	r1, [pc, #16]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08005e5c 	.word	0x08005e5c

080039dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039f4:	f7ff f9f0 	bl	8002dd8 <HAL_PWREx_GetVoltageRange>
 80039f8:	6178      	str	r0, [r7, #20]
 80039fa:	e014      	b.n	8003a26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
 8003a08:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a14:	f7ff f9e0 	bl	8002dd8 <HAL_PWREx_GetVoltageRange>
 8003a18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a2c:	d10b      	bne.n	8003a46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d919      	bls.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2ba0      	cmp	r3, #160	; 0xa0
 8003a38:	d902      	bls.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e013      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a40:	2301      	movs	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	e010      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d902      	bls.n	8003a52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	e00a      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b80      	cmp	r3, #128	; 0x80
 8003a56:	d102      	bne.n	8003a5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a58:	2302      	movs	r3, #2
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e004      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b70      	cmp	r3, #112	; 0x70
 8003a62:	d101      	bne.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a64:	2301      	movs	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 0207 	bic.w	r2, r3, #7
 8003a70:	4909      	ldr	r1, [pc, #36]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d001      	beq.n	8003a8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40022000 	.word	0x40022000

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d041      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003abc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ac0:	d02a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ac2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ac6:	d824      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad2:	d81e      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003adc:	d010      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ade:	e018      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ae0:	4b86      	ldr	r3, [pc, #536]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a85      	ldr	r2, [pc, #532]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aec:	e015      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fabb 	bl	8004070 <RCCEx_PLLSAI1_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003afe:	e00c      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3320      	adds	r3, #32
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fba6 	bl	8004258 <RCCEx_PLLSAI2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b10:	e003      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	74fb      	strb	r3, [r7, #19]
      break;
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b20:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2e:	4973      	ldr	r1, [pc, #460]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d041      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b50:	d02a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b56:	d824      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b5c:	d008      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b62:	d81e      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b6c:	d010      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b6e:	e018      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b70:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a61      	ldr	r2, [pc, #388]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b7c:	e015      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fa73 	bl	8004070 <RCCEx_PLLSAI1_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b8e:	e00c      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3320      	adds	r3, #32
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fb5e 	bl	8004258 <RCCEx_PLLSAI2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ba0:	e003      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bb0:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bbe:	494f      	ldr	r1, [pc, #316]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bc6:	e001      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a0 	beq.w	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf4:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003c00:	4b3e      	ldr	r3, [pc, #248]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c10:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a3a      	ldr	r2, [pc, #232]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c1c:	f7fd fe96 	bl	800194c <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c22:	e009      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fd fe92 	bl	800194c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d902      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	74fb      	strb	r3, [r7, #19]
        break;
 8003c36:	e005      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ef      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d15c      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01f      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d019      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c74:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fd fe51 	bl	800194c <HAL_GetTick>
 8003caa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cac:	e00b      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd fe4d 	bl	800194c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d902      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	74fb      	strb	r3, [r7, #19]
            break;
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ec      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cea:	4904      	ldr	r1, [pc, #16]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cf2:	e009      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	74bb      	strb	r3, [r7, #18]
 8003cf8:	e006      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d08:	7c7b      	ldrb	r3, [r7, #17]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d105      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0e:	4b9e      	ldr	r3, [pc, #632]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	4a9d      	ldr	r2, [pc, #628]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d26:	4b98      	ldr	r3, [pc, #608]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f023 0203 	bic.w	r2, r3, #3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	4994      	ldr	r1, [pc, #592]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d48:	4b8f      	ldr	r3, [pc, #572]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f023 020c 	bic.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	498c      	ldr	r1, [pc, #560]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d6a:	4b87      	ldr	r3, [pc, #540]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	4983      	ldr	r1, [pc, #524]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d8c:	4b7e      	ldr	r3, [pc, #504]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	497b      	ldr	r1, [pc, #492]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dae:	4b76      	ldr	r3, [pc, #472]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbc:	4972      	ldr	r1, [pc, #456]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd0:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	496a      	ldr	r1, [pc, #424]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003df2:	4b65      	ldr	r3, [pc, #404]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	4961      	ldr	r1, [pc, #388]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e14:	4b5c      	ldr	r3, [pc, #368]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e22:	4959      	ldr	r1, [pc, #356]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e36:	4b54      	ldr	r3, [pc, #336]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e44:	4950      	ldr	r1, [pc, #320]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e58:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	4948      	ldr	r1, [pc, #288]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e7a:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	493f      	ldr	r1, [pc, #252]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d028      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eaa:	4937      	ldr	r1, [pc, #220]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eba:	d106      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ebc:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a31      	ldr	r2, [pc, #196]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec6:	60d3      	str	r3, [r2, #12]
 8003ec8:	e011      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f8c8 	bl	8004070 <RCCEx_PLLSAI1_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d028      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003efa:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	491f      	ldr	r1, [pc, #124]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f18:	d106      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f24:	60d3      	str	r3, [r2, #12]
 8003f26:	e011      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2101      	movs	r1, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 f899 	bl	8004070 <RCCEx_PLLSAI1_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d02b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f76:	d109      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a02      	ldr	r2, [pc, #8]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f82:	60d3      	str	r3, [r2, #12]
 8003f84:	e014      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f867 	bl	8004070 <RCCEx_PLLSAI1_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02f      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fca:	4928      	ldr	r1, [pc, #160]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f844 	bl	8004070 <RCCEx_PLLSAI1_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d014      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	74bb      	strb	r3, [r7, #18]
 8003ff6:	e011      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004000:	d10c      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3320      	adds	r3, #32
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f925 	bl	8004258 <RCCEx_PLLSAI2_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004036:	490d      	ldr	r1, [pc, #52]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800404a:	4b08      	ldr	r3, [pc, #32]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405a:	4904      	ldr	r1, [pc, #16]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004062:	7cbb      	ldrb	r3, [r7, #18]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000

08004070 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800407e:	4b75      	ldr	r3, [pc, #468]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d018      	beq.n	80040bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800408a:	4b72      	ldr	r3, [pc, #456]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0203 	and.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d10d      	bne.n	80040b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
       ||
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040a2:	4b6c      	ldr	r3, [pc, #432]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	091b      	lsrs	r3, r3, #4
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
       ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d047      	beq.n	8004146 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
 80040ba:	e044      	b.n	8004146 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d018      	beq.n	80040f6 <RCCEx_PLLSAI1_Config+0x86>
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d825      	bhi.n	8004114 <RCCEx_PLLSAI1_Config+0xa4>
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d002      	beq.n	80040d2 <RCCEx_PLLSAI1_Config+0x62>
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d009      	beq.n	80040e4 <RCCEx_PLLSAI1_Config+0x74>
 80040d0:	e020      	b.n	8004114 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040d2:	4b60      	ldr	r3, [pc, #384]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11d      	bne.n	800411a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e2:	e01a      	b.n	800411a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040e4:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d116      	bne.n	800411e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f4:	e013      	b.n	800411e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040f6:	4b57      	ldr	r3, [pc, #348]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004102:	4b54      	ldr	r3, [pc, #336]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004112:	e006      	b.n	8004122 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      break;
 8004118:	e004      	b.n	8004124 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800411a:	bf00      	nop
 800411c:	e002      	b.n	8004124 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800411e:	bf00      	nop
 8004120:	e000      	b.n	8004124 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004122:	bf00      	nop
    }

    if(status == HAL_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800412a:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	430b      	orrs	r3, r1
 8004140:	4944      	ldr	r1, [pc, #272]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d17d      	bne.n	8004248 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800414c:	4b41      	ldr	r3, [pc, #260]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a40      	ldr	r2, [pc, #256]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004152:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004158:	f7fd fbf8 	bl	800194c <HAL_GetTick>
 800415c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800415e:	e009      	b.n	8004174 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004160:	f7fd fbf4 	bl	800194c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d902      	bls.n	8004174 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	73fb      	strb	r3, [r7, #15]
        break;
 8004172:	e005      	b.n	8004180 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004174:	4b37      	ldr	r3, [pc, #220]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ef      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d160      	bne.n	8004248 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d111      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800418c:	4b31      	ldr	r3, [pc, #196]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6892      	ldr	r2, [r2, #8]
 800419c:	0211      	lsls	r1, r2, #8
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68d2      	ldr	r2, [r2, #12]
 80041a2:	0912      	lsrs	r2, r2, #4
 80041a4:	0452      	lsls	r2, r2, #17
 80041a6:	430a      	orrs	r2, r1
 80041a8:	492a      	ldr	r1, [pc, #168]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	610b      	str	r3, [r1, #16]
 80041ae:	e027      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d112      	bne.n	80041dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6892      	ldr	r2, [r2, #8]
 80041c6:	0211      	lsls	r1, r2, #8
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6912      	ldr	r2, [r2, #16]
 80041cc:	0852      	lsrs	r2, r2, #1
 80041ce:	3a01      	subs	r2, #1
 80041d0:	0552      	lsls	r2, r2, #21
 80041d2:	430a      	orrs	r2, r1
 80041d4:	491f      	ldr	r1, [pc, #124]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	610b      	str	r3, [r1, #16]
 80041da:	e011      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6892      	ldr	r2, [r2, #8]
 80041ec:	0211      	lsls	r1, r2, #8
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6952      	ldr	r2, [r2, #20]
 80041f2:	0852      	lsrs	r2, r2, #1
 80041f4:	3a01      	subs	r2, #1
 80041f6:	0652      	lsls	r2, r2, #25
 80041f8:	430a      	orrs	r2, r1
 80041fa:	4916      	ldr	r1, [pc, #88]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004206:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800420a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd fb9e 	bl	800194c <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004214:	f7fd fb9a 	bl	800194c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
          break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ef      	beq.n	8004214 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	4904      	ldr	r1, [pc, #16]	; (8004254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	4313      	orrs	r3, r2
 8004246:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000

08004258 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004266:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d018      	beq.n	80042a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004272:	4b67      	ldr	r3, [pc, #412]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0203 	and.w	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d10d      	bne.n	800429e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
       ||
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800428a:	4b61      	ldr	r3, [pc, #388]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	091b      	lsrs	r3, r3, #4
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
       ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d047      	beq.n	800432e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
 80042a2:	e044      	b.n	800432e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d018      	beq.n	80042de <RCCEx_PLLSAI2_Config+0x86>
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d825      	bhi.n	80042fc <RCCEx_PLLSAI2_Config+0xa4>
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d002      	beq.n	80042ba <RCCEx_PLLSAI2_Config+0x62>
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d009      	beq.n	80042cc <RCCEx_PLLSAI2_Config+0x74>
 80042b8:	e020      	b.n	80042fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042ba:	4b55      	ldr	r3, [pc, #340]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d11d      	bne.n	8004302 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ca:	e01a      	b.n	8004302 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042cc:	4b50      	ldr	r3, [pc, #320]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d116      	bne.n	8004306 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042dc:	e013      	b.n	8004306 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042de:	4b4c      	ldr	r3, [pc, #304]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ea:	4b49      	ldr	r3, [pc, #292]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042fa:	e006      	b.n	800430a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004300:	e004      	b.n	800430c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004302:	bf00      	nop
 8004304:	e002      	b.n	800430c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004306:	bf00      	nop
 8004308:	e000      	b.n	800430c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800430a:	bf00      	nop
    }

    if(status == HAL_OK)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10d      	bne.n	800432e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	3b01      	subs	r3, #1
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	430b      	orrs	r3, r1
 8004328:	4939      	ldr	r1, [pc, #228]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d167      	bne.n	8004404 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004334:	4b36      	ldr	r3, [pc, #216]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a35      	ldr	r2, [pc, #212]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004340:	f7fd fb04 	bl	800194c <HAL_GetTick>
 8004344:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004346:	e009      	b.n	800435c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004348:	f7fd fb00 	bl	800194c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d902      	bls.n	800435c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	73fb      	strb	r3, [r7, #15]
        break;
 800435a:	e005      	b.n	8004368 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800435c:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1ef      	bne.n	8004348 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d14a      	bne.n	8004404 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d111      	bne.n	8004398 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800437c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6892      	ldr	r2, [r2, #8]
 8004384:	0211      	lsls	r1, r2, #8
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68d2      	ldr	r2, [r2, #12]
 800438a:	0912      	lsrs	r2, r2, #4
 800438c:	0452      	lsls	r2, r2, #17
 800438e:	430a      	orrs	r2, r1
 8004390:	491f      	ldr	r1, [pc, #124]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004392:	4313      	orrs	r3, r2
 8004394:	614b      	str	r3, [r1, #20]
 8004396:	e011      	b.n	80043bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004398:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6892      	ldr	r2, [r2, #8]
 80043a8:	0211      	lsls	r1, r2, #8
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6912      	ldr	r2, [r2, #16]
 80043ae:	0852      	lsrs	r2, r2, #1
 80043b0:	3a01      	subs	r2, #1
 80043b2:	0652      	lsls	r2, r2, #25
 80043b4:	430a      	orrs	r2, r1
 80043b6:	4916      	ldr	r1, [pc, #88]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043bc:	4b14      	ldr	r3, [pc, #80]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a13      	ldr	r2, [pc, #76]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd fac0 	bl	800194c <HAL_GetTick>
 80043cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043ce:	e009      	b.n	80043e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043d0:	f7fd fabc 	bl	800194c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d902      	bls.n	80043e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	73fb      	strb	r3, [r7, #15]
          break;
 80043e2:	e005      	b.n	80043f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ef      	beq.n	80043d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	4904      	ldr	r1, [pc, #16]	; (8004410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000

08004414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e040      	b.n	80044a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fc fe62 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f82c 	bl	80044b0 <UART_SetConfig>
 8004458:	4603      	mov	r3, r0
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e022      	b.n	80044a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 faaa 	bl	80049c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800447e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800448e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fb31 	bl	8004b08 <UART_CheckIdleState>
 80044a6:	4603      	mov	r3, r0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b0:	b5b0      	push	{r4, r5, r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4bad      	ldr	r3, [pc, #692]	; (8004790 <UART_SetConfig+0x2e0>)
 80044dc:	4013      	ands	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	69f9      	ldr	r1, [r7, #28]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4aa2      	ldr	r2, [pc, #648]	; (8004794 <UART_SetConfig+0x2e4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	4313      	orrs	r3, r2
 8004516:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a99      	ldr	r2, [pc, #612]	; (8004798 <UART_SetConfig+0x2e8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d121      	bne.n	800457a <UART_SetConfig+0xca>
 8004536:	4b99      	ldr	r3, [pc, #612]	; (800479c <UART_SetConfig+0x2ec>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b03      	cmp	r3, #3
 8004542:	d817      	bhi.n	8004574 <UART_SetConfig+0xc4>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x9c>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	0800455d 	.word	0x0800455d
 8004550:	08004569 	.word	0x08004569
 8004554:	08004563 	.word	0x08004563
 8004558:	0800456f 	.word	0x0800456f
 800455c:	2301      	movs	r3, #1
 800455e:	76fb      	strb	r3, [r7, #27]
 8004560:	e0e7      	b.n	8004732 <UART_SetConfig+0x282>
 8004562:	2302      	movs	r3, #2
 8004564:	76fb      	strb	r3, [r7, #27]
 8004566:	e0e4      	b.n	8004732 <UART_SetConfig+0x282>
 8004568:	2304      	movs	r3, #4
 800456a:	76fb      	strb	r3, [r7, #27]
 800456c:	e0e1      	b.n	8004732 <UART_SetConfig+0x282>
 800456e:	2308      	movs	r3, #8
 8004570:	76fb      	strb	r3, [r7, #27]
 8004572:	e0de      	b.n	8004732 <UART_SetConfig+0x282>
 8004574:	2310      	movs	r3, #16
 8004576:	76fb      	strb	r3, [r7, #27]
 8004578:	e0db      	b.n	8004732 <UART_SetConfig+0x282>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a88      	ldr	r2, [pc, #544]	; (80047a0 <UART_SetConfig+0x2f0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d132      	bne.n	80045ea <UART_SetConfig+0x13a>
 8004584:	4b85      	ldr	r3, [pc, #532]	; (800479c <UART_SetConfig+0x2ec>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d828      	bhi.n	80045e4 <UART_SetConfig+0x134>
 8004592:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <UART_SetConfig+0xe8>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045cd 	.word	0x080045cd
 800459c:	080045e5 	.word	0x080045e5
 80045a0:	080045e5 	.word	0x080045e5
 80045a4:	080045e5 	.word	0x080045e5
 80045a8:	080045d9 	.word	0x080045d9
 80045ac:	080045e5 	.word	0x080045e5
 80045b0:	080045e5 	.word	0x080045e5
 80045b4:	080045e5 	.word	0x080045e5
 80045b8:	080045d3 	.word	0x080045d3
 80045bc:	080045e5 	.word	0x080045e5
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	080045e5 	.word	0x080045e5
 80045c8:	080045df 	.word	0x080045df
 80045cc:	2300      	movs	r3, #0
 80045ce:	76fb      	strb	r3, [r7, #27]
 80045d0:	e0af      	b.n	8004732 <UART_SetConfig+0x282>
 80045d2:	2302      	movs	r3, #2
 80045d4:	76fb      	strb	r3, [r7, #27]
 80045d6:	e0ac      	b.n	8004732 <UART_SetConfig+0x282>
 80045d8:	2304      	movs	r3, #4
 80045da:	76fb      	strb	r3, [r7, #27]
 80045dc:	e0a9      	b.n	8004732 <UART_SetConfig+0x282>
 80045de:	2308      	movs	r3, #8
 80045e0:	76fb      	strb	r3, [r7, #27]
 80045e2:	e0a6      	b.n	8004732 <UART_SetConfig+0x282>
 80045e4:	2310      	movs	r3, #16
 80045e6:	76fb      	strb	r3, [r7, #27]
 80045e8:	e0a3      	b.n	8004732 <UART_SetConfig+0x282>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6d      	ldr	r2, [pc, #436]	; (80047a4 <UART_SetConfig+0x2f4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d120      	bne.n	8004636 <UART_SetConfig+0x186>
 80045f4:	4b69      	ldr	r3, [pc, #420]	; (800479c <UART_SetConfig+0x2ec>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045fe:	2b30      	cmp	r3, #48	; 0x30
 8004600:	d013      	beq.n	800462a <UART_SetConfig+0x17a>
 8004602:	2b30      	cmp	r3, #48	; 0x30
 8004604:	d814      	bhi.n	8004630 <UART_SetConfig+0x180>
 8004606:	2b20      	cmp	r3, #32
 8004608:	d009      	beq.n	800461e <UART_SetConfig+0x16e>
 800460a:	2b20      	cmp	r3, #32
 800460c:	d810      	bhi.n	8004630 <UART_SetConfig+0x180>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <UART_SetConfig+0x168>
 8004612:	2b10      	cmp	r3, #16
 8004614:	d006      	beq.n	8004624 <UART_SetConfig+0x174>
 8004616:	e00b      	b.n	8004630 <UART_SetConfig+0x180>
 8004618:	2300      	movs	r3, #0
 800461a:	76fb      	strb	r3, [r7, #27]
 800461c:	e089      	b.n	8004732 <UART_SetConfig+0x282>
 800461e:	2302      	movs	r3, #2
 8004620:	76fb      	strb	r3, [r7, #27]
 8004622:	e086      	b.n	8004732 <UART_SetConfig+0x282>
 8004624:	2304      	movs	r3, #4
 8004626:	76fb      	strb	r3, [r7, #27]
 8004628:	e083      	b.n	8004732 <UART_SetConfig+0x282>
 800462a:	2308      	movs	r3, #8
 800462c:	76fb      	strb	r3, [r7, #27]
 800462e:	e080      	b.n	8004732 <UART_SetConfig+0x282>
 8004630:	2310      	movs	r3, #16
 8004632:	76fb      	strb	r3, [r7, #27]
 8004634:	e07d      	b.n	8004732 <UART_SetConfig+0x282>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a5b      	ldr	r2, [pc, #364]	; (80047a8 <UART_SetConfig+0x2f8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d120      	bne.n	8004682 <UART_SetConfig+0x1d2>
 8004640:	4b56      	ldr	r3, [pc, #344]	; (800479c <UART_SetConfig+0x2ec>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800464a:	2bc0      	cmp	r3, #192	; 0xc0
 800464c:	d013      	beq.n	8004676 <UART_SetConfig+0x1c6>
 800464e:	2bc0      	cmp	r3, #192	; 0xc0
 8004650:	d814      	bhi.n	800467c <UART_SetConfig+0x1cc>
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d009      	beq.n	800466a <UART_SetConfig+0x1ba>
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d810      	bhi.n	800467c <UART_SetConfig+0x1cc>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <UART_SetConfig+0x1b4>
 800465e:	2b40      	cmp	r3, #64	; 0x40
 8004660:	d006      	beq.n	8004670 <UART_SetConfig+0x1c0>
 8004662:	e00b      	b.n	800467c <UART_SetConfig+0x1cc>
 8004664:	2300      	movs	r3, #0
 8004666:	76fb      	strb	r3, [r7, #27]
 8004668:	e063      	b.n	8004732 <UART_SetConfig+0x282>
 800466a:	2302      	movs	r3, #2
 800466c:	76fb      	strb	r3, [r7, #27]
 800466e:	e060      	b.n	8004732 <UART_SetConfig+0x282>
 8004670:	2304      	movs	r3, #4
 8004672:	76fb      	strb	r3, [r7, #27]
 8004674:	e05d      	b.n	8004732 <UART_SetConfig+0x282>
 8004676:	2308      	movs	r3, #8
 8004678:	76fb      	strb	r3, [r7, #27]
 800467a:	e05a      	b.n	8004732 <UART_SetConfig+0x282>
 800467c:	2310      	movs	r3, #16
 800467e:	76fb      	strb	r3, [r7, #27]
 8004680:	e057      	b.n	8004732 <UART_SetConfig+0x282>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a49      	ldr	r2, [pc, #292]	; (80047ac <UART_SetConfig+0x2fc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d125      	bne.n	80046d8 <UART_SetConfig+0x228>
 800468c:	4b43      	ldr	r3, [pc, #268]	; (800479c <UART_SetConfig+0x2ec>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469a:	d017      	beq.n	80046cc <UART_SetConfig+0x21c>
 800469c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a0:	d817      	bhi.n	80046d2 <UART_SetConfig+0x222>
 80046a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a6:	d00b      	beq.n	80046c0 <UART_SetConfig+0x210>
 80046a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ac:	d811      	bhi.n	80046d2 <UART_SetConfig+0x222>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <UART_SetConfig+0x20a>
 80046b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b6:	d006      	beq.n	80046c6 <UART_SetConfig+0x216>
 80046b8:	e00b      	b.n	80046d2 <UART_SetConfig+0x222>
 80046ba:	2300      	movs	r3, #0
 80046bc:	76fb      	strb	r3, [r7, #27]
 80046be:	e038      	b.n	8004732 <UART_SetConfig+0x282>
 80046c0:	2302      	movs	r3, #2
 80046c2:	76fb      	strb	r3, [r7, #27]
 80046c4:	e035      	b.n	8004732 <UART_SetConfig+0x282>
 80046c6:	2304      	movs	r3, #4
 80046c8:	76fb      	strb	r3, [r7, #27]
 80046ca:	e032      	b.n	8004732 <UART_SetConfig+0x282>
 80046cc:	2308      	movs	r3, #8
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e02f      	b.n	8004732 <UART_SetConfig+0x282>
 80046d2:	2310      	movs	r3, #16
 80046d4:	76fb      	strb	r3, [r7, #27]
 80046d6:	e02c      	b.n	8004732 <UART_SetConfig+0x282>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <UART_SetConfig+0x2e4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d125      	bne.n	800472e <UART_SetConfig+0x27e>
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <UART_SetConfig+0x2ec>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f0:	d017      	beq.n	8004722 <UART_SetConfig+0x272>
 80046f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f6:	d817      	bhi.n	8004728 <UART_SetConfig+0x278>
 80046f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fc:	d00b      	beq.n	8004716 <UART_SetConfig+0x266>
 80046fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004702:	d811      	bhi.n	8004728 <UART_SetConfig+0x278>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <UART_SetConfig+0x260>
 8004708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470c:	d006      	beq.n	800471c <UART_SetConfig+0x26c>
 800470e:	e00b      	b.n	8004728 <UART_SetConfig+0x278>
 8004710:	2300      	movs	r3, #0
 8004712:	76fb      	strb	r3, [r7, #27]
 8004714:	e00d      	b.n	8004732 <UART_SetConfig+0x282>
 8004716:	2302      	movs	r3, #2
 8004718:	76fb      	strb	r3, [r7, #27]
 800471a:	e00a      	b.n	8004732 <UART_SetConfig+0x282>
 800471c:	2304      	movs	r3, #4
 800471e:	76fb      	strb	r3, [r7, #27]
 8004720:	e007      	b.n	8004732 <UART_SetConfig+0x282>
 8004722:	2308      	movs	r3, #8
 8004724:	76fb      	strb	r3, [r7, #27]
 8004726:	e004      	b.n	8004732 <UART_SetConfig+0x282>
 8004728:	2310      	movs	r3, #16
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	e001      	b.n	8004732 <UART_SetConfig+0x282>
 800472e:	2310      	movs	r3, #16
 8004730:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a17      	ldr	r2, [pc, #92]	; (8004794 <UART_SetConfig+0x2e4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	f040 8087 	bne.w	800484c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800473e:	7efb      	ldrb	r3, [r7, #27]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d837      	bhi.n	80047b4 <UART_SetConfig+0x304>
 8004744:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x29c>)
 8004746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474a:	bf00      	nop
 800474c:	08004771 	.word	0x08004771
 8004750:	080047b5 	.word	0x080047b5
 8004754:	08004779 	.word	0x08004779
 8004758:	080047b5 	.word	0x080047b5
 800475c:	0800477f 	.word	0x0800477f
 8004760:	080047b5 	.word	0x080047b5
 8004764:	080047b5 	.word	0x080047b5
 8004768:	080047b5 	.word	0x080047b5
 800476c:	08004787 	.word	0x08004787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7ff f908 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8004774:	6178      	str	r0, [r7, #20]
        break;
 8004776:	e022      	b.n	80047be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004778:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <UART_SetConfig+0x300>)
 800477a:	617b      	str	r3, [r7, #20]
        break;
 800477c:	e01f      	b.n	80047be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477e:	f7ff f869 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8004782:	6178      	str	r0, [r7, #20]
        break;
 8004784:	e01b      	b.n	80047be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478a:	617b      	str	r3, [r7, #20]
        break;
 800478c:	e017      	b.n	80047be <UART_SetConfig+0x30e>
 800478e:	bf00      	nop
 8004790:	efff69f3 	.word	0xefff69f3
 8004794:	40008000 	.word	0x40008000
 8004798:	40013800 	.word	0x40013800
 800479c:	40021000 	.word	0x40021000
 80047a0:	40004400 	.word	0x40004400
 80047a4:	40004800 	.word	0x40004800
 80047a8:	40004c00 	.word	0x40004c00
 80047ac:	40005000 	.word	0x40005000
 80047b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	76bb      	strb	r3, [r7, #26]
        break;
 80047bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80f1 	beq.w	80049a8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4413      	add	r3, r2
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d305      	bcc.n	80047e2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d902      	bls.n	80047e8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	76bb      	strb	r3, [r7, #26]
 80047e6:	e0df      	b.n	80049a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	020b      	lsls	r3, r1, #8
 80047fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047fe:	0202      	lsls	r2, r0, #8
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	6849      	ldr	r1, [r1, #4]
 8004804:	0849      	lsrs	r1, r1, #1
 8004806:	4608      	mov	r0, r1
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	1814      	adds	r4, r2, r0
 800480e:	eb43 0501 	adc.w	r5, r3, r1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	461a      	mov	r2, r3
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fb ff0a 	bl	8000638 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4613      	mov	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004832:	d308      	bcc.n	8004846 <UART_SetConfig+0x396>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d204      	bcs.n	8004846 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e0b0      	b.n	80049a8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	76bb      	strb	r3, [r7, #26]
 800484a:	e0ad      	b.n	80049a8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004854:	d15b      	bne.n	800490e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004856:	7efb      	ldrb	r3, [r7, #27]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d828      	bhi.n	80048ae <UART_SetConfig+0x3fe>
 800485c:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0x3b4>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004889 	.word	0x08004889
 8004868:	08004891 	.word	0x08004891
 800486c:	08004899 	.word	0x08004899
 8004870:	080048af 	.word	0x080048af
 8004874:	0800489f 	.word	0x0800489f
 8004878:	080048af 	.word	0x080048af
 800487c:	080048af 	.word	0x080048af
 8004880:	080048af 	.word	0x080048af
 8004884:	080048a7 	.word	0x080048a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004888:	f7ff f87c 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 800488c:	6178      	str	r0, [r7, #20]
        break;
 800488e:	e013      	b.n	80048b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004890:	f7ff f88e 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 8004894:	6178      	str	r0, [r7, #20]
        break;
 8004896:	e00f      	b.n	80048b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004898:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <UART_SetConfig+0x510>)
 800489a:	617b      	str	r3, [r7, #20]
        break;
 800489c:	e00c      	b.n	80048b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489e:	f7fe ffd9 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80048a2:	6178      	str	r0, [r7, #20]
        break;
 80048a4:	e008      	b.n	80048b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048aa:	617b      	str	r3, [r7, #20]
        break;
 80048ac:	e004      	b.n	80048b8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	76bb      	strb	r3, [r7, #26]
        break;
 80048b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d074      	beq.n	80049a8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	005a      	lsls	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	441a      	add	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b0f      	cmp	r3, #15
 80048d8:	d916      	bls.n	8004908 <UART_SetConfig+0x458>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d212      	bcs.n	8004908 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f023 030f 	bic.w	r3, r3, #15
 80048ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	89fb      	ldrh	r3, [r7, #14]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	89fa      	ldrh	r2, [r7, #14]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	e04f      	b.n	80049a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	76bb      	strb	r3, [r7, #26]
 800490c:	e04c      	b.n	80049a8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800490e:	7efb      	ldrb	r3, [r7, #27]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d828      	bhi.n	8004966 <UART_SetConfig+0x4b6>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <UART_SetConfig+0x46c>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004941 	.word	0x08004941
 8004920:	08004949 	.word	0x08004949
 8004924:	08004951 	.word	0x08004951
 8004928:	08004967 	.word	0x08004967
 800492c:	08004957 	.word	0x08004957
 8004930:	08004967 	.word	0x08004967
 8004934:	08004967 	.word	0x08004967
 8004938:	08004967 	.word	0x08004967
 800493c:	0800495f 	.word	0x0800495f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004940:	f7ff f820 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8004944:	6178      	str	r0, [r7, #20]
        break;
 8004946:	e013      	b.n	8004970 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004948:	f7ff f832 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 800494c:	6178      	str	r0, [r7, #20]
        break;
 800494e:	e00f      	b.n	8004970 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004950:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <UART_SetConfig+0x510>)
 8004952:	617b      	str	r3, [r7, #20]
        break;
 8004954:	e00c      	b.n	8004970 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004956:	f7fe ff7d 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 800495a:	6178      	str	r0, [r7, #20]
        break;
 800495c:	e008      	b.n	8004970 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004962:	617b      	str	r3, [r7, #20]
        break;
 8004964:	e004      	b.n	8004970 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	76bb      	strb	r3, [r7, #26]
        break;
 800496e:	bf00      	nop
    }

    if (pclk != 0U)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d018      	beq.n	80049a8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	085a      	lsrs	r2, r3, #1
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	441a      	add	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b0f      	cmp	r3, #15
 800498e:	d909      	bls.n	80049a4 <UART_SetConfig+0x4f4>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004996:	d205      	bcs.n	80049a4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	b29a      	uxth	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	e001      	b.n	80049a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3720      	adds	r7, #32
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bdb0      	pop	{r4, r5, r7, pc}
 80049be:	bf00      	nop
 80049c0:	00f42400 	.word	0x00f42400

080049c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01a      	beq.n	8004ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac2:	d10a      	bne.n	8004ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b18:	f7fc ff18 	bl	800194c <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d10e      	bne.n	8004b4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f82d 	bl	8004b9a <UART_WaitOnFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e023      	b.n	8004b92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d10e      	bne.n	8004b76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f817 	bl	8004b9a <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e00d      	b.n	8004b92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b09c      	sub	sp, #112	; 0x70
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004baa:	e0a5      	b.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	f000 80a1 	beq.w	8004cf8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fc fec9 	bl	800194c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x32>
 8004bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d13e      	bne.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be0:	667b      	str	r3, [r7, #100]	; 0x64
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e6      	bne.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3308      	adds	r3, #8
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	663b      	str	r3, [r7, #96]	; 0x60
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e5      	bne.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e067      	b.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d04f      	beq.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c66:	d147      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c70:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
 8004c92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cc4:	623a      	str	r2, [r7, #32]
 8004cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	6a3a      	ldr	r2, [r7, #32]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e5      	bne.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e010      	b.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4013      	ands	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	f43f af4a 	beq.w	8004bac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3770      	adds	r7, #112	; 0x70
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <__errno>:
 8004d24:	4b01      	ldr	r3, [pc, #4]	; (8004d2c <__errno+0x8>)
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	2000001c 	.word	0x2000001c

08004d30 <__libc_init_array>:
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	4d0d      	ldr	r5, [pc, #52]	; (8004d68 <__libc_init_array+0x38>)
 8004d34:	4c0d      	ldr	r4, [pc, #52]	; (8004d6c <__libc_init_array+0x3c>)
 8004d36:	1b64      	subs	r4, r4, r5
 8004d38:	10a4      	asrs	r4, r4, #2
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	42a6      	cmp	r6, r4
 8004d3e:	d109      	bne.n	8004d54 <__libc_init_array+0x24>
 8004d40:	4d0b      	ldr	r5, [pc, #44]	; (8004d70 <__libc_init_array+0x40>)
 8004d42:	4c0c      	ldr	r4, [pc, #48]	; (8004d74 <__libc_init_array+0x44>)
 8004d44:	f001 f81e 	bl	8005d84 <_init>
 8004d48:	1b64      	subs	r4, r4, r5
 8004d4a:	10a4      	asrs	r4, r4, #2
 8004d4c:	2600      	movs	r6, #0
 8004d4e:	42a6      	cmp	r6, r4
 8004d50:	d105      	bne.n	8004d5e <__libc_init_array+0x2e>
 8004d52:	bd70      	pop	{r4, r5, r6, pc}
 8004d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d58:	4798      	blx	r3
 8004d5a:	3601      	adds	r6, #1
 8004d5c:	e7ee      	b.n	8004d3c <__libc_init_array+0xc>
 8004d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d62:	4798      	blx	r3
 8004d64:	3601      	adds	r6, #1
 8004d66:	e7f2      	b.n	8004d4e <__libc_init_array+0x1e>
 8004d68:	08005f34 	.word	0x08005f34
 8004d6c:	08005f34 	.word	0x08005f34
 8004d70:	08005f34 	.word	0x08005f34
 8004d74:	08005f38 	.word	0x08005f38

08004d78 <memset>:
 8004d78:	4402      	add	r2, r0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d100      	bne.n	8004d82 <memset+0xa>
 8004d80:	4770      	bx	lr
 8004d82:	f803 1b01 	strb.w	r1, [r3], #1
 8004d86:	e7f9      	b.n	8004d7c <memset+0x4>

08004d88 <iprintf>:
 8004d88:	b40f      	push	{r0, r1, r2, r3}
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <iprintf+0x2c>)
 8004d8c:	b513      	push	{r0, r1, r4, lr}
 8004d8e:	681c      	ldr	r4, [r3, #0]
 8004d90:	b124      	cbz	r4, 8004d9c <iprintf+0x14>
 8004d92:	69a3      	ldr	r3, [r4, #24]
 8004d94:	b913      	cbnz	r3, 8004d9c <iprintf+0x14>
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 fa5e 	bl	8005258 <__sinit>
 8004d9c:	ab05      	add	r3, sp, #20
 8004d9e:	9a04      	ldr	r2, [sp, #16]
 8004da0:	68a1      	ldr	r1, [r4, #8]
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 fc2f 	bl	8005608 <_vfiprintf_r>
 8004daa:	b002      	add	sp, #8
 8004dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db0:	b004      	add	sp, #16
 8004db2:	4770      	bx	lr
 8004db4:	2000001c 	.word	0x2000001c

08004db8 <_puts_r>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	460e      	mov	r6, r1
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	b118      	cbz	r0, 8004dc8 <_puts_r+0x10>
 8004dc0:	6983      	ldr	r3, [r0, #24]
 8004dc2:	b90b      	cbnz	r3, 8004dc8 <_puts_r+0x10>
 8004dc4:	f000 fa48 	bl	8005258 <__sinit>
 8004dc8:	69ab      	ldr	r3, [r5, #24]
 8004dca:	68ac      	ldr	r4, [r5, #8]
 8004dcc:	b913      	cbnz	r3, 8004dd4 <_puts_r+0x1c>
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 fa42 	bl	8005258 <__sinit>
 8004dd4:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <_puts_r+0xd0>)
 8004dd6:	429c      	cmp	r4, r3
 8004dd8:	d120      	bne.n	8004e1c <_puts_r+0x64>
 8004dda:	686c      	ldr	r4, [r5, #4]
 8004ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dde:	07db      	lsls	r3, r3, #31
 8004de0:	d405      	bmi.n	8004dee <_puts_r+0x36>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	0598      	lsls	r0, r3, #22
 8004de6:	d402      	bmi.n	8004dee <_puts_r+0x36>
 8004de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dea:	f000 fad3 	bl	8005394 <__retarget_lock_acquire_recursive>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	0719      	lsls	r1, r3, #28
 8004df2:	d51d      	bpl.n	8004e30 <_puts_r+0x78>
 8004df4:	6923      	ldr	r3, [r4, #16]
 8004df6:	b1db      	cbz	r3, 8004e30 <_puts_r+0x78>
 8004df8:	3e01      	subs	r6, #1
 8004dfa:	68a3      	ldr	r3, [r4, #8]
 8004dfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e00:	3b01      	subs	r3, #1
 8004e02:	60a3      	str	r3, [r4, #8]
 8004e04:	bb39      	cbnz	r1, 8004e56 <_puts_r+0x9e>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da38      	bge.n	8004e7c <_puts_r+0xc4>
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	210a      	movs	r1, #10
 8004e0e:	4628      	mov	r0, r5
 8004e10:	f000 f848 	bl	8004ea4 <__swbuf_r>
 8004e14:	3001      	adds	r0, #1
 8004e16:	d011      	beq.n	8004e3c <_puts_r+0x84>
 8004e18:	250a      	movs	r5, #10
 8004e1a:	e011      	b.n	8004e40 <_puts_r+0x88>
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <_puts_r+0xd4>)
 8004e1e:	429c      	cmp	r4, r3
 8004e20:	d101      	bne.n	8004e26 <_puts_r+0x6e>
 8004e22:	68ac      	ldr	r4, [r5, #8]
 8004e24:	e7da      	b.n	8004ddc <_puts_r+0x24>
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <_puts_r+0xd8>)
 8004e28:	429c      	cmp	r4, r3
 8004e2a:	bf08      	it	eq
 8004e2c:	68ec      	ldreq	r4, [r5, #12]
 8004e2e:	e7d5      	b.n	8004ddc <_puts_r+0x24>
 8004e30:	4621      	mov	r1, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f888 	bl	8004f48 <__swsetup_r>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d0dd      	beq.n	8004df8 <_puts_r+0x40>
 8004e3c:	f04f 35ff 	mov.w	r5, #4294967295
 8004e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e42:	07da      	lsls	r2, r3, #31
 8004e44:	d405      	bmi.n	8004e52 <_puts_r+0x9a>
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	059b      	lsls	r3, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_puts_r+0x9a>
 8004e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e4e:	f000 faa2 	bl	8005396 <__retarget_lock_release_recursive>
 8004e52:	4628      	mov	r0, r5
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da04      	bge.n	8004e64 <_puts_r+0xac>
 8004e5a:	69a2      	ldr	r2, [r4, #24]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	dc06      	bgt.n	8004e6e <_puts_r+0xb6>
 8004e60:	290a      	cmp	r1, #10
 8004e62:	d004      	beq.n	8004e6e <_puts_r+0xb6>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	6022      	str	r2, [r4, #0]
 8004e6a:	7019      	strb	r1, [r3, #0]
 8004e6c:	e7c5      	b.n	8004dfa <_puts_r+0x42>
 8004e6e:	4622      	mov	r2, r4
 8004e70:	4628      	mov	r0, r5
 8004e72:	f000 f817 	bl	8004ea4 <__swbuf_r>
 8004e76:	3001      	adds	r0, #1
 8004e78:	d1bf      	bne.n	8004dfa <_puts_r+0x42>
 8004e7a:	e7df      	b.n	8004e3c <_puts_r+0x84>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	250a      	movs	r5, #10
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	6022      	str	r2, [r4, #0]
 8004e84:	701d      	strb	r5, [r3, #0]
 8004e86:	e7db      	b.n	8004e40 <_puts_r+0x88>
 8004e88:	08005eb8 	.word	0x08005eb8
 8004e8c:	08005ed8 	.word	0x08005ed8
 8004e90:	08005e98 	.word	0x08005e98

08004e94 <puts>:
 8004e94:	4b02      	ldr	r3, [pc, #8]	; (8004ea0 <puts+0xc>)
 8004e96:	4601      	mov	r1, r0
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	f7ff bf8d 	b.w	8004db8 <_puts_r>
 8004e9e:	bf00      	nop
 8004ea0:	2000001c 	.word	0x2000001c

08004ea4 <__swbuf_r>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	460e      	mov	r6, r1
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	4605      	mov	r5, r0
 8004eac:	b118      	cbz	r0, 8004eb6 <__swbuf_r+0x12>
 8004eae:	6983      	ldr	r3, [r0, #24]
 8004eb0:	b90b      	cbnz	r3, 8004eb6 <__swbuf_r+0x12>
 8004eb2:	f000 f9d1 	bl	8005258 <__sinit>
 8004eb6:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <__swbuf_r+0x98>)
 8004eb8:	429c      	cmp	r4, r3
 8004eba:	d12b      	bne.n	8004f14 <__swbuf_r+0x70>
 8004ebc:	686c      	ldr	r4, [r5, #4]
 8004ebe:	69a3      	ldr	r3, [r4, #24]
 8004ec0:	60a3      	str	r3, [r4, #8]
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	071a      	lsls	r2, r3, #28
 8004ec6:	d52f      	bpl.n	8004f28 <__swbuf_r+0x84>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	b36b      	cbz	r3, 8004f28 <__swbuf_r+0x84>
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	6820      	ldr	r0, [r4, #0]
 8004ed0:	1ac0      	subs	r0, r0, r3
 8004ed2:	6963      	ldr	r3, [r4, #20]
 8004ed4:	b2f6      	uxtb	r6, r6
 8004ed6:	4283      	cmp	r3, r0
 8004ed8:	4637      	mov	r7, r6
 8004eda:	dc04      	bgt.n	8004ee6 <__swbuf_r+0x42>
 8004edc:	4621      	mov	r1, r4
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 f926 	bl	8005130 <_fflush_r>
 8004ee4:	bb30      	cbnz	r0, 8004f34 <__swbuf_r+0x90>
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	60a3      	str	r3, [r4, #8]
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	6022      	str	r2, [r4, #0]
 8004ef2:	701e      	strb	r6, [r3, #0]
 8004ef4:	6963      	ldr	r3, [r4, #20]
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	4283      	cmp	r3, r0
 8004efa:	d004      	beq.n	8004f06 <__swbuf_r+0x62>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	07db      	lsls	r3, r3, #31
 8004f00:	d506      	bpl.n	8004f10 <__swbuf_r+0x6c>
 8004f02:	2e0a      	cmp	r6, #10
 8004f04:	d104      	bne.n	8004f10 <__swbuf_r+0x6c>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 f911 	bl	8005130 <_fflush_r>
 8004f0e:	b988      	cbnz	r0, 8004f34 <__swbuf_r+0x90>
 8004f10:	4638      	mov	r0, r7
 8004f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <__swbuf_r+0x9c>)
 8004f16:	429c      	cmp	r4, r3
 8004f18:	d101      	bne.n	8004f1e <__swbuf_r+0x7a>
 8004f1a:	68ac      	ldr	r4, [r5, #8]
 8004f1c:	e7cf      	b.n	8004ebe <__swbuf_r+0x1a>
 8004f1e:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <__swbuf_r+0xa0>)
 8004f20:	429c      	cmp	r4, r3
 8004f22:	bf08      	it	eq
 8004f24:	68ec      	ldreq	r4, [r5, #12]
 8004f26:	e7ca      	b.n	8004ebe <__swbuf_r+0x1a>
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f000 f80c 	bl	8004f48 <__swsetup_r>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d0cb      	beq.n	8004ecc <__swbuf_r+0x28>
 8004f34:	f04f 37ff 	mov.w	r7, #4294967295
 8004f38:	e7ea      	b.n	8004f10 <__swbuf_r+0x6c>
 8004f3a:	bf00      	nop
 8004f3c:	08005eb8 	.word	0x08005eb8
 8004f40:	08005ed8 	.word	0x08005ed8
 8004f44:	08005e98 	.word	0x08005e98

08004f48 <__swsetup_r>:
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <__swsetup_r+0xcc>)
 8004f4a:	b570      	push	{r4, r5, r6, lr}
 8004f4c:	681d      	ldr	r5, [r3, #0]
 8004f4e:	4606      	mov	r6, r0
 8004f50:	460c      	mov	r4, r1
 8004f52:	b125      	cbz	r5, 8004f5e <__swsetup_r+0x16>
 8004f54:	69ab      	ldr	r3, [r5, #24]
 8004f56:	b913      	cbnz	r3, 8004f5e <__swsetup_r+0x16>
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f000 f97d 	bl	8005258 <__sinit>
 8004f5e:	4b2e      	ldr	r3, [pc, #184]	; (8005018 <__swsetup_r+0xd0>)
 8004f60:	429c      	cmp	r4, r3
 8004f62:	d10f      	bne.n	8004f84 <__swsetup_r+0x3c>
 8004f64:	686c      	ldr	r4, [r5, #4]
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f6c:	0719      	lsls	r1, r3, #28
 8004f6e:	d42c      	bmi.n	8004fca <__swsetup_r+0x82>
 8004f70:	06dd      	lsls	r5, r3, #27
 8004f72:	d411      	bmi.n	8004f98 <__swsetup_r+0x50>
 8004f74:	2309      	movs	r3, #9
 8004f76:	6033      	str	r3, [r6, #0]
 8004f78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f7c:	81a3      	strh	r3, [r4, #12]
 8004f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f82:	e03e      	b.n	8005002 <__swsetup_r+0xba>
 8004f84:	4b25      	ldr	r3, [pc, #148]	; (800501c <__swsetup_r+0xd4>)
 8004f86:	429c      	cmp	r4, r3
 8004f88:	d101      	bne.n	8004f8e <__swsetup_r+0x46>
 8004f8a:	68ac      	ldr	r4, [r5, #8]
 8004f8c:	e7eb      	b.n	8004f66 <__swsetup_r+0x1e>
 8004f8e:	4b24      	ldr	r3, [pc, #144]	; (8005020 <__swsetup_r+0xd8>)
 8004f90:	429c      	cmp	r4, r3
 8004f92:	bf08      	it	eq
 8004f94:	68ec      	ldreq	r4, [r5, #12]
 8004f96:	e7e6      	b.n	8004f66 <__swsetup_r+0x1e>
 8004f98:	0758      	lsls	r0, r3, #29
 8004f9a:	d512      	bpl.n	8004fc2 <__swsetup_r+0x7a>
 8004f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f9e:	b141      	cbz	r1, 8004fb2 <__swsetup_r+0x6a>
 8004fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fa4:	4299      	cmp	r1, r3
 8004fa6:	d002      	beq.n	8004fae <__swsetup_r+0x66>
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f000 fa59 	bl	8005460 <_free_r>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	6363      	str	r3, [r4, #52]	; 0x34
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6063      	str	r3, [r4, #4]
 8004fbe:	6923      	ldr	r3, [r4, #16]
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	f043 0308 	orr.w	r3, r3, #8
 8004fc8:	81a3      	strh	r3, [r4, #12]
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	b94b      	cbnz	r3, 8004fe2 <__swsetup_r+0x9a>
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd8:	d003      	beq.n	8004fe2 <__swsetup_r+0x9a>
 8004fda:	4621      	mov	r1, r4
 8004fdc:	4630      	mov	r0, r6
 8004fde:	f000 f9ff 	bl	80053e0 <__smakebuf_r>
 8004fe2:	89a0      	ldrh	r0, [r4, #12]
 8004fe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fe8:	f010 0301 	ands.w	r3, r0, #1
 8004fec:	d00a      	beq.n	8005004 <__swsetup_r+0xbc>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60a3      	str	r3, [r4, #8]
 8004ff2:	6963      	ldr	r3, [r4, #20]
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	61a3      	str	r3, [r4, #24]
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	b943      	cbnz	r3, 800500e <__swsetup_r+0xc6>
 8004ffc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005000:	d1ba      	bne.n	8004f78 <__swsetup_r+0x30>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	0781      	lsls	r1, r0, #30
 8005006:	bf58      	it	pl
 8005008:	6963      	ldrpl	r3, [r4, #20]
 800500a:	60a3      	str	r3, [r4, #8]
 800500c:	e7f4      	b.n	8004ff8 <__swsetup_r+0xb0>
 800500e:	2000      	movs	r0, #0
 8005010:	e7f7      	b.n	8005002 <__swsetup_r+0xba>
 8005012:	bf00      	nop
 8005014:	2000001c 	.word	0x2000001c
 8005018:	08005eb8 	.word	0x08005eb8
 800501c:	08005ed8 	.word	0x08005ed8
 8005020:	08005e98 	.word	0x08005e98

08005024 <__sflush_r>:
 8005024:	898a      	ldrh	r2, [r1, #12]
 8005026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800502a:	4605      	mov	r5, r0
 800502c:	0710      	lsls	r0, r2, #28
 800502e:	460c      	mov	r4, r1
 8005030:	d458      	bmi.n	80050e4 <__sflush_r+0xc0>
 8005032:	684b      	ldr	r3, [r1, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	dc05      	bgt.n	8005044 <__sflush_r+0x20>
 8005038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	dc02      	bgt.n	8005044 <__sflush_r+0x20>
 800503e:	2000      	movs	r0, #0
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005046:	2e00      	cmp	r6, #0
 8005048:	d0f9      	beq.n	800503e <__sflush_r+0x1a>
 800504a:	2300      	movs	r3, #0
 800504c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005050:	682f      	ldr	r7, [r5, #0]
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	d032      	beq.n	80050bc <__sflush_r+0x98>
 8005056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	075a      	lsls	r2, r3, #29
 800505c:	d505      	bpl.n	800506a <__sflush_r+0x46>
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	1ac0      	subs	r0, r0, r3
 8005062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005064:	b10b      	cbz	r3, 800506a <__sflush_r+0x46>
 8005066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005068:	1ac0      	subs	r0, r0, r3
 800506a:	2300      	movs	r3, #0
 800506c:	4602      	mov	r2, r0
 800506e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005070:	6a21      	ldr	r1, [r4, #32]
 8005072:	4628      	mov	r0, r5
 8005074:	47b0      	blx	r6
 8005076:	1c43      	adds	r3, r0, #1
 8005078:	89a3      	ldrh	r3, [r4, #12]
 800507a:	d106      	bne.n	800508a <__sflush_r+0x66>
 800507c:	6829      	ldr	r1, [r5, #0]
 800507e:	291d      	cmp	r1, #29
 8005080:	d82c      	bhi.n	80050dc <__sflush_r+0xb8>
 8005082:	4a2a      	ldr	r2, [pc, #168]	; (800512c <__sflush_r+0x108>)
 8005084:	40ca      	lsrs	r2, r1
 8005086:	07d6      	lsls	r6, r2, #31
 8005088:	d528      	bpl.n	80050dc <__sflush_r+0xb8>
 800508a:	2200      	movs	r2, #0
 800508c:	6062      	str	r2, [r4, #4]
 800508e:	04d9      	lsls	r1, r3, #19
 8005090:	6922      	ldr	r2, [r4, #16]
 8005092:	6022      	str	r2, [r4, #0]
 8005094:	d504      	bpl.n	80050a0 <__sflush_r+0x7c>
 8005096:	1c42      	adds	r2, r0, #1
 8005098:	d101      	bne.n	800509e <__sflush_r+0x7a>
 800509a:	682b      	ldr	r3, [r5, #0]
 800509c:	b903      	cbnz	r3, 80050a0 <__sflush_r+0x7c>
 800509e:	6560      	str	r0, [r4, #84]	; 0x54
 80050a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050a2:	602f      	str	r7, [r5, #0]
 80050a4:	2900      	cmp	r1, #0
 80050a6:	d0ca      	beq.n	800503e <__sflush_r+0x1a>
 80050a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050ac:	4299      	cmp	r1, r3
 80050ae:	d002      	beq.n	80050b6 <__sflush_r+0x92>
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 f9d5 	bl	8005460 <_free_r>
 80050b6:	2000      	movs	r0, #0
 80050b8:	6360      	str	r0, [r4, #52]	; 0x34
 80050ba:	e7c1      	b.n	8005040 <__sflush_r+0x1c>
 80050bc:	6a21      	ldr	r1, [r4, #32]
 80050be:	2301      	movs	r3, #1
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b0      	blx	r6
 80050c4:	1c41      	adds	r1, r0, #1
 80050c6:	d1c7      	bne.n	8005058 <__sflush_r+0x34>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0c4      	beq.n	8005058 <__sflush_r+0x34>
 80050ce:	2b1d      	cmp	r3, #29
 80050d0:	d001      	beq.n	80050d6 <__sflush_r+0xb2>
 80050d2:	2b16      	cmp	r3, #22
 80050d4:	d101      	bne.n	80050da <__sflush_r+0xb6>
 80050d6:	602f      	str	r7, [r5, #0]
 80050d8:	e7b1      	b.n	800503e <__sflush_r+0x1a>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	e7ad      	b.n	8005040 <__sflush_r+0x1c>
 80050e4:	690f      	ldr	r7, [r1, #16]
 80050e6:	2f00      	cmp	r7, #0
 80050e8:	d0a9      	beq.n	800503e <__sflush_r+0x1a>
 80050ea:	0793      	lsls	r3, r2, #30
 80050ec:	680e      	ldr	r6, [r1, #0]
 80050ee:	bf08      	it	eq
 80050f0:	694b      	ldreq	r3, [r1, #20]
 80050f2:	600f      	str	r7, [r1, #0]
 80050f4:	bf18      	it	ne
 80050f6:	2300      	movne	r3, #0
 80050f8:	eba6 0807 	sub.w	r8, r6, r7
 80050fc:	608b      	str	r3, [r1, #8]
 80050fe:	f1b8 0f00 	cmp.w	r8, #0
 8005102:	dd9c      	ble.n	800503e <__sflush_r+0x1a>
 8005104:	6a21      	ldr	r1, [r4, #32]
 8005106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005108:	4643      	mov	r3, r8
 800510a:	463a      	mov	r2, r7
 800510c:	4628      	mov	r0, r5
 800510e:	47b0      	blx	r6
 8005110:	2800      	cmp	r0, #0
 8005112:	dc06      	bgt.n	8005122 <__sflush_r+0xfe>
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511a:	81a3      	strh	r3, [r4, #12]
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	e78e      	b.n	8005040 <__sflush_r+0x1c>
 8005122:	4407      	add	r7, r0
 8005124:	eba8 0800 	sub.w	r8, r8, r0
 8005128:	e7e9      	b.n	80050fe <__sflush_r+0xda>
 800512a:	bf00      	nop
 800512c:	20400001 	.word	0x20400001

08005130 <_fflush_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	690b      	ldr	r3, [r1, #16]
 8005134:	4605      	mov	r5, r0
 8005136:	460c      	mov	r4, r1
 8005138:	b913      	cbnz	r3, 8005140 <_fflush_r+0x10>
 800513a:	2500      	movs	r5, #0
 800513c:	4628      	mov	r0, r5
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	b118      	cbz	r0, 800514a <_fflush_r+0x1a>
 8005142:	6983      	ldr	r3, [r0, #24]
 8005144:	b90b      	cbnz	r3, 800514a <_fflush_r+0x1a>
 8005146:	f000 f887 	bl	8005258 <__sinit>
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <_fflush_r+0x6c>)
 800514c:	429c      	cmp	r4, r3
 800514e:	d11b      	bne.n	8005188 <_fflush_r+0x58>
 8005150:	686c      	ldr	r4, [r5, #4]
 8005152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0ef      	beq.n	800513a <_fflush_r+0xa>
 800515a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800515c:	07d0      	lsls	r0, r2, #31
 800515e:	d404      	bmi.n	800516a <_fflush_r+0x3a>
 8005160:	0599      	lsls	r1, r3, #22
 8005162:	d402      	bmi.n	800516a <_fflush_r+0x3a>
 8005164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005166:	f000 f915 	bl	8005394 <__retarget_lock_acquire_recursive>
 800516a:	4628      	mov	r0, r5
 800516c:	4621      	mov	r1, r4
 800516e:	f7ff ff59 	bl	8005024 <__sflush_r>
 8005172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005174:	07da      	lsls	r2, r3, #31
 8005176:	4605      	mov	r5, r0
 8005178:	d4e0      	bmi.n	800513c <_fflush_r+0xc>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	059b      	lsls	r3, r3, #22
 800517e:	d4dd      	bmi.n	800513c <_fflush_r+0xc>
 8005180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005182:	f000 f908 	bl	8005396 <__retarget_lock_release_recursive>
 8005186:	e7d9      	b.n	800513c <_fflush_r+0xc>
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <_fflush_r+0x70>)
 800518a:	429c      	cmp	r4, r3
 800518c:	d101      	bne.n	8005192 <_fflush_r+0x62>
 800518e:	68ac      	ldr	r4, [r5, #8]
 8005190:	e7df      	b.n	8005152 <_fflush_r+0x22>
 8005192:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <_fflush_r+0x74>)
 8005194:	429c      	cmp	r4, r3
 8005196:	bf08      	it	eq
 8005198:	68ec      	ldreq	r4, [r5, #12]
 800519a:	e7da      	b.n	8005152 <_fflush_r+0x22>
 800519c:	08005eb8 	.word	0x08005eb8
 80051a0:	08005ed8 	.word	0x08005ed8
 80051a4:	08005e98 	.word	0x08005e98

080051a8 <std>:
 80051a8:	2300      	movs	r3, #0
 80051aa:	b510      	push	{r4, lr}
 80051ac:	4604      	mov	r4, r0
 80051ae:	e9c0 3300 	strd	r3, r3, [r0]
 80051b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051b6:	6083      	str	r3, [r0, #8]
 80051b8:	8181      	strh	r1, [r0, #12]
 80051ba:	6643      	str	r3, [r0, #100]	; 0x64
 80051bc:	81c2      	strh	r2, [r0, #14]
 80051be:	6183      	str	r3, [r0, #24]
 80051c0:	4619      	mov	r1, r3
 80051c2:	2208      	movs	r2, #8
 80051c4:	305c      	adds	r0, #92	; 0x5c
 80051c6:	f7ff fdd7 	bl	8004d78 <memset>
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <std+0x38>)
 80051cc:	6263      	str	r3, [r4, #36]	; 0x24
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <std+0x3c>)
 80051d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <std+0x40>)
 80051d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <std+0x44>)
 80051d8:	6224      	str	r4, [r4, #32]
 80051da:	6323      	str	r3, [r4, #48]	; 0x30
 80051dc:	bd10      	pop	{r4, pc}
 80051de:	bf00      	nop
 80051e0:	08005bb1 	.word	0x08005bb1
 80051e4:	08005bd3 	.word	0x08005bd3
 80051e8:	08005c0b 	.word	0x08005c0b
 80051ec:	08005c2f 	.word	0x08005c2f

080051f0 <_cleanup_r>:
 80051f0:	4901      	ldr	r1, [pc, #4]	; (80051f8 <_cleanup_r+0x8>)
 80051f2:	f000 b8af 	b.w	8005354 <_fwalk_reent>
 80051f6:	bf00      	nop
 80051f8:	08005131 	.word	0x08005131

080051fc <__sfmoreglue>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	1e4a      	subs	r2, r1, #1
 8005200:	2568      	movs	r5, #104	; 0x68
 8005202:	4355      	muls	r5, r2
 8005204:	460e      	mov	r6, r1
 8005206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800520a:	f000 f979 	bl	8005500 <_malloc_r>
 800520e:	4604      	mov	r4, r0
 8005210:	b140      	cbz	r0, 8005224 <__sfmoreglue+0x28>
 8005212:	2100      	movs	r1, #0
 8005214:	e9c0 1600 	strd	r1, r6, [r0]
 8005218:	300c      	adds	r0, #12
 800521a:	60a0      	str	r0, [r4, #8]
 800521c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005220:	f7ff fdaa 	bl	8004d78 <memset>
 8005224:	4620      	mov	r0, r4
 8005226:	bd70      	pop	{r4, r5, r6, pc}

08005228 <__sfp_lock_acquire>:
 8005228:	4801      	ldr	r0, [pc, #4]	; (8005230 <__sfp_lock_acquire+0x8>)
 800522a:	f000 b8b3 	b.w	8005394 <__retarget_lock_acquire_recursive>
 800522e:	bf00      	nop
 8005230:	2000026c 	.word	0x2000026c

08005234 <__sfp_lock_release>:
 8005234:	4801      	ldr	r0, [pc, #4]	; (800523c <__sfp_lock_release+0x8>)
 8005236:	f000 b8ae 	b.w	8005396 <__retarget_lock_release_recursive>
 800523a:	bf00      	nop
 800523c:	2000026c 	.word	0x2000026c

08005240 <__sinit_lock_acquire>:
 8005240:	4801      	ldr	r0, [pc, #4]	; (8005248 <__sinit_lock_acquire+0x8>)
 8005242:	f000 b8a7 	b.w	8005394 <__retarget_lock_acquire_recursive>
 8005246:	bf00      	nop
 8005248:	20000267 	.word	0x20000267

0800524c <__sinit_lock_release>:
 800524c:	4801      	ldr	r0, [pc, #4]	; (8005254 <__sinit_lock_release+0x8>)
 800524e:	f000 b8a2 	b.w	8005396 <__retarget_lock_release_recursive>
 8005252:	bf00      	nop
 8005254:	20000267 	.word	0x20000267

08005258 <__sinit>:
 8005258:	b510      	push	{r4, lr}
 800525a:	4604      	mov	r4, r0
 800525c:	f7ff fff0 	bl	8005240 <__sinit_lock_acquire>
 8005260:	69a3      	ldr	r3, [r4, #24]
 8005262:	b11b      	cbz	r3, 800526c <__sinit+0x14>
 8005264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005268:	f7ff bff0 	b.w	800524c <__sinit_lock_release>
 800526c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005270:	6523      	str	r3, [r4, #80]	; 0x50
 8005272:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <__sinit+0x68>)
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <__sinit+0x6c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	62a2      	str	r2, [r4, #40]	; 0x28
 800527a:	42a3      	cmp	r3, r4
 800527c:	bf04      	itt	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	61a3      	streq	r3, [r4, #24]
 8005282:	4620      	mov	r0, r4
 8005284:	f000 f820 	bl	80052c8 <__sfp>
 8005288:	6060      	str	r0, [r4, #4]
 800528a:	4620      	mov	r0, r4
 800528c:	f000 f81c 	bl	80052c8 <__sfp>
 8005290:	60a0      	str	r0, [r4, #8]
 8005292:	4620      	mov	r0, r4
 8005294:	f000 f818 	bl	80052c8 <__sfp>
 8005298:	2200      	movs	r2, #0
 800529a:	60e0      	str	r0, [r4, #12]
 800529c:	2104      	movs	r1, #4
 800529e:	6860      	ldr	r0, [r4, #4]
 80052a0:	f7ff ff82 	bl	80051a8 <std>
 80052a4:	68a0      	ldr	r0, [r4, #8]
 80052a6:	2201      	movs	r2, #1
 80052a8:	2109      	movs	r1, #9
 80052aa:	f7ff ff7d 	bl	80051a8 <std>
 80052ae:	68e0      	ldr	r0, [r4, #12]
 80052b0:	2202      	movs	r2, #2
 80052b2:	2112      	movs	r1, #18
 80052b4:	f7ff ff78 	bl	80051a8 <std>
 80052b8:	2301      	movs	r3, #1
 80052ba:	61a3      	str	r3, [r4, #24]
 80052bc:	e7d2      	b.n	8005264 <__sinit+0xc>
 80052be:	bf00      	nop
 80052c0:	08005e94 	.word	0x08005e94
 80052c4:	080051f1 	.word	0x080051f1

080052c8 <__sfp>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	4607      	mov	r7, r0
 80052cc:	f7ff ffac 	bl	8005228 <__sfp_lock_acquire>
 80052d0:	4b1e      	ldr	r3, [pc, #120]	; (800534c <__sfp+0x84>)
 80052d2:	681e      	ldr	r6, [r3, #0]
 80052d4:	69b3      	ldr	r3, [r6, #24]
 80052d6:	b913      	cbnz	r3, 80052de <__sfp+0x16>
 80052d8:	4630      	mov	r0, r6
 80052da:	f7ff ffbd 	bl	8005258 <__sinit>
 80052de:	3648      	adds	r6, #72	; 0x48
 80052e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	d503      	bpl.n	80052f0 <__sfp+0x28>
 80052e8:	6833      	ldr	r3, [r6, #0]
 80052ea:	b30b      	cbz	r3, 8005330 <__sfp+0x68>
 80052ec:	6836      	ldr	r6, [r6, #0]
 80052ee:	e7f7      	b.n	80052e0 <__sfp+0x18>
 80052f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052f4:	b9d5      	cbnz	r5, 800532c <__sfp+0x64>
 80052f6:	4b16      	ldr	r3, [pc, #88]	; (8005350 <__sfp+0x88>)
 80052f8:	60e3      	str	r3, [r4, #12]
 80052fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052fe:	6665      	str	r5, [r4, #100]	; 0x64
 8005300:	f000 f847 	bl	8005392 <__retarget_lock_init_recursive>
 8005304:	f7ff ff96 	bl	8005234 <__sfp_lock_release>
 8005308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800530c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005310:	6025      	str	r5, [r4, #0]
 8005312:	61a5      	str	r5, [r4, #24]
 8005314:	2208      	movs	r2, #8
 8005316:	4629      	mov	r1, r5
 8005318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800531c:	f7ff fd2c 	bl	8004d78 <memset>
 8005320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005328:	4620      	mov	r0, r4
 800532a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532c:	3468      	adds	r4, #104	; 0x68
 800532e:	e7d9      	b.n	80052e4 <__sfp+0x1c>
 8005330:	2104      	movs	r1, #4
 8005332:	4638      	mov	r0, r7
 8005334:	f7ff ff62 	bl	80051fc <__sfmoreglue>
 8005338:	4604      	mov	r4, r0
 800533a:	6030      	str	r0, [r6, #0]
 800533c:	2800      	cmp	r0, #0
 800533e:	d1d5      	bne.n	80052ec <__sfp+0x24>
 8005340:	f7ff ff78 	bl	8005234 <__sfp_lock_release>
 8005344:	230c      	movs	r3, #12
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	e7ee      	b.n	8005328 <__sfp+0x60>
 800534a:	bf00      	nop
 800534c:	08005e94 	.word	0x08005e94
 8005350:	ffff0001 	.word	0xffff0001

08005354 <_fwalk_reent>:
 8005354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005358:	4606      	mov	r6, r0
 800535a:	4688      	mov	r8, r1
 800535c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005360:	2700      	movs	r7, #0
 8005362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005366:	f1b9 0901 	subs.w	r9, r9, #1
 800536a:	d505      	bpl.n	8005378 <_fwalk_reent+0x24>
 800536c:	6824      	ldr	r4, [r4, #0]
 800536e:	2c00      	cmp	r4, #0
 8005370:	d1f7      	bne.n	8005362 <_fwalk_reent+0xe>
 8005372:	4638      	mov	r0, r7
 8005374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005378:	89ab      	ldrh	r3, [r5, #12]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d907      	bls.n	800538e <_fwalk_reent+0x3a>
 800537e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005382:	3301      	adds	r3, #1
 8005384:	d003      	beq.n	800538e <_fwalk_reent+0x3a>
 8005386:	4629      	mov	r1, r5
 8005388:	4630      	mov	r0, r6
 800538a:	47c0      	blx	r8
 800538c:	4307      	orrs	r7, r0
 800538e:	3568      	adds	r5, #104	; 0x68
 8005390:	e7e9      	b.n	8005366 <_fwalk_reent+0x12>

08005392 <__retarget_lock_init_recursive>:
 8005392:	4770      	bx	lr

08005394 <__retarget_lock_acquire_recursive>:
 8005394:	4770      	bx	lr

08005396 <__retarget_lock_release_recursive>:
 8005396:	4770      	bx	lr

08005398 <__swhatbuf_r>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	460e      	mov	r6, r1
 800539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a0:	2900      	cmp	r1, #0
 80053a2:	b096      	sub	sp, #88	; 0x58
 80053a4:	4614      	mov	r4, r2
 80053a6:	461d      	mov	r5, r3
 80053a8:	da07      	bge.n	80053ba <__swhatbuf_r+0x22>
 80053aa:	2300      	movs	r3, #0
 80053ac:	602b      	str	r3, [r5, #0]
 80053ae:	89b3      	ldrh	r3, [r6, #12]
 80053b0:	061a      	lsls	r2, r3, #24
 80053b2:	d410      	bmi.n	80053d6 <__swhatbuf_r+0x3e>
 80053b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053b8:	e00e      	b.n	80053d8 <__swhatbuf_r+0x40>
 80053ba:	466a      	mov	r2, sp
 80053bc:	f000 fc5e 	bl	8005c7c <_fstat_r>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	dbf2      	blt.n	80053aa <__swhatbuf_r+0x12>
 80053c4:	9a01      	ldr	r2, [sp, #4]
 80053c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053ce:	425a      	negs	r2, r3
 80053d0:	415a      	adcs	r2, r3
 80053d2:	602a      	str	r2, [r5, #0]
 80053d4:	e7ee      	b.n	80053b4 <__swhatbuf_r+0x1c>
 80053d6:	2340      	movs	r3, #64	; 0x40
 80053d8:	2000      	movs	r0, #0
 80053da:	6023      	str	r3, [r4, #0]
 80053dc:	b016      	add	sp, #88	; 0x58
 80053de:	bd70      	pop	{r4, r5, r6, pc}

080053e0 <__smakebuf_r>:
 80053e0:	898b      	ldrh	r3, [r1, #12]
 80053e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053e4:	079d      	lsls	r5, r3, #30
 80053e6:	4606      	mov	r6, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	d507      	bpl.n	80053fc <__smakebuf_r+0x1c>
 80053ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	6123      	str	r3, [r4, #16]
 80053f4:	2301      	movs	r3, #1
 80053f6:	6163      	str	r3, [r4, #20]
 80053f8:	b002      	add	sp, #8
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	ab01      	add	r3, sp, #4
 80053fe:	466a      	mov	r2, sp
 8005400:	f7ff ffca 	bl	8005398 <__swhatbuf_r>
 8005404:	9900      	ldr	r1, [sp, #0]
 8005406:	4605      	mov	r5, r0
 8005408:	4630      	mov	r0, r6
 800540a:	f000 f879 	bl	8005500 <_malloc_r>
 800540e:	b948      	cbnz	r0, 8005424 <__smakebuf_r+0x44>
 8005410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005414:	059a      	lsls	r2, r3, #22
 8005416:	d4ef      	bmi.n	80053f8 <__smakebuf_r+0x18>
 8005418:	f023 0303 	bic.w	r3, r3, #3
 800541c:	f043 0302 	orr.w	r3, r3, #2
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	e7e3      	b.n	80053ec <__smakebuf_r+0xc>
 8005424:	4b0d      	ldr	r3, [pc, #52]	; (800545c <__smakebuf_r+0x7c>)
 8005426:	62b3      	str	r3, [r6, #40]	; 0x28
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	6020      	str	r0, [r4, #0]
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	81a3      	strh	r3, [r4, #12]
 8005432:	9b00      	ldr	r3, [sp, #0]
 8005434:	6163      	str	r3, [r4, #20]
 8005436:	9b01      	ldr	r3, [sp, #4]
 8005438:	6120      	str	r0, [r4, #16]
 800543a:	b15b      	cbz	r3, 8005454 <__smakebuf_r+0x74>
 800543c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005440:	4630      	mov	r0, r6
 8005442:	f000 fc2d 	bl	8005ca0 <_isatty_r>
 8005446:	b128      	cbz	r0, 8005454 <__smakebuf_r+0x74>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	89a0      	ldrh	r0, [r4, #12]
 8005456:	4305      	orrs	r5, r0
 8005458:	81a5      	strh	r5, [r4, #12]
 800545a:	e7cd      	b.n	80053f8 <__smakebuf_r+0x18>
 800545c:	080051f1 	.word	0x080051f1

08005460 <_free_r>:
 8005460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005462:	2900      	cmp	r1, #0
 8005464:	d048      	beq.n	80054f8 <_free_r+0x98>
 8005466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800546a:	9001      	str	r0, [sp, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f1a1 0404 	sub.w	r4, r1, #4
 8005472:	bfb8      	it	lt
 8005474:	18e4      	addlt	r4, r4, r3
 8005476:	f000 fc35 	bl	8005ce4 <__malloc_lock>
 800547a:	4a20      	ldr	r2, [pc, #128]	; (80054fc <_free_r+0x9c>)
 800547c:	9801      	ldr	r0, [sp, #4]
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	4615      	mov	r5, r2
 8005482:	b933      	cbnz	r3, 8005492 <_free_r+0x32>
 8005484:	6063      	str	r3, [r4, #4]
 8005486:	6014      	str	r4, [r2, #0]
 8005488:	b003      	add	sp, #12
 800548a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800548e:	f000 bc2f 	b.w	8005cf0 <__malloc_unlock>
 8005492:	42a3      	cmp	r3, r4
 8005494:	d90b      	bls.n	80054ae <_free_r+0x4e>
 8005496:	6821      	ldr	r1, [r4, #0]
 8005498:	1862      	adds	r2, r4, r1
 800549a:	4293      	cmp	r3, r2
 800549c:	bf04      	itt	eq
 800549e:	681a      	ldreq	r2, [r3, #0]
 80054a0:	685b      	ldreq	r3, [r3, #4]
 80054a2:	6063      	str	r3, [r4, #4]
 80054a4:	bf04      	itt	eq
 80054a6:	1852      	addeq	r2, r2, r1
 80054a8:	6022      	streq	r2, [r4, #0]
 80054aa:	602c      	str	r4, [r5, #0]
 80054ac:	e7ec      	b.n	8005488 <_free_r+0x28>
 80054ae:	461a      	mov	r2, r3
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b10b      	cbz	r3, 80054b8 <_free_r+0x58>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d9fa      	bls.n	80054ae <_free_r+0x4e>
 80054b8:	6811      	ldr	r1, [r2, #0]
 80054ba:	1855      	adds	r5, r2, r1
 80054bc:	42a5      	cmp	r5, r4
 80054be:	d10b      	bne.n	80054d8 <_free_r+0x78>
 80054c0:	6824      	ldr	r4, [r4, #0]
 80054c2:	4421      	add	r1, r4
 80054c4:	1854      	adds	r4, r2, r1
 80054c6:	42a3      	cmp	r3, r4
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	d1dd      	bne.n	8005488 <_free_r+0x28>
 80054cc:	681c      	ldr	r4, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	6053      	str	r3, [r2, #4]
 80054d2:	4421      	add	r1, r4
 80054d4:	6011      	str	r1, [r2, #0]
 80054d6:	e7d7      	b.n	8005488 <_free_r+0x28>
 80054d8:	d902      	bls.n	80054e0 <_free_r+0x80>
 80054da:	230c      	movs	r3, #12
 80054dc:	6003      	str	r3, [r0, #0]
 80054de:	e7d3      	b.n	8005488 <_free_r+0x28>
 80054e0:	6825      	ldr	r5, [r4, #0]
 80054e2:	1961      	adds	r1, r4, r5
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf04      	itt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	6063      	str	r3, [r4, #4]
 80054ee:	bf04      	itt	eq
 80054f0:	1949      	addeq	r1, r1, r5
 80054f2:	6021      	streq	r1, [r4, #0]
 80054f4:	6054      	str	r4, [r2, #4]
 80054f6:	e7c7      	b.n	8005488 <_free_r+0x28>
 80054f8:	b003      	add	sp, #12
 80054fa:	bd30      	pop	{r4, r5, pc}
 80054fc:	200000a8 	.word	0x200000a8

08005500 <_malloc_r>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	1ccd      	adds	r5, r1, #3
 8005504:	f025 0503 	bic.w	r5, r5, #3
 8005508:	3508      	adds	r5, #8
 800550a:	2d0c      	cmp	r5, #12
 800550c:	bf38      	it	cc
 800550e:	250c      	movcc	r5, #12
 8005510:	2d00      	cmp	r5, #0
 8005512:	4606      	mov	r6, r0
 8005514:	db01      	blt.n	800551a <_malloc_r+0x1a>
 8005516:	42a9      	cmp	r1, r5
 8005518:	d903      	bls.n	8005522 <_malloc_r+0x22>
 800551a:	230c      	movs	r3, #12
 800551c:	6033      	str	r3, [r6, #0]
 800551e:	2000      	movs	r0, #0
 8005520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005522:	f000 fbdf 	bl	8005ce4 <__malloc_lock>
 8005526:	4921      	ldr	r1, [pc, #132]	; (80055ac <_malloc_r+0xac>)
 8005528:	680a      	ldr	r2, [r1, #0]
 800552a:	4614      	mov	r4, r2
 800552c:	b99c      	cbnz	r4, 8005556 <_malloc_r+0x56>
 800552e:	4f20      	ldr	r7, [pc, #128]	; (80055b0 <_malloc_r+0xb0>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	b923      	cbnz	r3, 800553e <_malloc_r+0x3e>
 8005534:	4621      	mov	r1, r4
 8005536:	4630      	mov	r0, r6
 8005538:	f000 fb2a 	bl	8005b90 <_sbrk_r>
 800553c:	6038      	str	r0, [r7, #0]
 800553e:	4629      	mov	r1, r5
 8005540:	4630      	mov	r0, r6
 8005542:	f000 fb25 	bl	8005b90 <_sbrk_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d123      	bne.n	8005592 <_malloc_r+0x92>
 800554a:	230c      	movs	r3, #12
 800554c:	6033      	str	r3, [r6, #0]
 800554e:	4630      	mov	r0, r6
 8005550:	f000 fbce 	bl	8005cf0 <__malloc_unlock>
 8005554:	e7e3      	b.n	800551e <_malloc_r+0x1e>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	1b5b      	subs	r3, r3, r5
 800555a:	d417      	bmi.n	800558c <_malloc_r+0x8c>
 800555c:	2b0b      	cmp	r3, #11
 800555e:	d903      	bls.n	8005568 <_malloc_r+0x68>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	441c      	add	r4, r3
 8005564:	6025      	str	r5, [r4, #0]
 8005566:	e004      	b.n	8005572 <_malloc_r+0x72>
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	42a2      	cmp	r2, r4
 800556c:	bf0c      	ite	eq
 800556e:	600b      	streq	r3, [r1, #0]
 8005570:	6053      	strne	r3, [r2, #4]
 8005572:	4630      	mov	r0, r6
 8005574:	f000 fbbc 	bl	8005cf0 <__malloc_unlock>
 8005578:	f104 000b 	add.w	r0, r4, #11
 800557c:	1d23      	adds	r3, r4, #4
 800557e:	f020 0007 	bic.w	r0, r0, #7
 8005582:	1ac2      	subs	r2, r0, r3
 8005584:	d0cc      	beq.n	8005520 <_malloc_r+0x20>
 8005586:	1a1b      	subs	r3, r3, r0
 8005588:	50a3      	str	r3, [r4, r2]
 800558a:	e7c9      	b.n	8005520 <_malloc_r+0x20>
 800558c:	4622      	mov	r2, r4
 800558e:	6864      	ldr	r4, [r4, #4]
 8005590:	e7cc      	b.n	800552c <_malloc_r+0x2c>
 8005592:	1cc4      	adds	r4, r0, #3
 8005594:	f024 0403 	bic.w	r4, r4, #3
 8005598:	42a0      	cmp	r0, r4
 800559a:	d0e3      	beq.n	8005564 <_malloc_r+0x64>
 800559c:	1a21      	subs	r1, r4, r0
 800559e:	4630      	mov	r0, r6
 80055a0:	f000 faf6 	bl	8005b90 <_sbrk_r>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d1dd      	bne.n	8005564 <_malloc_r+0x64>
 80055a8:	e7cf      	b.n	800554a <_malloc_r+0x4a>
 80055aa:	bf00      	nop
 80055ac:	200000a8 	.word	0x200000a8
 80055b0:	200000ac 	.word	0x200000ac

080055b4 <__sfputc_r>:
 80055b4:	6893      	ldr	r3, [r2, #8]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	b410      	push	{r4}
 80055bc:	6093      	str	r3, [r2, #8]
 80055be:	da08      	bge.n	80055d2 <__sfputc_r+0x1e>
 80055c0:	6994      	ldr	r4, [r2, #24]
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	db01      	blt.n	80055ca <__sfputc_r+0x16>
 80055c6:	290a      	cmp	r1, #10
 80055c8:	d103      	bne.n	80055d2 <__sfputc_r+0x1e>
 80055ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ce:	f7ff bc69 	b.w	8004ea4 <__swbuf_r>
 80055d2:	6813      	ldr	r3, [r2, #0]
 80055d4:	1c58      	adds	r0, r3, #1
 80055d6:	6010      	str	r0, [r2, #0]
 80055d8:	7019      	strb	r1, [r3, #0]
 80055da:	4608      	mov	r0, r1
 80055dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <__sfputs_r>:
 80055e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e4:	4606      	mov	r6, r0
 80055e6:	460f      	mov	r7, r1
 80055e8:	4614      	mov	r4, r2
 80055ea:	18d5      	adds	r5, r2, r3
 80055ec:	42ac      	cmp	r4, r5
 80055ee:	d101      	bne.n	80055f4 <__sfputs_r+0x12>
 80055f0:	2000      	movs	r0, #0
 80055f2:	e007      	b.n	8005604 <__sfputs_r+0x22>
 80055f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f8:	463a      	mov	r2, r7
 80055fa:	4630      	mov	r0, r6
 80055fc:	f7ff ffda 	bl	80055b4 <__sfputc_r>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d1f3      	bne.n	80055ec <__sfputs_r+0xa>
 8005604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005608 <_vfiprintf_r>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	460d      	mov	r5, r1
 800560e:	b09d      	sub	sp, #116	; 0x74
 8005610:	4614      	mov	r4, r2
 8005612:	4698      	mov	r8, r3
 8005614:	4606      	mov	r6, r0
 8005616:	b118      	cbz	r0, 8005620 <_vfiprintf_r+0x18>
 8005618:	6983      	ldr	r3, [r0, #24]
 800561a:	b90b      	cbnz	r3, 8005620 <_vfiprintf_r+0x18>
 800561c:	f7ff fe1c 	bl	8005258 <__sinit>
 8005620:	4b89      	ldr	r3, [pc, #548]	; (8005848 <_vfiprintf_r+0x240>)
 8005622:	429d      	cmp	r5, r3
 8005624:	d11b      	bne.n	800565e <_vfiprintf_r+0x56>
 8005626:	6875      	ldr	r5, [r6, #4]
 8005628:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800562a:	07d9      	lsls	r1, r3, #31
 800562c:	d405      	bmi.n	800563a <_vfiprintf_r+0x32>
 800562e:	89ab      	ldrh	r3, [r5, #12]
 8005630:	059a      	lsls	r2, r3, #22
 8005632:	d402      	bmi.n	800563a <_vfiprintf_r+0x32>
 8005634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005636:	f7ff fead 	bl	8005394 <__retarget_lock_acquire_recursive>
 800563a:	89ab      	ldrh	r3, [r5, #12]
 800563c:	071b      	lsls	r3, r3, #28
 800563e:	d501      	bpl.n	8005644 <_vfiprintf_r+0x3c>
 8005640:	692b      	ldr	r3, [r5, #16]
 8005642:	b9eb      	cbnz	r3, 8005680 <_vfiprintf_r+0x78>
 8005644:	4629      	mov	r1, r5
 8005646:	4630      	mov	r0, r6
 8005648:	f7ff fc7e 	bl	8004f48 <__swsetup_r>
 800564c:	b1c0      	cbz	r0, 8005680 <_vfiprintf_r+0x78>
 800564e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005650:	07dc      	lsls	r4, r3, #31
 8005652:	d50e      	bpl.n	8005672 <_vfiprintf_r+0x6a>
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	b01d      	add	sp, #116	; 0x74
 800565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565e:	4b7b      	ldr	r3, [pc, #492]	; (800584c <_vfiprintf_r+0x244>)
 8005660:	429d      	cmp	r5, r3
 8005662:	d101      	bne.n	8005668 <_vfiprintf_r+0x60>
 8005664:	68b5      	ldr	r5, [r6, #8]
 8005666:	e7df      	b.n	8005628 <_vfiprintf_r+0x20>
 8005668:	4b79      	ldr	r3, [pc, #484]	; (8005850 <_vfiprintf_r+0x248>)
 800566a:	429d      	cmp	r5, r3
 800566c:	bf08      	it	eq
 800566e:	68f5      	ldreq	r5, [r6, #12]
 8005670:	e7da      	b.n	8005628 <_vfiprintf_r+0x20>
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	0598      	lsls	r0, r3, #22
 8005676:	d4ed      	bmi.n	8005654 <_vfiprintf_r+0x4c>
 8005678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800567a:	f7ff fe8c 	bl	8005396 <__retarget_lock_release_recursive>
 800567e:	e7e9      	b.n	8005654 <_vfiprintf_r+0x4c>
 8005680:	2300      	movs	r3, #0
 8005682:	9309      	str	r3, [sp, #36]	; 0x24
 8005684:	2320      	movs	r3, #32
 8005686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800568a:	f8cd 800c 	str.w	r8, [sp, #12]
 800568e:	2330      	movs	r3, #48	; 0x30
 8005690:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005854 <_vfiprintf_r+0x24c>
 8005694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005698:	f04f 0901 	mov.w	r9, #1
 800569c:	4623      	mov	r3, r4
 800569e:	469a      	mov	sl, r3
 80056a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056a4:	b10a      	cbz	r2, 80056aa <_vfiprintf_r+0xa2>
 80056a6:	2a25      	cmp	r2, #37	; 0x25
 80056a8:	d1f9      	bne.n	800569e <_vfiprintf_r+0x96>
 80056aa:	ebba 0b04 	subs.w	fp, sl, r4
 80056ae:	d00b      	beq.n	80056c8 <_vfiprintf_r+0xc0>
 80056b0:	465b      	mov	r3, fp
 80056b2:	4622      	mov	r2, r4
 80056b4:	4629      	mov	r1, r5
 80056b6:	4630      	mov	r0, r6
 80056b8:	f7ff ff93 	bl	80055e2 <__sfputs_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	f000 80aa 	beq.w	8005816 <_vfiprintf_r+0x20e>
 80056c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056c4:	445a      	add	r2, fp
 80056c6:	9209      	str	r2, [sp, #36]	; 0x24
 80056c8:	f89a 3000 	ldrb.w	r3, [sl]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80a2 	beq.w	8005816 <_vfiprintf_r+0x20e>
 80056d2:	2300      	movs	r3, #0
 80056d4:	f04f 32ff 	mov.w	r2, #4294967295
 80056d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056dc:	f10a 0a01 	add.w	sl, sl, #1
 80056e0:	9304      	str	r3, [sp, #16]
 80056e2:	9307      	str	r3, [sp, #28]
 80056e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056e8:	931a      	str	r3, [sp, #104]	; 0x68
 80056ea:	4654      	mov	r4, sl
 80056ec:	2205      	movs	r2, #5
 80056ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f2:	4858      	ldr	r0, [pc, #352]	; (8005854 <_vfiprintf_r+0x24c>)
 80056f4:	f7fa fd6c 	bl	80001d0 <memchr>
 80056f8:	9a04      	ldr	r2, [sp, #16]
 80056fa:	b9d8      	cbnz	r0, 8005734 <_vfiprintf_r+0x12c>
 80056fc:	06d1      	lsls	r1, r2, #27
 80056fe:	bf44      	itt	mi
 8005700:	2320      	movmi	r3, #32
 8005702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005706:	0713      	lsls	r3, r2, #28
 8005708:	bf44      	itt	mi
 800570a:	232b      	movmi	r3, #43	; 0x2b
 800570c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005710:	f89a 3000 	ldrb.w	r3, [sl]
 8005714:	2b2a      	cmp	r3, #42	; 0x2a
 8005716:	d015      	beq.n	8005744 <_vfiprintf_r+0x13c>
 8005718:	9a07      	ldr	r2, [sp, #28]
 800571a:	4654      	mov	r4, sl
 800571c:	2000      	movs	r0, #0
 800571e:	f04f 0c0a 	mov.w	ip, #10
 8005722:	4621      	mov	r1, r4
 8005724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005728:	3b30      	subs	r3, #48	; 0x30
 800572a:	2b09      	cmp	r3, #9
 800572c:	d94e      	bls.n	80057cc <_vfiprintf_r+0x1c4>
 800572e:	b1b0      	cbz	r0, 800575e <_vfiprintf_r+0x156>
 8005730:	9207      	str	r2, [sp, #28]
 8005732:	e014      	b.n	800575e <_vfiprintf_r+0x156>
 8005734:	eba0 0308 	sub.w	r3, r0, r8
 8005738:	fa09 f303 	lsl.w	r3, r9, r3
 800573c:	4313      	orrs	r3, r2
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	46a2      	mov	sl, r4
 8005742:	e7d2      	b.n	80056ea <_vfiprintf_r+0xe2>
 8005744:	9b03      	ldr	r3, [sp, #12]
 8005746:	1d19      	adds	r1, r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	9103      	str	r1, [sp, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfbb      	ittet	lt
 8005750:	425b      	neglt	r3, r3
 8005752:	f042 0202 	orrlt.w	r2, r2, #2
 8005756:	9307      	strge	r3, [sp, #28]
 8005758:	9307      	strlt	r3, [sp, #28]
 800575a:	bfb8      	it	lt
 800575c:	9204      	strlt	r2, [sp, #16]
 800575e:	7823      	ldrb	r3, [r4, #0]
 8005760:	2b2e      	cmp	r3, #46	; 0x2e
 8005762:	d10c      	bne.n	800577e <_vfiprintf_r+0x176>
 8005764:	7863      	ldrb	r3, [r4, #1]
 8005766:	2b2a      	cmp	r3, #42	; 0x2a
 8005768:	d135      	bne.n	80057d6 <_vfiprintf_r+0x1ce>
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	1d1a      	adds	r2, r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	9203      	str	r2, [sp, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	bfb8      	it	lt
 8005776:	f04f 33ff 	movlt.w	r3, #4294967295
 800577a:	3402      	adds	r4, #2
 800577c:	9305      	str	r3, [sp, #20]
 800577e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005864 <_vfiprintf_r+0x25c>
 8005782:	7821      	ldrb	r1, [r4, #0]
 8005784:	2203      	movs	r2, #3
 8005786:	4650      	mov	r0, sl
 8005788:	f7fa fd22 	bl	80001d0 <memchr>
 800578c:	b140      	cbz	r0, 80057a0 <_vfiprintf_r+0x198>
 800578e:	2340      	movs	r3, #64	; 0x40
 8005790:	eba0 000a 	sub.w	r0, r0, sl
 8005794:	fa03 f000 	lsl.w	r0, r3, r0
 8005798:	9b04      	ldr	r3, [sp, #16]
 800579a:	4303      	orrs	r3, r0
 800579c:	3401      	adds	r4, #1
 800579e:	9304      	str	r3, [sp, #16]
 80057a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a4:	482c      	ldr	r0, [pc, #176]	; (8005858 <_vfiprintf_r+0x250>)
 80057a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057aa:	2206      	movs	r2, #6
 80057ac:	f7fa fd10 	bl	80001d0 <memchr>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d03f      	beq.n	8005834 <_vfiprintf_r+0x22c>
 80057b4:	4b29      	ldr	r3, [pc, #164]	; (800585c <_vfiprintf_r+0x254>)
 80057b6:	bb1b      	cbnz	r3, 8005800 <_vfiprintf_r+0x1f8>
 80057b8:	9b03      	ldr	r3, [sp, #12]
 80057ba:	3307      	adds	r3, #7
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	3308      	adds	r3, #8
 80057c2:	9303      	str	r3, [sp, #12]
 80057c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c6:	443b      	add	r3, r7
 80057c8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ca:	e767      	b.n	800569c <_vfiprintf_r+0x94>
 80057cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80057d0:	460c      	mov	r4, r1
 80057d2:	2001      	movs	r0, #1
 80057d4:	e7a5      	b.n	8005722 <_vfiprintf_r+0x11a>
 80057d6:	2300      	movs	r3, #0
 80057d8:	3401      	adds	r4, #1
 80057da:	9305      	str	r3, [sp, #20]
 80057dc:	4619      	mov	r1, r3
 80057de:	f04f 0c0a 	mov.w	ip, #10
 80057e2:	4620      	mov	r0, r4
 80057e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e8:	3a30      	subs	r2, #48	; 0x30
 80057ea:	2a09      	cmp	r2, #9
 80057ec:	d903      	bls.n	80057f6 <_vfiprintf_r+0x1ee>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0c5      	beq.n	800577e <_vfiprintf_r+0x176>
 80057f2:	9105      	str	r1, [sp, #20]
 80057f4:	e7c3      	b.n	800577e <_vfiprintf_r+0x176>
 80057f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057fa:	4604      	mov	r4, r0
 80057fc:	2301      	movs	r3, #1
 80057fe:	e7f0      	b.n	80057e2 <_vfiprintf_r+0x1da>
 8005800:	ab03      	add	r3, sp, #12
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	462a      	mov	r2, r5
 8005806:	4b16      	ldr	r3, [pc, #88]	; (8005860 <_vfiprintf_r+0x258>)
 8005808:	a904      	add	r1, sp, #16
 800580a:	4630      	mov	r0, r6
 800580c:	f3af 8000 	nop.w
 8005810:	4607      	mov	r7, r0
 8005812:	1c78      	adds	r0, r7, #1
 8005814:	d1d6      	bne.n	80057c4 <_vfiprintf_r+0x1bc>
 8005816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005818:	07d9      	lsls	r1, r3, #31
 800581a:	d405      	bmi.n	8005828 <_vfiprintf_r+0x220>
 800581c:	89ab      	ldrh	r3, [r5, #12]
 800581e:	059a      	lsls	r2, r3, #22
 8005820:	d402      	bmi.n	8005828 <_vfiprintf_r+0x220>
 8005822:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005824:	f7ff fdb7 	bl	8005396 <__retarget_lock_release_recursive>
 8005828:	89ab      	ldrh	r3, [r5, #12]
 800582a:	065b      	lsls	r3, r3, #25
 800582c:	f53f af12 	bmi.w	8005654 <_vfiprintf_r+0x4c>
 8005830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005832:	e711      	b.n	8005658 <_vfiprintf_r+0x50>
 8005834:	ab03      	add	r3, sp, #12
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	462a      	mov	r2, r5
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <_vfiprintf_r+0x258>)
 800583c:	a904      	add	r1, sp, #16
 800583e:	4630      	mov	r0, r6
 8005840:	f000 f880 	bl	8005944 <_printf_i>
 8005844:	e7e4      	b.n	8005810 <_vfiprintf_r+0x208>
 8005846:	bf00      	nop
 8005848:	08005eb8 	.word	0x08005eb8
 800584c:	08005ed8 	.word	0x08005ed8
 8005850:	08005e98 	.word	0x08005e98
 8005854:	08005ef8 	.word	0x08005ef8
 8005858:	08005f02 	.word	0x08005f02
 800585c:	00000000 	.word	0x00000000
 8005860:	080055e3 	.word	0x080055e3
 8005864:	08005efe 	.word	0x08005efe

08005868 <_printf_common>:
 8005868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	4616      	mov	r6, r2
 800586e:	4699      	mov	r9, r3
 8005870:	688a      	ldr	r2, [r1, #8]
 8005872:	690b      	ldr	r3, [r1, #16]
 8005874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005878:	4293      	cmp	r3, r2
 800587a:	bfb8      	it	lt
 800587c:	4613      	movlt	r3, r2
 800587e:	6033      	str	r3, [r6, #0]
 8005880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005884:	4607      	mov	r7, r0
 8005886:	460c      	mov	r4, r1
 8005888:	b10a      	cbz	r2, 800588e <_printf_common+0x26>
 800588a:	3301      	adds	r3, #1
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	0699      	lsls	r1, r3, #26
 8005892:	bf42      	ittt	mi
 8005894:	6833      	ldrmi	r3, [r6, #0]
 8005896:	3302      	addmi	r3, #2
 8005898:	6033      	strmi	r3, [r6, #0]
 800589a:	6825      	ldr	r5, [r4, #0]
 800589c:	f015 0506 	ands.w	r5, r5, #6
 80058a0:	d106      	bne.n	80058b0 <_printf_common+0x48>
 80058a2:	f104 0a19 	add.w	sl, r4, #25
 80058a6:	68e3      	ldr	r3, [r4, #12]
 80058a8:	6832      	ldr	r2, [r6, #0]
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	42ab      	cmp	r3, r5
 80058ae:	dc26      	bgt.n	80058fe <_printf_common+0x96>
 80058b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058b4:	1e13      	subs	r3, r2, #0
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	bf18      	it	ne
 80058ba:	2301      	movne	r3, #1
 80058bc:	0692      	lsls	r2, r2, #26
 80058be:	d42b      	bmi.n	8005918 <_printf_common+0xb0>
 80058c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058c4:	4649      	mov	r1, r9
 80058c6:	4638      	mov	r0, r7
 80058c8:	47c0      	blx	r8
 80058ca:	3001      	adds	r0, #1
 80058cc:	d01e      	beq.n	800590c <_printf_common+0xa4>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	68e5      	ldr	r5, [r4, #12]
 80058d2:	6832      	ldr	r2, [r6, #0]
 80058d4:	f003 0306 	and.w	r3, r3, #6
 80058d8:	2b04      	cmp	r3, #4
 80058da:	bf08      	it	eq
 80058dc:	1aad      	subeq	r5, r5, r2
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	6922      	ldr	r2, [r4, #16]
 80058e2:	bf0c      	ite	eq
 80058e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e8:	2500      	movne	r5, #0
 80058ea:	4293      	cmp	r3, r2
 80058ec:	bfc4      	itt	gt
 80058ee:	1a9b      	subgt	r3, r3, r2
 80058f0:	18ed      	addgt	r5, r5, r3
 80058f2:	2600      	movs	r6, #0
 80058f4:	341a      	adds	r4, #26
 80058f6:	42b5      	cmp	r5, r6
 80058f8:	d11a      	bne.n	8005930 <_printf_common+0xc8>
 80058fa:	2000      	movs	r0, #0
 80058fc:	e008      	b.n	8005910 <_printf_common+0xa8>
 80058fe:	2301      	movs	r3, #1
 8005900:	4652      	mov	r2, sl
 8005902:	4649      	mov	r1, r9
 8005904:	4638      	mov	r0, r7
 8005906:	47c0      	blx	r8
 8005908:	3001      	adds	r0, #1
 800590a:	d103      	bne.n	8005914 <_printf_common+0xac>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	3501      	adds	r5, #1
 8005916:	e7c6      	b.n	80058a6 <_printf_common+0x3e>
 8005918:	18e1      	adds	r1, r4, r3
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	2030      	movs	r0, #48	; 0x30
 800591e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005922:	4422      	add	r2, r4
 8005924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800592c:	3302      	adds	r3, #2
 800592e:	e7c7      	b.n	80058c0 <_printf_common+0x58>
 8005930:	2301      	movs	r3, #1
 8005932:	4622      	mov	r2, r4
 8005934:	4649      	mov	r1, r9
 8005936:	4638      	mov	r0, r7
 8005938:	47c0      	blx	r8
 800593a:	3001      	adds	r0, #1
 800593c:	d0e6      	beq.n	800590c <_printf_common+0xa4>
 800593e:	3601      	adds	r6, #1
 8005940:	e7d9      	b.n	80058f6 <_printf_common+0x8e>
	...

08005944 <_printf_i>:
 8005944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	460c      	mov	r4, r1
 800594a:	4691      	mov	r9, r2
 800594c:	7e27      	ldrb	r7, [r4, #24]
 800594e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005950:	2f78      	cmp	r7, #120	; 0x78
 8005952:	4680      	mov	r8, r0
 8005954:	469a      	mov	sl, r3
 8005956:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800595a:	d807      	bhi.n	800596c <_printf_i+0x28>
 800595c:	2f62      	cmp	r7, #98	; 0x62
 800595e:	d80a      	bhi.n	8005976 <_printf_i+0x32>
 8005960:	2f00      	cmp	r7, #0
 8005962:	f000 80d8 	beq.w	8005b16 <_printf_i+0x1d2>
 8005966:	2f58      	cmp	r7, #88	; 0x58
 8005968:	f000 80a3 	beq.w	8005ab2 <_printf_i+0x16e>
 800596c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005974:	e03a      	b.n	80059ec <_printf_i+0xa8>
 8005976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800597a:	2b15      	cmp	r3, #21
 800597c:	d8f6      	bhi.n	800596c <_printf_i+0x28>
 800597e:	a001      	add	r0, pc, #4	; (adr r0, 8005984 <_printf_i+0x40>)
 8005980:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005984:	080059dd 	.word	0x080059dd
 8005988:	080059f1 	.word	0x080059f1
 800598c:	0800596d 	.word	0x0800596d
 8005990:	0800596d 	.word	0x0800596d
 8005994:	0800596d 	.word	0x0800596d
 8005998:	0800596d 	.word	0x0800596d
 800599c:	080059f1 	.word	0x080059f1
 80059a0:	0800596d 	.word	0x0800596d
 80059a4:	0800596d 	.word	0x0800596d
 80059a8:	0800596d 	.word	0x0800596d
 80059ac:	0800596d 	.word	0x0800596d
 80059b0:	08005afd 	.word	0x08005afd
 80059b4:	08005a21 	.word	0x08005a21
 80059b8:	08005adf 	.word	0x08005adf
 80059bc:	0800596d 	.word	0x0800596d
 80059c0:	0800596d 	.word	0x0800596d
 80059c4:	08005b1f 	.word	0x08005b1f
 80059c8:	0800596d 	.word	0x0800596d
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	0800596d 	.word	0x0800596d
 80059d4:	0800596d 	.word	0x0800596d
 80059d8:	08005ae7 	.word	0x08005ae7
 80059dc:	680b      	ldr	r3, [r1, #0]
 80059de:	1d1a      	adds	r2, r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	600a      	str	r2, [r1, #0]
 80059e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0a3      	b.n	8005b38 <_printf_i+0x1f4>
 80059f0:	6825      	ldr	r5, [r4, #0]
 80059f2:	6808      	ldr	r0, [r1, #0]
 80059f4:	062e      	lsls	r6, r5, #24
 80059f6:	f100 0304 	add.w	r3, r0, #4
 80059fa:	d50a      	bpl.n	8005a12 <_printf_i+0xce>
 80059fc:	6805      	ldr	r5, [r0, #0]
 80059fe:	600b      	str	r3, [r1, #0]
 8005a00:	2d00      	cmp	r5, #0
 8005a02:	da03      	bge.n	8005a0c <_printf_i+0xc8>
 8005a04:	232d      	movs	r3, #45	; 0x2d
 8005a06:	426d      	negs	r5, r5
 8005a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a0c:	485e      	ldr	r0, [pc, #376]	; (8005b88 <_printf_i+0x244>)
 8005a0e:	230a      	movs	r3, #10
 8005a10:	e019      	b.n	8005a46 <_printf_i+0x102>
 8005a12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a16:	6805      	ldr	r5, [r0, #0]
 8005a18:	600b      	str	r3, [r1, #0]
 8005a1a:	bf18      	it	ne
 8005a1c:	b22d      	sxthne	r5, r5
 8005a1e:	e7ef      	b.n	8005a00 <_printf_i+0xbc>
 8005a20:	680b      	ldr	r3, [r1, #0]
 8005a22:	6825      	ldr	r5, [r4, #0]
 8005a24:	1d18      	adds	r0, r3, #4
 8005a26:	6008      	str	r0, [r1, #0]
 8005a28:	0628      	lsls	r0, r5, #24
 8005a2a:	d501      	bpl.n	8005a30 <_printf_i+0xec>
 8005a2c:	681d      	ldr	r5, [r3, #0]
 8005a2e:	e002      	b.n	8005a36 <_printf_i+0xf2>
 8005a30:	0669      	lsls	r1, r5, #25
 8005a32:	d5fb      	bpl.n	8005a2c <_printf_i+0xe8>
 8005a34:	881d      	ldrh	r5, [r3, #0]
 8005a36:	4854      	ldr	r0, [pc, #336]	; (8005b88 <_printf_i+0x244>)
 8005a38:	2f6f      	cmp	r7, #111	; 0x6f
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2308      	moveq	r3, #8
 8005a3e:	230a      	movne	r3, #10
 8005a40:	2100      	movs	r1, #0
 8005a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a46:	6866      	ldr	r6, [r4, #4]
 8005a48:	60a6      	str	r6, [r4, #8]
 8005a4a:	2e00      	cmp	r6, #0
 8005a4c:	bfa2      	ittt	ge
 8005a4e:	6821      	ldrge	r1, [r4, #0]
 8005a50:	f021 0104 	bicge.w	r1, r1, #4
 8005a54:	6021      	strge	r1, [r4, #0]
 8005a56:	b90d      	cbnz	r5, 8005a5c <_printf_i+0x118>
 8005a58:	2e00      	cmp	r6, #0
 8005a5a:	d04d      	beq.n	8005af8 <_printf_i+0x1b4>
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a62:	fb03 5711 	mls	r7, r3, r1, r5
 8005a66:	5dc7      	ldrb	r7, [r0, r7]
 8005a68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a6c:	462f      	mov	r7, r5
 8005a6e:	42bb      	cmp	r3, r7
 8005a70:	460d      	mov	r5, r1
 8005a72:	d9f4      	bls.n	8005a5e <_printf_i+0x11a>
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d10b      	bne.n	8005a90 <_printf_i+0x14c>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	07df      	lsls	r7, r3, #31
 8005a7c:	d508      	bpl.n	8005a90 <_printf_i+0x14c>
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	6861      	ldr	r1, [r4, #4]
 8005a82:	4299      	cmp	r1, r3
 8005a84:	bfde      	ittt	le
 8005a86:	2330      	movle	r3, #48	; 0x30
 8005a88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a90:	1b92      	subs	r2, r2, r6
 8005a92:	6122      	str	r2, [r4, #16]
 8005a94:	f8cd a000 	str.w	sl, [sp]
 8005a98:	464b      	mov	r3, r9
 8005a9a:	aa03      	add	r2, sp, #12
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	f7ff fee2 	bl	8005868 <_printf_common>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d14c      	bne.n	8005b42 <_printf_i+0x1fe>
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	b004      	add	sp, #16
 8005aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab2:	4835      	ldr	r0, [pc, #212]	; (8005b88 <_printf_i+0x244>)
 8005ab4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	680e      	ldr	r6, [r1, #0]
 8005abc:	061f      	lsls	r7, r3, #24
 8005abe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ac2:	600e      	str	r6, [r1, #0]
 8005ac4:	d514      	bpl.n	8005af0 <_printf_i+0x1ac>
 8005ac6:	07d9      	lsls	r1, r3, #31
 8005ac8:	bf44      	itt	mi
 8005aca:	f043 0320 	orrmi.w	r3, r3, #32
 8005ace:	6023      	strmi	r3, [r4, #0]
 8005ad0:	b91d      	cbnz	r5, 8005ada <_printf_i+0x196>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	f023 0320 	bic.w	r3, r3, #32
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	2310      	movs	r3, #16
 8005adc:	e7b0      	b.n	8005a40 <_printf_i+0xfc>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	f043 0320 	orr.w	r3, r3, #32
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	2378      	movs	r3, #120	; 0x78
 8005ae8:	4828      	ldr	r0, [pc, #160]	; (8005b8c <_printf_i+0x248>)
 8005aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005aee:	e7e3      	b.n	8005ab8 <_printf_i+0x174>
 8005af0:	065e      	lsls	r6, r3, #25
 8005af2:	bf48      	it	mi
 8005af4:	b2ad      	uxthmi	r5, r5
 8005af6:	e7e6      	b.n	8005ac6 <_printf_i+0x182>
 8005af8:	4616      	mov	r6, r2
 8005afa:	e7bb      	b.n	8005a74 <_printf_i+0x130>
 8005afc:	680b      	ldr	r3, [r1, #0]
 8005afe:	6826      	ldr	r6, [r4, #0]
 8005b00:	6960      	ldr	r0, [r4, #20]
 8005b02:	1d1d      	adds	r5, r3, #4
 8005b04:	600d      	str	r5, [r1, #0]
 8005b06:	0635      	lsls	r5, r6, #24
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	d501      	bpl.n	8005b10 <_printf_i+0x1cc>
 8005b0c:	6018      	str	r0, [r3, #0]
 8005b0e:	e002      	b.n	8005b16 <_printf_i+0x1d2>
 8005b10:	0671      	lsls	r1, r6, #25
 8005b12:	d5fb      	bpl.n	8005b0c <_printf_i+0x1c8>
 8005b14:	8018      	strh	r0, [r3, #0]
 8005b16:	2300      	movs	r3, #0
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	4616      	mov	r6, r2
 8005b1c:	e7ba      	b.n	8005a94 <_printf_i+0x150>
 8005b1e:	680b      	ldr	r3, [r1, #0]
 8005b20:	1d1a      	adds	r2, r3, #4
 8005b22:	600a      	str	r2, [r1, #0]
 8005b24:	681e      	ldr	r6, [r3, #0]
 8005b26:	6862      	ldr	r2, [r4, #4]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7fa fb50 	bl	80001d0 <memchr>
 8005b30:	b108      	cbz	r0, 8005b36 <_printf_i+0x1f2>
 8005b32:	1b80      	subs	r0, r0, r6
 8005b34:	6060      	str	r0, [r4, #4]
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	6123      	str	r3, [r4, #16]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b40:	e7a8      	b.n	8005a94 <_printf_i+0x150>
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	4632      	mov	r2, r6
 8005b46:	4649      	mov	r1, r9
 8005b48:	4640      	mov	r0, r8
 8005b4a:	47d0      	blx	sl
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d0ab      	beq.n	8005aa8 <_printf_i+0x164>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	079b      	lsls	r3, r3, #30
 8005b54:	d413      	bmi.n	8005b7e <_printf_i+0x23a>
 8005b56:	68e0      	ldr	r0, [r4, #12]
 8005b58:	9b03      	ldr	r3, [sp, #12]
 8005b5a:	4298      	cmp	r0, r3
 8005b5c:	bfb8      	it	lt
 8005b5e:	4618      	movlt	r0, r3
 8005b60:	e7a4      	b.n	8005aac <_printf_i+0x168>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4632      	mov	r2, r6
 8005b66:	4649      	mov	r1, r9
 8005b68:	4640      	mov	r0, r8
 8005b6a:	47d0      	blx	sl
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d09b      	beq.n	8005aa8 <_printf_i+0x164>
 8005b70:	3501      	adds	r5, #1
 8005b72:	68e3      	ldr	r3, [r4, #12]
 8005b74:	9903      	ldr	r1, [sp, #12]
 8005b76:	1a5b      	subs	r3, r3, r1
 8005b78:	42ab      	cmp	r3, r5
 8005b7a:	dcf2      	bgt.n	8005b62 <_printf_i+0x21e>
 8005b7c:	e7eb      	b.n	8005b56 <_printf_i+0x212>
 8005b7e:	2500      	movs	r5, #0
 8005b80:	f104 0619 	add.w	r6, r4, #25
 8005b84:	e7f5      	b.n	8005b72 <_printf_i+0x22e>
 8005b86:	bf00      	nop
 8005b88:	08005f09 	.word	0x08005f09
 8005b8c:	08005f1a 	.word	0x08005f1a

08005b90 <_sbrk_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4d06      	ldr	r5, [pc, #24]	; (8005bac <_sbrk_r+0x1c>)
 8005b94:	2300      	movs	r3, #0
 8005b96:	4604      	mov	r4, r0
 8005b98:	4608      	mov	r0, r1
 8005b9a:	602b      	str	r3, [r5, #0]
 8005b9c:	f7fb fbce 	bl	800133c <_sbrk>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	d102      	bne.n	8005baa <_sbrk_r+0x1a>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	b103      	cbz	r3, 8005baa <_sbrk_r+0x1a>
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	20000270 	.word	0x20000270

08005bb0 <__sread>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	f000 f8a0 	bl	8005cfc <_read_r>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	bfab      	itete	ge
 8005bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bc4:	181b      	addge	r3, r3, r0
 8005bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bca:	bfac      	ite	ge
 8005bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bce:	81a3      	strhlt	r3, [r4, #12]
 8005bd0:	bd10      	pop	{r4, pc}

08005bd2 <__swrite>:
 8005bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	461f      	mov	r7, r3
 8005bd8:	898b      	ldrh	r3, [r1, #12]
 8005bda:	05db      	lsls	r3, r3, #23
 8005bdc:	4605      	mov	r5, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	4616      	mov	r6, r2
 8005be2:	d505      	bpl.n	8005bf0 <__swrite+0x1e>
 8005be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be8:	2302      	movs	r3, #2
 8005bea:	2200      	movs	r2, #0
 8005bec:	f000 f868 	bl	8005cc0 <_lseek_r>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	463b      	mov	r3, r7
 8005c00:	4628      	mov	r0, r5
 8005c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c06:	f000 b817 	b.w	8005c38 <_write_r>

08005c0a <__sseek>:
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c12:	f000 f855 	bl	8005cc0 <_lseek_r>
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	bf15      	itete	ne
 8005c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c26:	81a3      	strheq	r3, [r4, #12]
 8005c28:	bf18      	it	ne
 8005c2a:	81a3      	strhne	r3, [r4, #12]
 8005c2c:	bd10      	pop	{r4, pc}

08005c2e <__sclose>:
 8005c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c32:	f000 b813 	b.w	8005c5c <_close_r>
	...

08005c38 <_write_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d07      	ldr	r5, [pc, #28]	; (8005c58 <_write_r+0x20>)
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	4608      	mov	r0, r1
 8005c40:	4611      	mov	r1, r2
 8005c42:	2200      	movs	r2, #0
 8005c44:	602a      	str	r2, [r5, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f7fb fb28 	bl	800129c <_write>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_write_r+0x1e>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_write_r+0x1e>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	20000270 	.word	0x20000270

08005c5c <_close_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4d06      	ldr	r5, [pc, #24]	; (8005c78 <_close_r+0x1c>)
 8005c60:	2300      	movs	r3, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	602b      	str	r3, [r5, #0]
 8005c68:	f7fb fb34 	bl	80012d4 <_close>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_close_r+0x1a>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_close_r+0x1a>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	20000270 	.word	0x20000270

08005c7c <_fstat_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4d07      	ldr	r5, [pc, #28]	; (8005c9c <_fstat_r+0x20>)
 8005c80:	2300      	movs	r3, #0
 8005c82:	4604      	mov	r4, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	602b      	str	r3, [r5, #0]
 8005c8a:	f7fb fb2f 	bl	80012ec <_fstat>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	d102      	bne.n	8005c98 <_fstat_r+0x1c>
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	b103      	cbz	r3, 8005c98 <_fstat_r+0x1c>
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000270 	.word	0x20000270

08005ca0 <_isatty_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4d06      	ldr	r5, [pc, #24]	; (8005cbc <_isatty_r+0x1c>)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	602b      	str	r3, [r5, #0]
 8005cac:	f7fb fb2e 	bl	800130c <_isatty>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <_isatty_r+0x1a>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	b103      	cbz	r3, 8005cba <_isatty_r+0x1a>
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	20000270 	.word	0x20000270

08005cc0 <_lseek_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4d07      	ldr	r5, [pc, #28]	; (8005ce0 <_lseek_r+0x20>)
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	4608      	mov	r0, r1
 8005cc8:	4611      	mov	r1, r2
 8005cca:	2200      	movs	r2, #0
 8005ccc:	602a      	str	r2, [r5, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f7fb fb27 	bl	8001322 <_lseek>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d102      	bne.n	8005cde <_lseek_r+0x1e>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	b103      	cbz	r3, 8005cde <_lseek_r+0x1e>
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	20000270 	.word	0x20000270

08005ce4 <__malloc_lock>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	; (8005cec <__malloc_lock+0x8>)
 8005ce6:	f7ff bb55 	b.w	8005394 <__retarget_lock_acquire_recursive>
 8005cea:	bf00      	nop
 8005cec:	20000268 	.word	0x20000268

08005cf0 <__malloc_unlock>:
 8005cf0:	4801      	ldr	r0, [pc, #4]	; (8005cf8 <__malloc_unlock+0x8>)
 8005cf2:	f7ff bb50 	b.w	8005396 <__retarget_lock_release_recursive>
 8005cf6:	bf00      	nop
 8005cf8:	20000268 	.word	0x20000268

08005cfc <_read_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4d07      	ldr	r5, [pc, #28]	; (8005d1c <_read_r+0x20>)
 8005d00:	4604      	mov	r4, r0
 8005d02:	4608      	mov	r0, r1
 8005d04:	4611      	mov	r1, r2
 8005d06:	2200      	movs	r2, #0
 8005d08:	602a      	str	r2, [r5, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f7fb faa9 	bl	8001262 <_read>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_read_r+0x1e>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_read_r+0x1e>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	20000270 	.word	0x20000270

08005d20 <trunc>:
 8005d20:	ec51 0b10 	vmov	r0, r1, d0
 8005d24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d28:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8005d2c:	2b13      	cmp	r3, #19
 8005d2e:	b5d0      	push	{r4, r6, r7, lr}
 8005d30:	460c      	mov	r4, r1
 8005d32:	dc10      	bgt.n	8005d56 <trunc+0x36>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bfa5      	ittet	ge
 8005d38:	4a11      	ldrge	r2, [pc, #68]	; (8005d80 <trunc+0x60>)
 8005d3a:	fa42 f303 	asrge.w	r3, r2, r3
 8005d3e:	2100      	movlt	r1, #0
 8005d40:	2100      	movge	r1, #0
 8005d42:	bfb9      	ittee	lt
 8005d44:	2000      	movlt	r0, #0
 8005d46:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8005d4a:	2000      	movge	r0, #0
 8005d4c:	ea24 0103 	bicge.w	r1, r4, r3
 8005d50:	ec41 0b10 	vmov	d0, r0, r1
 8005d54:	bdd0      	pop	{r4, r6, r7, pc}
 8005d56:	2b33      	cmp	r3, #51	; 0x33
 8005d58:	dd08      	ble.n	8005d6c <trunc+0x4c>
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5e:	d1f7      	bne.n	8005d50 <trunc+0x30>
 8005d60:	ee10 2a10 	vmov	r2, s0
 8005d64:	460b      	mov	r3, r1
 8005d66:	f7fa fa89 	bl	800027c <__adddf3>
 8005d6a:	e7f1      	b.n	8005d50 <trunc+0x30>
 8005d6c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	fa23 f202 	lsr.w	r2, r3, r2
 8005d78:	ea20 0602 	bic.w	r6, r0, r2
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	e7e7      	b.n	8005d50 <trunc+0x30>
 8005d80:	000fffff 	.word	0x000fffff

08005d84 <_init>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	bf00      	nop
 8005d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8a:	bc08      	pop	{r3}
 8005d8c:	469e      	mov	lr, r3
 8005d8e:	4770      	bx	lr

08005d90 <_fini>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	bf00      	nop
 8005d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d96:	bc08      	pop	{r3}
 8005d98:	469e      	mov	lr, r3
 8005d9a:	4770      	bx	lr
