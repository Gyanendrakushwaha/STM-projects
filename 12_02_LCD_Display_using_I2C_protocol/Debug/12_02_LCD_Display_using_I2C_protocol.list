
12_02_LCD_Display_using_I2C_protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002cbc  08002cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d30  08002d30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002d30  08002d30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d30  08002d30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08002da8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002da8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ddc  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a19  00000000  00000000  00028e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002afd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ad1  00000000  00000000  0002b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a18b  00000000  00000000  0003d119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066333  00000000  00000000  000472a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ad5d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c04  00000000  00000000  000ad62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ca4 	.word	0x08002ca4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002ca4 	.word	0x08002ca4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E             /////here made change intial it was 0x4E    changed =0x3F
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af02      	add	r7, sp, #8
 800024a:	0002      	movs	r2, r0
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	701a      	strb	r2, [r3, #0]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	011a      	lsls	r2, r3, #4
 8000256:	200f      	movs	r0, #15
 8000258:	183b      	adds	r3, r7, r0
 800025a:	701a      	strb	r2, [r3, #0]
  const uint8_t command_4_7 = (0xF0 & command);
 800025c:	240e      	movs	r4, #14
 800025e:	193b      	adds	r3, r7, r4
 8000260:	1dfa      	adds	r2, r7, #7
 8000262:	7812      	ldrb	r2, [r2, #0]
 8000264:	210f      	movs	r1, #15
 8000266:	438a      	bics	r2, r1
 8000268:	701a      	strb	r2, [r3, #0]
  uint8_t i2cData[4] =
 800026a:	193b      	adds	r3, r7, r4
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	220c      	movs	r2, #12
 8000270:	4313      	orrs	r3, r2
 8000272:	b2da      	uxtb	r2, r3
 8000274:	2108      	movs	r1, #8
 8000276:	187b      	adds	r3, r7, r1
 8000278:	701a      	strb	r2, [r3, #0]
 800027a:	193b      	adds	r3, r7, r4
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2208      	movs	r2, #8
 8000280:	4313      	orrs	r3, r2
 8000282:	b2da      	uxtb	r2, r3
 8000284:	187b      	adds	r3, r7, r1
 8000286:	705a      	strb	r2, [r3, #1]
 8000288:	183b      	adds	r3, r7, r0
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	220c      	movs	r2, #12
 800028e:	4313      	orrs	r3, r2
 8000290:	b2da      	uxtb	r2, r3
 8000292:	187b      	adds	r3, r7, r1
 8000294:	709a      	strb	r2, [r3, #2]
 8000296:	183b      	adds	r3, r7, r0
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2208      	movs	r2, #8
 800029c:	4313      	orrs	r3, r2
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	000c      	movs	r4, r1
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	70da      	strb	r2, [r3, #3]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80002a6:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <lcd16x2_i2c_sendCommand+0x80>)
 80002a8:	6818      	ldr	r0, [r3, #0]
 80002aa:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <lcd16x2_i2c_sendCommand+0x84>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b299      	uxth	r1, r3
 80002b0:	193a      	adds	r2, r7, r4
 80002b2:	23c8      	movs	r3, #200	; 0xc8
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	2304      	movs	r3, #4
 80002b8:	f000 fe90 	bl	8000fdc <HAL_I2C_Master_Transmit>
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b005      	add	sp, #20
 80002c2:	bd90      	pop	{r4, r7, pc}
 80002c4:	2000008c 	.word	0x2000008c
 80002c8:	20000090 	.word	0x20000090

080002cc <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b087      	sub	sp, #28
 80002d0:	af02      	add	r7, sp, #8
 80002d2:	0002      	movs	r2, r0
 80002d4:	1dfb      	adds	r3, r7, #7
 80002d6:	701a      	strb	r2, [r3, #0]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	011a      	lsls	r2, r3, #4
 80002de:	200f      	movs	r0, #15
 80002e0:	183b      	adds	r3, r7, r0
 80002e2:	701a      	strb	r2, [r3, #0]
  const uint8_t data_4_7 = (0xF0 & data);
 80002e4:	240e      	movs	r4, #14
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	1dfa      	adds	r2, r7, #7
 80002ea:	7812      	ldrb	r2, [r2, #0]
 80002ec:	210f      	movs	r1, #15
 80002ee:	438a      	bics	r2, r1
 80002f0:	701a      	strb	r2, [r3, #0]
  uint8_t i2cData[4] =
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	220d      	movs	r2, #13
 80002f8:	4313      	orrs	r3, r2
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	2108      	movs	r1, #8
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	701a      	strb	r2, [r3, #0]
 8000302:	193b      	adds	r3, r7, r4
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2209      	movs	r2, #9
 8000308:	4313      	orrs	r3, r2
 800030a:	b2da      	uxtb	r2, r3
 800030c:	187b      	adds	r3, r7, r1
 800030e:	705a      	strb	r2, [r3, #1]
 8000310:	183b      	adds	r3, r7, r0
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	220d      	movs	r2, #13
 8000316:	4313      	orrs	r3, r2
 8000318:	b2da      	uxtb	r2, r3
 800031a:	187b      	adds	r3, r7, r1
 800031c:	709a      	strb	r2, [r3, #2]
 800031e:	183b      	adds	r3, r7, r0
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2209      	movs	r2, #9
 8000324:	4313      	orrs	r3, r2
 8000326:	b2da      	uxtb	r2, r3
 8000328:	000c      	movs	r4, r1
 800032a:	187b      	adds	r3, r7, r1
 800032c:	70da      	strb	r2, [r3, #3]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <lcd16x2_i2c_sendData+0x80>)
 8000330:	6818      	ldr	r0, [r3, #0]
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <lcd16x2_i2c_sendData+0x84>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	b299      	uxth	r1, r3
 8000338:	193a      	adds	r2, r7, r4
 800033a:	23c8      	movs	r3, #200	; 0xc8
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2304      	movs	r3, #4
 8000340:	f000 fe4c 	bl	8000fdc <HAL_I2C_Master_Transmit>
}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b005      	add	sp, #20
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	2000008c 	.word	0x2000008c
 8000350:	20000090 	.word	0x20000090

08000354 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 800035c:	2032      	movs	r0, #50	; 0x32
 800035e:	f000 fb41 	bl	80009e4 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000362:	4b2f      	ldr	r3, [pc, #188]	; (8000420 <lcd16x2_i2c_init+0xcc>)
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	601a      	str	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000368:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <lcd16x2_i2c_init+0xcc>)
 800036a:	6818      	ldr	r0, [r3, #0]
 800036c:	23fa      	movs	r3, #250	; 0xfa
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	2205      	movs	r2, #5
 8000372:	214e      	movs	r1, #78	; 0x4e
 8000374:	f000 ff3a 	bl	80011ec <HAL_I2C_IsDeviceReady>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d00f      	beq.n	800039c <lcd16x2_i2c_init+0x48>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <lcd16x2_i2c_init+0xcc>)
 800037e:	6818      	ldr	r0, [r3, #0]
 8000380:	23fa      	movs	r3, #250	; 0xfa
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	2205      	movs	r2, #5
 8000386:	217e      	movs	r1, #126	; 0x7e
 8000388:	f000 ff30 	bl	80011ec <HAL_I2C_IsDeviceReady>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <lcd16x2_i2c_init+0x40>
    {
      return false;
 8000390:	2300      	movs	r3, #0
 8000392:	e040      	b.n	8000416 <lcd16x2_i2c_init+0xc2>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <lcd16x2_i2c_init+0xd0>)
 8000396:	227e      	movs	r2, #126	; 0x7e
 8000398:	701a      	strb	r2, [r3, #0]
 800039a:	e002      	b.n	80003a2 <lcd16x2_i2c_init+0x4e>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <lcd16x2_i2c_init+0xd0>)
 800039e:	224e      	movs	r2, #78	; 0x4e
 80003a0:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 80003a2:	202d      	movs	r0, #45	; 0x2d
 80003a4:	f000 fb1e 	bl	80009e4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80003a8:	2030      	movs	r0, #48	; 0x30
 80003aa:	f7ff ff4b 	bl	8000244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80003ae:	2005      	movs	r0, #5
 80003b0:	f000 fb18 	bl	80009e4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80003b4:	2030      	movs	r0, #48	; 0x30
 80003b6:	f7ff ff45 	bl	8000244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f000 fb12 	bl	80009e4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80003c0:	2030      	movs	r0, #48	; 0x30
 80003c2:	f7ff ff3f 	bl	8000244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80003c6:	2008      	movs	r0, #8
 80003c8:	f000 fb0c 	bl	80009e4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80003cc:	2020      	movs	r0, #32
 80003ce:	f7ff ff39 	bl	8000244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80003d2:	2008      	movs	r0, #8
 80003d4:	f000 fb06 	bl	80009e4 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80003d8:	2028      	movs	r0, #40	; 0x28
 80003da:	f7ff ff33 	bl	8000244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80003de:	2001      	movs	r0, #1
 80003e0:	f000 fb00 	bl	80009e4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80003e4:	2008      	movs	r0, #8
 80003e6:	f7ff ff2d 	bl	8000244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80003ea:	2001      	movs	r0, #1
 80003ec:	f000 fafa 	bl	80009e4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f7ff ff27 	bl	8000244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80003f6:	2003      	movs	r0, #3
 80003f8:	f000 faf4 	bl	80009e4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80003fc:	2006      	movs	r0, #6
 80003fe:	f7ff ff21 	bl	8000244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000402:	2001      	movs	r0, #1
 8000404:	f000 faee 	bl	80009e4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000408:	200c      	movs	r0, #12
 800040a:	f7ff ff1b 	bl	8000244 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800040e:	2003      	movs	r0, #3
 8000410:	f000 fae8 	bl	80009e4 <HAL_Delay>

  return true;
 8000414:	2301      	movs	r3, #1
}
 8000416:	0018      	movs	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	2000008c 	.word	0x2000008c
 8000424:	20000090 	.word	0x20000090

08000428 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000428:	b40f      	push	{r0, r1, r2, r3}
 800042a:	b5b0      	push	{r4, r5, r7, lr}
 800042c:	b088      	sub	sp, #32
 800042e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000430:	2334      	movs	r3, #52	; 0x34
 8000432:	18fb      	adds	r3, r7, r3
 8000434:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800043a:	2308      	movs	r3, #8
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	0018      	movs	r0, r3
 8000440:	f002 f81e 	bl	8002480 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000444:	231f      	movs	r3, #31
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
 800044c:	e00d      	b.n	800046a <lcd16x2_i2c_printf+0x42>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 800044e:	241f      	movs	r4, #31
 8000450:	193b      	adds	r3, r7, r4
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2208      	movs	r2, #8
 8000456:	18ba      	adds	r2, r7, r2
 8000458:	5cd3      	ldrb	r3, [r2, r3]
 800045a:	0018      	movs	r0, r3
 800045c:	f7ff ff36 	bl	80002cc <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000460:	193b      	adds	r3, r7, r4
 8000462:	781a      	ldrb	r2, [r3, #0]
 8000464:	193b      	adds	r3, r7, r4
 8000466:	3201      	adds	r2, #1
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	251f      	movs	r5, #31
 800046c:	197b      	adds	r3, r7, r5
 800046e:	781c      	ldrb	r4, [r3, #0]
 8000470:	2308      	movs	r3, #8
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff fe47 	bl	8000108 <strlen>
 800047a:	0003      	movs	r3, r0
 800047c:	429c      	cmp	r4, r3
 800047e:	d203      	bcs.n	8000488 <lcd16x2_i2c_printf+0x60>
 8000480:	197b      	adds	r3, r7, r5
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b0f      	cmp	r3, #15
 8000486:	d9e2      	bls.n	800044e <lcd16x2_i2c_printf+0x26>
  }
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b008      	add	sp, #32
 800048e:	bcb0      	pop	{r4, r5, r7}
 8000490:	bc08      	pop	{r3}
 8000492:	b004      	add	sp, #16
 8000494:	4718      	bx	r3
	...

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049c:	f000 fa3e 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a0:	f000 f81c 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a4:	f000 f8bc 	bl	8000620 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a8:	f000 f87a 	bl	80005a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(lcd16x2_i2c_init(&hi2c1))
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <main+0x38>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f7ff ff50 	bl	8000354 <lcd16x2_i2c_init>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d006      	beq.n	80004c6 <main+0x2e>
    {
  	  HAL_GPIO_WritePin(MYLED1_GPIO_Port, MYLED1_Pin, GPIO_PIN_SET);
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <main+0x3c>)
 80004be:	2201      	movs	r2, #1
 80004c0:	0019      	movs	r1, r3
 80004c2:	f000 fcd7 	bl	8000e74 <HAL_GPIO_WritePin>
    }

    lcd16x2_i2c_printf("Hello World!");
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <main+0x40>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f7ff ffad 	bl	8000428 <lcd16x2_i2c_printf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <main+0x36>
 80004d0:	200000a0 	.word	0x200000a0
 80004d4:	48000800 	.word	0x48000800
 80004d8:	08002cbc 	.word	0x08002cbc

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b097      	sub	sp, #92	; 0x5c
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	2428      	movs	r4, #40	; 0x28
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	0018      	movs	r0, r3
 80004e8:	2330      	movs	r3, #48	; 0x30
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f001 ffa9 	bl	8002444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	2318      	movs	r3, #24
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	0018      	movs	r0, r3
 80004f8:	2310      	movs	r3, #16
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f001 ffa1 	bl	8002444 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	0018      	movs	r0, r3
 8000506:	2314      	movs	r3, #20
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f001 ff9a 	bl	8002444 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000510:	0021      	movs	r1, r4
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2202      	movs	r2, #2
 8000516:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2201      	movs	r2, #1
 800051c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2210      	movs	r2, #16
 8000522:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2202      	movs	r2, #2
 8000528:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	22a0      	movs	r2, #160	; 0xa0
 8000534:	0392      	lsls	r2, r2, #14
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2200      	movs	r2, #0
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	187b      	adds	r3, r7, r1
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fa39 	bl	80019b8 <HAL_RCC_OscConfig>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800054a:	f000 f8f1 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	2118      	movs	r1, #24
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2207      	movs	r2, #7
 8000554:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2101      	movs	r1, #1
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fd3d 	bl	8001fec <HAL_RCC_ClockConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000576:	f000 f8db 	bl	8000730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2220      	movs	r2, #32
 800057e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fe53 	bl	8002234 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000592:	f000 f8cd 	bl	8000730 <Error_Handler>
  }
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b017      	add	sp, #92	; 0x5c
 800059c:	bd90      	pop	{r4, r7, pc}
	...

080005a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MX_I2C1_Init+0x74>)
 80005a6:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <MX_I2C1_Init+0x78>)
 80005a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <MX_I2C1_Init+0x74>)
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <MX_I2C1_Init+0x7c>)
 80005ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_I2C1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_I2C1_Init+0x74>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_I2C1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_I2C1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_I2C1_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_I2C1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_I2C1_Init+0x74>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fc67 	bl	8000eb0 <HAL_I2C_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005e6:	f000 f8a3 	bl	8000730 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_I2C1_Init+0x74>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 f94a 	bl	8001888 <HAL_I2CEx_ConfigAnalogFilter>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005f8:	f000 f89a 	bl	8000730 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <MX_I2C1_Init+0x74>)
 80005fe:	2100      	movs	r1, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f001 f98d 	bl	8001920 <HAL_I2CEx_ConfigDigitalFilter>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800060a:	f000 f891 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000a0 	.word	0x200000a0
 8000618:	40005400 	.word	0x40005400
 800061c:	2000090e 	.word	0x2000090e

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	240c      	movs	r4, #12
 8000628:	193b      	adds	r3, r7, r4
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f001 ff07 	bl	8002444 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b3c      	ldr	r3, [pc, #240]	; (8000728 <MX_GPIO_Init+0x108>)
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	4b3b      	ldr	r3, [pc, #236]	; (8000728 <MX_GPIO_Init+0x108>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0289      	lsls	r1, r1, #10
 8000640:	430a      	orrs	r2, r1
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	4b38      	ldr	r3, [pc, #224]	; (8000728 <MX_GPIO_Init+0x108>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b35      	ldr	r3, [pc, #212]	; (8000728 <MX_GPIO_Init+0x108>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	4b34      	ldr	r3, [pc, #208]	; (8000728 <MX_GPIO_Init+0x108>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0309      	lsls	r1, r1, #12
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <MX_GPIO_Init+0x108>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	031b      	lsls	r3, r3, #12
 8000668:	4013      	ands	r3, r2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <MX_GPIO_Init+0x108>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <MX_GPIO_Init+0x108>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	02c9      	lsls	r1, r1, #11
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <MX_GPIO_Init+0x108>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	02db      	lsls	r3, r3, #11
 8000684:	4013      	ands	r3, r2
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|MYLED1_Pin, GPIO_PIN_RESET);
 800068a:	23c0      	movs	r3, #192	; 0xc0
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4827      	ldr	r0, [pc, #156]	; (800072c <MX_GPIO_Init+0x10c>)
 8000690:	2200      	movs	r2, #0
 8000692:	0019      	movs	r1, r3
 8000694:	f000 fbee 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCL_Pin|SDA_Pin, GPIO_PIN_RESET);
 8000698:	23c0      	movs	r3, #192	; 0xc0
 800069a:	0099      	lsls	r1, r3, #2
 800069c:	2390      	movs	r3, #144	; 0x90
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	2200      	movs	r2, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fbe6 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2290      	movs	r2, #144	; 0x90
 80006b2:	0352      	lsls	r2, r2, #13
 80006b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	193a      	adds	r2, r7, r4
 80006be:	2390      	movs	r3, #144	; 0x90
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fa65 	bl	8000b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin MYLED1_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|MYLED1_Pin;
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	22c0      	movs	r2, #192	; 0xc0
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	000c      	movs	r4, r1
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2201      	movs	r2, #1
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <MX_GPIO_Init+0x10c>)
 80006ec:	0019      	movs	r1, r3
 80006ee:	0010      	movs	r0, r2
 80006f0:	f000 fa50 	bl	8000b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCL_Pin SDA_Pin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80006f4:	0021      	movs	r1, r4
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	22c0      	movs	r2, #192	; 0xc0
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	187a      	adds	r2, r7, r1
 8000712:	2390      	movs	r3, #144	; 0x90
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fa3b 	bl	8000b94 <HAL_GPIO_Init>

}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b009      	add	sp, #36	; 0x24
 8000724:	bd90      	pop	{r4, r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000
 800072c:	48000800 	.word	0x48000800

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	e7fe      	b.n	8000738 <Error_Handler+0x8>
	...

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_MspInit+0x44>)
 8000744:	699a      	ldr	r2, [r3, #24]
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_MspInit+0x44>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	619a      	str	r2, [r3, #24]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_MspInit+0x44>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_MspInit+0x44>)
 800075c:	69da      	ldr	r2, [r3, #28]
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_MspInit+0x44>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0549      	lsls	r1, r1, #21
 8000764:	430a      	orrs	r2, r1
 8000766:	61da      	str	r2, [r3, #28]
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_MspInit+0x44>)
 800076a:	69da      	ldr	r2, [r3, #28]
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	055b      	lsls	r3, r3, #21
 8000770:	4013      	ands	r3, r2
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b08b      	sub	sp, #44	; 0x2c
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	2414      	movs	r4, #20
 800078e:	193b      	adds	r3, r7, r4
 8000790:	0018      	movs	r0, r3
 8000792:	2314      	movs	r3, #20
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f001 fe54 	bl	8002444 <memset>
  if(hi2c->Instance==I2C1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <HAL_I2C_MspInit+0x90>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d131      	bne.n	800080a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007a8:	695a      	ldr	r2, [r3, #20]
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	02c9      	lsls	r1, r1, #11
 80007b0:	430a      	orrs	r2, r1
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	02db      	lsls	r3, r3, #11
 80007bc:	4013      	ands	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007c2:	0021      	movs	r1, r4
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	22c0      	movs	r2, #192	; 0xc0
 80007c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2212      	movs	r2, #18
 80007ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2203      	movs	r2, #3
 80007da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2201      	movs	r2, #1
 80007e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <HAL_I2C_MspInit+0x98>)
 80007e6:	0019      	movs	r1, r3
 80007e8:	0010      	movs	r0, r2
 80007ea:	f000 f9d3 	bl	8000b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007f0:	69da      	ldr	r2, [r3, #28]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	0389      	lsls	r1, r1, #14
 80007f8:	430a      	orrs	r2, r1
 80007fa:	61da      	str	r2, [r3, #28]
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	039b      	lsls	r3, r3, #14
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b00b      	add	sp, #44	; 0x2c
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40005400 	.word	0x40005400
 8000818:	40021000 	.word	0x40021000
 800081c:	48000400 	.word	0x48000400

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f8b2 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000858:	4a14      	ldr	r2, [pc, #80]	; (80008ac <_sbrk+0x5c>)
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <_sbrk+0x60>)
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d102      	bne.n	8000872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <_sbrk+0x64>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <_sbrk+0x68>)
 8000870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	18d3      	adds	r3, r2, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	429a      	cmp	r2, r3
 800087e:	d207      	bcs.n	8000890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000880:	f001 fdb6 	bl	80023f0 <__errno>
 8000884:	0003      	movs	r3, r0
 8000886:	220c      	movs	r2, #12
 8000888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800088a:	2301      	movs	r3, #1
 800088c:	425b      	negs	r3, r3
 800088e:	e009      	b.n	80008a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	18d2      	adds	r2, r2, r3
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <_sbrk+0x64>)
 80008a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b006      	add	sp, #24
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20002000 	.word	0x20002000
 80008b0:	00000400 	.word	0x00000400
 80008b4:	20000094 	.word	0x20000094
 80008b8:	20000108 	.word	0x20000108

080008bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ca:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80008cc:	f7ff fff6 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	; (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008f6:	f001 fd81 	bl	80023fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fa:	f7ff fdcd 	bl	8000498 <main>

080008fe <LoopForever>:

LoopForever:
    b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   r0, =_estack
 8000900:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800090c:	08002d38 	.word	0x08002d38
  ldr r2, =_sbss
 8000910:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000914:	20000108 	.word	0x20000108

08000918 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_COMP_IRQHandler>
	...

0800091c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_Init+0x24>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_Init+0x24>)
 8000926:	2110      	movs	r1, #16
 8000928:	430a      	orrs	r2, r1
 800092a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800092c:	2000      	movs	r0, #0
 800092e:	f000 f809 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000932:	f7ff ff03 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_InitTick+0x5c>)
 800094e:	681c      	ldr	r4, [r3, #0]
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_InitTick+0x60>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0019      	movs	r1, r3
 8000956:	23fa      	movs	r3, #250	; 0xfa
 8000958:	0098      	lsls	r0, r3, #2
 800095a:	f7ff fbe7 	bl	800012c <__udivsi3>
 800095e:	0003      	movs	r3, r0
 8000960:	0019      	movs	r1, r3
 8000962:	0020      	movs	r0, r4
 8000964:	f7ff fbe2 	bl	800012c <__udivsi3>
 8000968:	0003      	movs	r3, r0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f905 	bl	8000b7a <HAL_SYSTICK_Config>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e00f      	b.n	8000998 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b03      	cmp	r3, #3
 800097c:	d80b      	bhi.n	8000996 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f8e2 	bl	8000b50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_InitTick+0x64>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b003      	add	sp, #12
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x1c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	001a      	movs	r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x20>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	18d2      	adds	r2, r2, r3
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <HAL_IncTick+0x20>)
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000008 	.word	0x20000008
 80009cc:	200000f4 	.word	0x200000f4

080009d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <HAL_GetTick+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200000f4 	.word	0x200000f4

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff fff0 	bl	80009d0 <HAL_GetTick>
 80009f0:	0003      	movs	r3, r0
 80009f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	d005      	beq.n	8000a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Delay+0x44>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	001a      	movs	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	189b      	adds	r3, r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	f7ff ffe0 	bl	80009d0 <HAL_GetTick>
 8000a10:	0002      	movs	r2, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8f7      	bhi.n	8000a0c <HAL_Delay+0x28>
  {
  }
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b004      	add	sp, #16
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000008 	.word	0x20000008

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	0002      	movs	r2, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a40:	d828      	bhi.n	8000a94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a42:	4a2f      	ldr	r2, [pc, #188]	; (8000b00 <__NVIC_SetPriority+0xd4>)
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	33c0      	adds	r3, #192	; 0xc0
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	589b      	ldr	r3, [r3, r2]
 8000a52:	1dfa      	adds	r2, r7, #7
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	0011      	movs	r1, r2
 8000a58:	2203      	movs	r2, #3
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	00d2      	lsls	r2, r2, #3
 8000a5e:	21ff      	movs	r1, #255	; 0xff
 8000a60:	4091      	lsls	r1, r2
 8000a62:	000a      	movs	r2, r1
 8000a64:	43d2      	mvns	r2, r2
 8000a66:	401a      	ands	r2, r3
 8000a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	019b      	lsls	r3, r3, #6
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	401a      	ands	r2, r3
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0018      	movs	r0, r3
 8000a78:	2303      	movs	r3, #3
 8000a7a:	4003      	ands	r3, r0
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a80:	481f      	ldr	r0, [pc, #124]	; (8000b00 <__NVIC_SetPriority+0xd4>)
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	33c0      	adds	r3, #192	; 0xc0
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a92:	e031      	b.n	8000af8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <__NVIC_SetPriority+0xd8>)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	400b      	ands	r3, r1
 8000aa0:	3b08      	subs	r3, #8
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	3306      	adds	r3, #6
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	18d3      	adds	r3, r2, r3
 8000aaa:	3304      	adds	r3, #4
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	; 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	; 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <__NVIC_SetPriority+0xd8>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	001c      	movs	r4, r3
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	4023      	ands	r3, r4
 8000ae8:	3b08      	subs	r3, #8
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	430a      	orrs	r2, r1
 8000aee:	3306      	adds	r3, #6
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	18c3      	adds	r3, r0, r3
 8000af4:	3304      	adds	r3, #4
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b003      	add	sp, #12
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	045b      	lsls	r3, r3, #17
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d301      	bcc.n	8000b20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e010      	b.n	8000b42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <SysTick_Config+0x44>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	3a01      	subs	r2, #1
 8000b26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b28:	2301      	movs	r3, #1
 8000b2a:	425b      	negs	r3, r3
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff ff7c 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x44>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	1c02      	adds	r2, r0, #0
 8000b60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff ff5d 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b004      	add	sp, #16
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ffbf 	bl	8000b08 <SysTick_Config>
 8000b8a:	0003      	movs	r3, r0
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e14f      	b.n	8000e44 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	4091      	lsls	r1, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <HAL_GPIO_Init+0x28>
 8000bba:	e140      	b.n	8000e3e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d005      	beq.n	8000bd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d130      	bne.n	8000c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	409a      	lsls	r2, r3
 8000be2:	0013      	movs	r3, r2
 8000be4:	43da      	mvns	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	43da      	mvns	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	2201      	movs	r2, #1
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d017      	beq.n	8000c72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	43da      	mvns	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2203      	movs	r2, #3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d123      	bne.n	8000cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	08da      	lsrs	r2, r3, #3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	0092      	lsls	r2, r2, #2
 8000c88:	58d3      	ldr	r3, [r2, r3]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2207      	movs	r2, #7
 8000c90:	4013      	ands	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	220f      	movs	r2, #15
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	2107      	movs	r1, #7
 8000caa:	400b      	ands	r3, r1
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	6939      	ldr	r1, [r7, #16]
 8000cc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	23c0      	movs	r3, #192	; 0xc0
 8000d00:	029b      	lsls	r3, r3, #10
 8000d02:	4013      	ands	r3, r2
 8000d04:	d100      	bne.n	8000d08 <HAL_GPIO_Init+0x174>
 8000d06:	e09a      	b.n	8000e3e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d08:	4b54      	ldr	r3, [pc, #336]	; (8000e5c <HAL_GPIO_Init+0x2c8>)
 8000d0a:	699a      	ldr	r2, [r3, #24]
 8000d0c:	4b53      	ldr	r3, [pc, #332]	; (8000e5c <HAL_GPIO_Init+0x2c8>)
 8000d0e:	2101      	movs	r1, #1
 8000d10:	430a      	orrs	r2, r1
 8000d12:	619a      	str	r2, [r3, #24]
 8000d14:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <HAL_GPIO_Init+0x2c8>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d20:	4a4f      	ldr	r2, [pc, #316]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	589b      	ldr	r3, [r3, r2]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2203      	movs	r2, #3
 8000d32:	4013      	ands	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	220f      	movs	r2, #15
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	43da      	mvns	r2, r3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	2390      	movs	r3, #144	; 0x90
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <HAL_GPIO_Init+0x2d0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_Init+0x1de>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a43      	ldr	r2, [pc, #268]	; (8000e68 <HAL_GPIO_Init+0x2d4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x1da>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a42      	ldr	r2, [pc, #264]	; (8000e6c <HAL_GPIO_Init+0x2d8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_Init+0x1d6>
 8000d66:	2303      	movs	r3, #3
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x1e4>
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	e004      	b.n	8000d78 <HAL_GPIO_Init+0x1e4>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e002      	b.n	8000d78 <HAL_GPIO_Init+0x1e4>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <HAL_GPIO_Init+0x1e4>
 8000d76:	2300      	movs	r3, #0
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	2103      	movs	r1, #3
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	4093      	lsls	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d88:	4935      	ldr	r1, [pc, #212]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d96:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	035b      	lsls	r3, r3, #13
 8000dae:	4013      	ands	r3, r2
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43da      	mvns	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	039b      	lsls	r3, r3, #14
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	029b      	lsls	r3, r3, #10
 8000e02:	4013      	ands	r3, r2
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	025b      	lsls	r3, r3, #9
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	40da      	lsrs	r2, r3
 8000e4c:	1e13      	subs	r3, r2, #0
 8000e4e:	d000      	beq.n	8000e52 <HAL_GPIO_Init+0x2be>
 8000e50:	e6a8      	b.n	8000ba4 <HAL_GPIO_Init+0x10>
  } 
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b006      	add	sp, #24
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010000 	.word	0x40010000
 8000e64:	48000400 	.word	0x48000400
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	48000c00 	.word	0x48000c00
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	0008      	movs	r0, r1
 8000e7e:	0011      	movs	r1, r2
 8000e80:	1cbb      	adds	r3, r7, #2
 8000e82:	1c02      	adds	r2, r0, #0
 8000e84:	801a      	strh	r2, [r3, #0]
 8000e86:	1c7b      	adds	r3, r7, #1
 8000e88:	1c0a      	adds	r2, r1, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e8c:	1c7b      	adds	r3, r7, #1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e94:	1cbb      	adds	r3, r7, #2
 8000e96:	881a      	ldrh	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e9c:	e003      	b.n	8000ea6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e9e:	1cbb      	adds	r3, r7, #2
 8000ea0:	881a      	ldrh	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e082      	b.n	8000fc8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2241      	movs	r2, #65	; 0x41
 8000ec6:	5c9b      	ldrb	r3, [r3, r2]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d107      	bne.n	8000ede <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2240      	movs	r2, #64	; 0x40
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fc53 	bl	8000784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2241      	movs	r2, #65	; 0x41
 8000ee2:	2124      	movs	r1, #36	; 0x24
 8000ee4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	438a      	bics	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4934      	ldr	r1, [pc, #208]	; (8000fd0 <HAL_I2C_Init+0x120>)
 8000f00:	400a      	ands	r2, r1
 8000f02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4931      	ldr	r1, [pc, #196]	; (8000fd4 <HAL_I2C_Init+0x124>)
 8000f10:	400a      	ands	r2, r1
 8000f12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d108      	bne.n	8000f2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0209      	lsls	r1, r1, #8
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	e007      	b.n	8000f3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2184      	movs	r1, #132	; 0x84
 8000f38:	0209      	lsls	r1, r1, #8
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d104      	bne.n	8000f50 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	491f      	ldr	r1, [pc, #124]	; (8000fd8 <HAL_I2C_Init+0x128>)
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	491a      	ldr	r1, [pc, #104]	; (8000fd4 <HAL_I2C_Init+0x124>)
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69d9      	ldr	r1, [r3, #28]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a1a      	ldr	r2, [r3, #32]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2241      	movs	r2, #65	; 0x41
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2242      	movs	r2, #66	; 0x42
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	f0ffffff 	.word	0xf0ffffff
 8000fd4:	ffff7fff 	.word	0xffff7fff
 8000fd8:	02008000 	.word	0x02008000

08000fdc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	0008      	movs	r0, r1
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	0019      	movs	r1, r3
 8000fea:	230a      	movs	r3, #10
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	801a      	strh	r2, [r3, #0]
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	1c0a      	adds	r2, r1, #0
 8000ff8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2241      	movs	r2, #65	; 0x41
 8000ffe:	5c9b      	ldrb	r3, [r3, r2]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b20      	cmp	r3, #32
 8001004:	d000      	beq.n	8001008 <HAL_I2C_Master_Transmit+0x2c>
 8001006:	e0e7      	b.n	80011d8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2240      	movs	r2, #64	; 0x40
 800100c:	5c9b      	ldrb	r3, [r3, r2]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_I2C_Master_Transmit+0x3a>
 8001012:	2302      	movs	r3, #2
 8001014:	e0e1      	b.n	80011da <HAL_I2C_Master_Transmit+0x1fe>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2240      	movs	r2, #64	; 0x40
 800101a:	2101      	movs	r1, #1
 800101c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800101e:	f7ff fcd7 	bl	80009d0 <HAL_GetTick>
 8001022:	0003      	movs	r3, r0
 8001024:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	0219      	lsls	r1, r3, #8
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2319      	movs	r3, #25
 8001032:	2201      	movs	r2, #1
 8001034:	f000 fa16 	bl	8001464 <I2C_WaitOnFlagUntilTimeout>
 8001038:	1e03      	subs	r3, r0, #0
 800103a:	d001      	beq.n	8001040 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0cc      	b.n	80011da <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2241      	movs	r2, #65	; 0x41
 8001044:	2121      	movs	r1, #33	; 0x21
 8001046:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2242      	movs	r2, #66	; 0x42
 800104c:	2110      	movs	r1, #16
 800104e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2200      	movs	r2, #0
 8001054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2208      	movs	r2, #8
 8001060:	18ba      	adds	r2, r7, r2
 8001062:	8812      	ldrh	r2, [r2, #0]
 8001064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001070:	b29b      	uxth	r3, r3
 8001072:	2bff      	cmp	r3, #255	; 0xff
 8001074:	d911      	bls.n	800109a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	22ff      	movs	r2, #255	; 0xff
 800107a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001080:	b2da      	uxtb	r2, r3
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	045c      	lsls	r4, r3, #17
 8001086:	230a      	movs	r3, #10
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	8819      	ldrh	r1, [r3, #0]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	4b55      	ldr	r3, [pc, #340]	; (80011e4 <HAL_I2C_Master_Transmit+0x208>)
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	0023      	movs	r3, r4
 8001094:	f000 fbbe 	bl	8001814 <I2C_TransferConfig>
 8001098:	e075      	b.n	8001186 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800109e:	b29a      	uxth	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	049c      	lsls	r4, r3, #18
 80010ae:	230a      	movs	r3, #10
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	8819      	ldrh	r1, [r3, #0]
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	4b4b      	ldr	r3, [pc, #300]	; (80011e4 <HAL_I2C_Master_Transmit+0x208>)
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	0023      	movs	r3, r4
 80010bc:	f000 fbaa 	bl	8001814 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80010c0:	e061      	b.n	8001186 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	0018      	movs	r0, r3
 80010ca:	f000 fa19 	bl	8001500 <I2C_WaitOnTXISFlagUntilTimeout>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e081      	b.n	80011da <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fe:	3b01      	subs	r3, #1
 8001100:	b29a      	uxth	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800110a:	b29b      	uxth	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d03a      	beq.n	8001186 <HAL_I2C_Master_Transmit+0x1aa>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001114:	2b00      	cmp	r3, #0
 8001116:	d136      	bne.n	8001186 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	0013      	movs	r3, r2
 8001122:	2200      	movs	r2, #0
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	f000 f99d 	bl	8001464 <I2C_WaitOnFlagUntilTimeout>
 800112a:	1e03      	subs	r3, r0, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e053      	b.n	80011da <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001136:	b29b      	uxth	r3, r3
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	d911      	bls.n	8001160 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	22ff      	movs	r2, #255	; 0xff
 8001140:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001146:	b2da      	uxtb	r2, r3
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	045c      	lsls	r4, r3, #17
 800114c:	230a      	movs	r3, #10
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	8819      	ldrh	r1, [r3, #0]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	0023      	movs	r3, r4
 800115a:	f000 fb5b 	bl	8001814 <I2C_TransferConfig>
 800115e:	e012      	b.n	8001186 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001164:	b29a      	uxth	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116e:	b2da      	uxtb	r2, r3
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	049c      	lsls	r4, r3, #18
 8001174:	230a      	movs	r3, #10
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	8819      	ldrh	r1, [r3, #0]
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	2300      	movs	r3, #0
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	0023      	movs	r3, r4
 8001182:	f000 fb47 	bl	8001814 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118a:	b29b      	uxth	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d198      	bne.n	80010c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	0018      	movs	r0, r3
 8001198:	f000 f9f8 	bl	800158c <I2C_WaitOnSTOPFlagUntilTimeout>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e01a      	b.n	80011da <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2220      	movs	r2, #32
 80011aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <HAL_I2C_Master_Transmit+0x20c>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2241      	movs	r2, #65	; 0x41
 80011c0:	2120      	movs	r1, #32
 80011c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2242      	movs	r2, #66	; 0x42
 80011c8:	2100      	movs	r1, #0
 80011ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2240      	movs	r2, #64	; 0x40
 80011d0:	2100      	movs	r1, #0
 80011d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	e000      	b.n	80011da <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80011d8:	2302      	movs	r3, #2
  }
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b007      	add	sp, #28
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	80002000 	.word	0x80002000
 80011e8:	fe00e800 	.word	0xfe00e800

080011ec <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	230a      	movs	r3, #10
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	1c0a      	adds	r2, r1, #0
 80011fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2241      	movs	r2, #65	; 0x41
 8001208:	5c9b      	ldrb	r3, [r3, r2]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b20      	cmp	r3, #32
 800120e:	d000      	beq.n	8001212 <HAL_I2C_IsDeviceReady+0x26>
 8001210:	e0fd      	b.n	800140e <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	401a      	ands	r2, r3
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	429a      	cmp	r2, r3
 8001224:	d101      	bne.n	800122a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001226:	2302      	movs	r3, #2
 8001228:	e0f2      	b.n	8001410 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2240      	movs	r2, #64	; 0x40
 800122e:	5c9b      	ldrb	r3, [r3, r2]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_I2C_IsDeviceReady+0x4c>
 8001234:	2302      	movs	r3, #2
 8001236:	e0eb      	b.n	8001410 <HAL_I2C_IsDeviceReady+0x224>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2240      	movs	r2, #64	; 0x40
 800123c:	2101      	movs	r1, #1
 800123e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2241      	movs	r2, #65	; 0x41
 8001244:	2124      	movs	r1, #36	; 0x24
 8001246:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <HAL_I2C_IsDeviceReady+0x7a>
 8001256:	230a      	movs	r3, #10
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	059b      	lsls	r3, r3, #22
 800125e:	0d9b      	lsrs	r3, r3, #22
 8001260:	4a6d      	ldr	r2, [pc, #436]	; (8001418 <HAL_I2C_IsDeviceReady+0x22c>)
 8001262:	431a      	orrs	r2, r3
 8001264:	e006      	b.n	8001274 <HAL_I2C_IsDeviceReady+0x88>
 8001266:	230a      	movs	r3, #10
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	059b      	lsls	r3, r3, #22
 800126e:	0d9b      	lsrs	r3, r3, #22
 8001270:	4a6a      	ldr	r2, [pc, #424]	; (800141c <HAL_I2C_IsDeviceReady+0x230>)
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800127a:	f7ff fba9 	bl	80009d0 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2220      	movs	r2, #32
 800128a:	4013      	ands	r3, r2
 800128c:	3b20      	subs	r3, #32
 800128e:	425a      	negs	r2, r3
 8001290:	4153      	adcs	r3, r2
 8001292:	b2da      	uxtb	r2, r3
 8001294:	231f      	movs	r3, #31
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	2210      	movs	r2, #16
 80012a2:	4013      	ands	r3, r2
 80012a4:	3b10      	subs	r3, #16
 80012a6:	425a      	negs	r2, r3
 80012a8:	4153      	adcs	r3, r2
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	231e      	movs	r3, #30
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80012b2:	e035      	b.n	8001320 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	d01a      	beq.n	80012f0 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012ba:	f7ff fb89 	bl	80009d0 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d302      	bcc.n	80012d0 <HAL_I2C_IsDeviceReady+0xe4>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10f      	bne.n	80012f0 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2241      	movs	r2, #65	; 0x41
 80012d4:	2120      	movs	r1, #32
 80012d6:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	2220      	movs	r2, #32
 80012de:	431a      	orrs	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2240      	movs	r2, #64	; 0x40
 80012e8:	2100      	movs	r1, #0
 80012ea:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e08f      	b.n	8001410 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2220      	movs	r2, #32
 80012f8:	4013      	ands	r3, r2
 80012fa:	3b20      	subs	r3, #32
 80012fc:	425a      	negs	r2, r3
 80012fe:	4153      	adcs	r3, r2
 8001300:	b2da      	uxtb	r2, r3
 8001302:	231f      	movs	r3, #31
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2210      	movs	r2, #16
 8001310:	4013      	ands	r3, r2
 8001312:	3b10      	subs	r3, #16
 8001314:	425a      	negs	r2, r3
 8001316:	4153      	adcs	r3, r2
 8001318:	b2da      	uxtb	r2, r3
 800131a:	231e      	movs	r3, #30
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001320:	231f      	movs	r3, #31
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d104      	bne.n	8001334 <HAL_I2C_IsDeviceReady+0x148>
 800132a:	231e      	movs	r3, #30
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0bf      	beq.n	80012b4 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2210      	movs	r2, #16
 800133c:	4013      	ands	r3, r2
 800133e:	2b10      	cmp	r3, #16
 8001340:	d01a      	beq.n	8001378 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	0013      	movs	r3, r2
 800134c:	2200      	movs	r2, #0
 800134e:	2120      	movs	r1, #32
 8001350:	f000 f888 	bl	8001464 <I2C_WaitOnFlagUntilTimeout>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d001      	beq.n	800135c <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e059      	b.n	8001410 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2220      	movs	r2, #32
 8001362:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2241      	movs	r2, #65	; 0x41
 8001368:	2120      	movs	r1, #32
 800136a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2240      	movs	r2, #64	; 0x40
 8001370:	2100      	movs	r1, #0
 8001372:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e04b      	b.n	8001410 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	0013      	movs	r3, r2
 8001382:	2200      	movs	r2, #0
 8001384:	2120      	movs	r1, #32
 8001386:	f000 f86d 	bl	8001464 <I2C_WaitOnFlagUntilTimeout>
 800138a:	1e03      	subs	r3, r0, #0
 800138c:	d001      	beq.n	8001392 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e03e      	b.n	8001410 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2210      	movs	r2, #16
 8001398:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2220      	movs	r2, #32
 80013a0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d119      	bne.n	80013de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	01c9      	lsls	r1, r1, #7
 80013b8:	430a      	orrs	r2, r1
 80013ba:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	0013      	movs	r3, r2
 80013c6:	2200      	movs	r2, #0
 80013c8:	2120      	movs	r1, #32
 80013ca:	f000 f84b 	bl	8001464 <I2C_WaitOnFlagUntilTimeout>
 80013ce:	1e03      	subs	r3, r0, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e01c      	b.n	8001410 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2220      	movs	r2, #32
 80013dc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d900      	bls.n	80013ee <HAL_I2C_IsDeviceReady+0x202>
 80013ec:	e72f      	b.n	800124e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2241      	movs	r2, #65	; 0x41
 80013f2:	2120      	movs	r1, #32
 80013f4:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	2220      	movs	r2, #32
 80013fc:	431a      	orrs	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2240      	movs	r2, #64	; 0x40
 8001406:	2100      	movs	r1, #0
 8001408:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 800140e:	2302      	movs	r3, #2
  }
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b008      	add	sp, #32
 8001416:	bd80      	pop	{r7, pc}
 8001418:	02002000 	.word	0x02002000
 800141c:	02002800 	.word	0x02002800

08001420 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	2b02      	cmp	r3, #2
 8001434:	d103      	bne.n	800143e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	2b01      	cmp	r3, #1
 800144a:	d007      	beq.n	800145c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699a      	ldr	r2, [r3, #24]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2101      	movs	r1, #1
 8001458:	430a      	orrs	r2, r1
 800145a:	619a      	str	r2, [r3, #24]
  }
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}

08001464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001474:	e030      	b.n	80014d8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	d02d      	beq.n	80014d8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800147c:	f7ff faa8 	bl	80009d0 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d302      	bcc.n	8001492 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d122      	bne.n	80014d8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	4013      	ands	r3, r2
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	425a      	negs	r2, r3
 80014a2:	4153      	adcs	r3, r2
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	001a      	movs	r2, r3
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d113      	bne.n	80014d8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b4:	2220      	movs	r2, #32
 80014b6:	431a      	orrs	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2241      	movs	r2, #65	; 0x41
 80014c0:	2120      	movs	r1, #32
 80014c2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2242      	movs	r2, #66	; 0x42
 80014c8:	2100      	movs	r1, #0
 80014ca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2240      	movs	r2, #64	; 0x40
 80014d0:	2100      	movs	r1, #0
 80014d2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e00f      	b.n	80014f8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	4013      	ands	r3, r2
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	425a      	negs	r2, r3
 80014e8:	4153      	adcs	r3, r2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	001a      	movs	r2, r3
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d0bf      	beq.n	8001476 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}

08001500 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800150c:	e032      	b.n	8001574 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	0018      	movs	r0, r3
 8001516:	f000 f87d 	bl	8001614 <I2C_IsErrorOccurred>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e030      	b.n	8001584 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	d025      	beq.n	8001574 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001528:	f7ff fa52 	bl	80009d0 <HAL_GetTick>
 800152c:	0002      	movs	r2, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	429a      	cmp	r2, r3
 8001536:	d302      	bcc.n	800153e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d11a      	bne.n	8001574 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2202      	movs	r2, #2
 8001546:	4013      	ands	r3, r2
 8001548:	2b02      	cmp	r3, #2
 800154a:	d013      	beq.n	8001574 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	2220      	movs	r2, #32
 8001552:	431a      	orrs	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2241      	movs	r2, #65	; 0x41
 800155c:	2120      	movs	r1, #32
 800155e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2242      	movs	r2, #66	; 0x42
 8001564:	2100      	movs	r1, #0
 8001566:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e007      	b.n	8001584 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	2b02      	cmp	r3, #2
 8001580:	d1c5      	bne.n	800150e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b004      	add	sp, #16
 800158a:	bd80      	pop	{r7, pc}

0800158c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001598:	e02f      	b.n	80015fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 f837 	bl	8001614 <I2C_IsErrorOccurred>
 80015a6:	1e03      	subs	r3, r0, #0
 80015a8:	d001      	beq.n	80015ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e02d      	b.n	800160a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ae:	f7ff fa0f 	bl	80009d0 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d302      	bcc.n	80015c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d11a      	bne.n	80015fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2220      	movs	r2, #32
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d013      	beq.n	80015fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	2220      	movs	r2, #32
 80015d8:	431a      	orrs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2241      	movs	r2, #65	; 0x41
 80015e2:	2120      	movs	r1, #32
 80015e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2242      	movs	r2, #66	; 0x42
 80015ea:	2100      	movs	r1, #0
 80015ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	2100      	movs	r1, #0
 80015f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e007      	b.n	800160a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2220      	movs	r2, #32
 8001602:	4013      	ands	r3, r2
 8001604:	2b20      	cmp	r3, #32
 8001606:	d1c8      	bne.n	800159a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b004      	add	sp, #16
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b08b      	sub	sp, #44	; 0x2c
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001620:	2327      	movs	r3, #39	; 0x27
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2210      	movs	r2, #16
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <I2C_IsErrorOccurred+0x2e>
 8001640:	e082      	b.n	8001748 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2210      	movs	r2, #16
 8001648:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800164a:	e060      	b.n	800170e <I2C_IsErrorOccurred+0xfa>
 800164c:	2427      	movs	r4, #39	; 0x27
 800164e:	193b      	adds	r3, r7, r4
 8001650:	193a      	adds	r2, r7, r4
 8001652:	7812      	ldrb	r2, [r2, #0]
 8001654:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3301      	adds	r3, #1
 800165a:	d058      	beq.n	800170e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800165c:	f7ff f9b8 	bl	80009d0 <HAL_GetTick>
 8001660:	0002      	movs	r2, r0
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	429a      	cmp	r2, r3
 800166a:	d306      	bcc.n	800167a <I2C_IsErrorOccurred+0x66>
 800166c:	193b      	adds	r3, r7, r4
 800166e:	193a      	adds	r2, r7, r4
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d149      	bne.n	800170e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	01db      	lsls	r3, r3, #7
 8001684:	4013      	ands	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001688:	2013      	movs	r0, #19
 800168a:	183b      	adds	r3, r7, r0
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	2142      	movs	r1, #66	; 0x42
 8001690:	5c52      	ldrb	r2, [r2, r1]
 8001692:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	401a      	ands	r2, r3
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d126      	bne.n	80016f6 <I2C_IsErrorOccurred+0xe2>
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	01db      	lsls	r3, r3, #7
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d021      	beq.n	80016f6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80016b2:	183b      	adds	r3, r7, r0
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b20      	cmp	r3, #32
 80016b8:	d01d      	beq.n	80016f6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	01c9      	lsls	r1, r1, #7
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016cc:	f7ff f980 	bl	80009d0 <HAL_GetTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d4:	e00f      	b.n	80016f6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016d6:	f7ff f97b 	bl	80009d0 <HAL_GetTick>
 80016da:	0002      	movs	r2, r0
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b19      	cmp	r3, #25
 80016e2:	d908      	bls.n	80016f6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	2220      	movs	r2, #32
 80016e8:	4313      	orrs	r3, r2
 80016ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80016ec:	2327      	movs	r3, #39	; 0x27
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]

              break;
 80016f4:	e00b      	b.n	800170e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2220      	movs	r2, #32
 80016fe:	4013      	ands	r3, r2
 8001700:	2127      	movs	r1, #39	; 0x27
 8001702:	187a      	adds	r2, r7, r1
 8001704:	1879      	adds	r1, r7, r1
 8001706:	7809      	ldrb	r1, [r1, #0]
 8001708:	7011      	strb	r1, [r2, #0]
 800170a:	2b20      	cmp	r3, #32
 800170c:	d1e3      	bne.n	80016d6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2220      	movs	r2, #32
 8001716:	4013      	ands	r3, r2
 8001718:	2b20      	cmp	r3, #32
 800171a:	d004      	beq.n	8001726 <I2C_IsErrorOccurred+0x112>
 800171c:	2327      	movs	r3, #39	; 0x27
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d092      	beq.n	800164c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001726:	2327      	movs	r3, #39	; 0x27
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2220      	movs	r2, #32
 8001736:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	2204      	movs	r2, #4
 800173c:	4313      	orrs	r3, r2
 800173e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001740:	2327      	movs	r3, #39	; 0x27
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4013      	ands	r3, r2
 8001758:	d00c      	beq.n	8001774 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	2201      	movs	r2, #1
 800175e:	4313      	orrs	r3, r2
 8001760:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	0052      	lsls	r2, r2, #1
 800176a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800176c:	2327      	movs	r3, #39	; 0x27
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4013      	ands	r3, r2
 800177c:	d00c      	beq.n	8001798 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	2208      	movs	r2, #8
 8001782:	4313      	orrs	r3, r2
 8001784:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	00d2      	lsls	r2, r2, #3
 800178e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001790:	2327      	movs	r3, #39	; 0x27
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4013      	ands	r3, r2
 80017a0:	d00c      	beq.n	80017bc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	2202      	movs	r2, #2
 80017a6:	4313      	orrs	r3, r2
 80017a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017b4:	2327      	movs	r3, #39	; 0x27
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80017bc:	2327      	movs	r3, #39	; 0x27
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01d      	beq.n	8001802 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff fe29 	bl	8001420 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	490d      	ldr	r1, [pc, #52]	; (8001810 <I2C_IsErrorOccurred+0x1fc>)
 80017da:	400a      	ands	r2, r1
 80017dc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2241      	movs	r2, #65	; 0x41
 80017ee:	2120      	movs	r1, #32
 80017f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2242      	movs	r2, #66	; 0x42
 80017f6:	2100      	movs	r1, #0
 80017f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2240      	movs	r2, #64	; 0x40
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001802:	2327      	movs	r3, #39	; 0x27
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	781b      	ldrb	r3, [r3, #0]
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b00b      	add	sp, #44	; 0x2c
 800180e:	bd90      	pop	{r4, r7, pc}
 8001810:	fe00e800 	.word	0xfe00e800

08001814 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	0008      	movs	r0, r1
 800181e:	0011      	movs	r1, r2
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	240a      	movs	r4, #10
 8001824:	193b      	adds	r3, r7, r4
 8001826:	1c02      	adds	r2, r0, #0
 8001828:	801a      	strh	r2, [r3, #0]
 800182a:	2009      	movs	r0, #9
 800182c:	183b      	adds	r3, r7, r0
 800182e:	1c0a      	adds	r2, r1, #0
 8001830:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001832:	193b      	adds	r3, r7, r4
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	059b      	lsls	r3, r3, #22
 8001838:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800183a:	183b      	adds	r3, r7, r0
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	0419      	lsls	r1, r3, #16
 8001840:	23ff      	movs	r3, #255	; 0xff
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001846:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	4313      	orrs	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800185e:	0d51      	lsrs	r1, r2, #21
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	00d2      	lsls	r2, r2, #3
 8001864:	400a      	ands	r2, r1
 8001866:	4907      	ldr	r1, [pc, #28]	; (8001884 <I2C_TransferConfig+0x70>)
 8001868:	430a      	orrs	r2, r1
 800186a:	43d2      	mvns	r2, r2
 800186c:	401a      	ands	r2, r3
 800186e:	0011      	movs	r1, r2
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b007      	add	sp, #28
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	03ff63ff 	.word	0x03ff63ff

08001888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2241      	movs	r2, #65	; 0x41
 8001896:	5c9b      	ldrb	r3, [r3, r2]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b20      	cmp	r3, #32
 800189c:	d138      	bne.n	8001910 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2240      	movs	r2, #64	; 0x40
 80018a2:	5c9b      	ldrb	r3, [r3, r2]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e032      	b.n	8001912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	2101      	movs	r1, #1
 80018b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2241      	movs	r2, #65	; 0x41
 80018b8:	2124      	movs	r1, #36	; 0x24
 80018ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	438a      	bics	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018d8:	400a      	ands	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6819      	ldr	r1, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2101      	movs	r1, #1
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2241      	movs	r2, #65	; 0x41
 8001900:	2120      	movs	r1, #32
 8001902:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	2100      	movs	r1, #0
 800190a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e000      	b.n	8001912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001910:	2302      	movs	r3, #2
  }
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	ffffefff 	.word	0xffffefff

08001920 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2241      	movs	r2, #65	; 0x41
 800192e:	5c9b      	ldrb	r3, [r3, r2]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b20      	cmp	r3, #32
 8001934:	d139      	bne.n	80019aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2240      	movs	r2, #64	; 0x40
 800193a:	5c9b      	ldrb	r3, [r3, r2]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001940:	2302      	movs	r3, #2
 8001942:	e033      	b.n	80019ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	2101      	movs	r1, #1
 800194a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2241      	movs	r2, #65	; 0x41
 8001950:	2124      	movs	r1, #36	; 0x24
 8001952:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2101      	movs	r1, #1
 8001960:	438a      	bics	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2241      	movs	r2, #65	; 0x41
 800199a:	2120      	movs	r1, #32
 800199c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	2100      	movs	r1, #0
 80019a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019aa:	2302      	movs	r3, #2
  }
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	fffff0ff 	.word	0xfffff0ff

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e301      	b.n	8001fce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCC_OscConfig+0x1e>
 80019d4:	e08d      	b.n	8001af2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019d6:	4bc3      	ldr	r3, [pc, #780]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	220c      	movs	r2, #12
 80019dc:	4013      	ands	r3, r2
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d00e      	beq.n	8001a00 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e2:	4bc0      	ldr	r3, [pc, #768]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	220c      	movs	r2, #12
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x64>
 80019ee:	4bbd      	ldr	r3, [pc, #756]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	401a      	ands	r2, r3
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10d      	bne.n	8001a1c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	4bb8      	ldr	r3, [pc, #736]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	029b      	lsls	r3, r3, #10
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x56>
 8001a0c:	e070      	b.n	8001af0 <HAL_RCC_OscConfig+0x138>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d000      	beq.n	8001a18 <HAL_RCC_OscConfig+0x60>
 8001a16:	e06b      	b.n	8001af0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e2d8      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x7c>
 8001a24:	4baf      	ldr	r3, [pc, #700]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4bae      	ldr	r3, [pc, #696]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0249      	lsls	r1, r1, #9
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e02f      	b.n	8001a94 <HAL_RCC_OscConfig+0xdc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x9e>
 8001a3c:	4ba9      	ldr	r3, [pc, #676]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4ba8      	ldr	r3, [pc, #672]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	49a9      	ldr	r1, [pc, #676]	; (8001ce8 <HAL_RCC_OscConfig+0x330>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4ba6      	ldr	r3, [pc, #664]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4ba5      	ldr	r3, [pc, #660]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	49a7      	ldr	r1, [pc, #668]	; (8001cec <HAL_RCC_OscConfig+0x334>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e01e      	b.n	8001a94 <HAL_RCC_OscConfig+0xdc>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d10e      	bne.n	8001a7c <HAL_RCC_OscConfig+0xc4>
 8001a5e:	4ba1      	ldr	r3, [pc, #644]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4ba0      	ldr	r3, [pc, #640]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	02c9      	lsls	r1, r1, #11
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4b9d      	ldr	r3, [pc, #628]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b9c      	ldr	r3, [pc, #624]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	0249      	lsls	r1, r1, #9
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xdc>
 8001a7c:	4b99      	ldr	r3, [pc, #612]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b98      	ldr	r3, [pc, #608]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	4999      	ldr	r1, [pc, #612]	; (8001ce8 <HAL_RCC_OscConfig+0x330>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	4b96      	ldr	r3, [pc, #600]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b95      	ldr	r3, [pc, #596]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	4997      	ldr	r1, [pc, #604]	; (8001cec <HAL_RCC_OscConfig+0x334>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d014      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7fe ff98 	bl	80009d0 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa6:	f7fe ff93 	bl	80009d0 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b64      	cmp	r3, #100	; 0x64
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e28a      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab8:	4b8a      	ldr	r3, [pc, #552]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0xee>
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7fe ff83 	bl	80009d0 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7fe ff7e 	bl	80009d0 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e275      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	029b      	lsls	r3, r3, #10
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x118>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2202      	movs	r2, #2
 8001af8:	4013      	ands	r3, r2
 8001afa:	d100      	bne.n	8001afe <HAL_RCC_OscConfig+0x146>
 8001afc:	e069      	b.n	8001bd2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001afe:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	220c      	movs	r2, #12
 8001b04:	4013      	ands	r3, r2
 8001b06:	d00b      	beq.n	8001b20 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b08:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d11c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x196>
 8001b14:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	025b      	lsls	r3, r3, #9
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d116      	bne.n	8001b4e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b20:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2202      	movs	r2, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x17e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e24b      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b6b      	ldr	r3, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	22f8      	movs	r2, #248	; 0xf8
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	00da      	lsls	r2, r3, #3
 8001b46:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4c:	e041      	b.n	8001bd2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d024      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b62      	ldr	r3, [pc, #392]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7fe ff35 	bl	80009d0 <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7fe ff30 	bl	80009d0 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e227      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0f1      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b56      	ldr	r3, [pc, #344]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	22f8      	movs	r2, #248	; 0xf8
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00da      	lsls	r2, r3, #3
 8001b98:	4b52      	ldr	r3, [pc, #328]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e018      	b.n	8001bd2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	438a      	bics	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe ff10 	bl	80009d0 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7fe ff0b 	bl	80009d0 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e202      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d1f1      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d036      	beq.n	8001c4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d019      	beq.n	8001c18 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be4:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be8:	4b3e      	ldr	r3, [pc, #248]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	430a      	orrs	r2, r1
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7fe feee 	bl	80009d0 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7fe fee9 	bl	80009d0 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1e0      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d0f1      	beq.n	8001bfa <HAL_RCC_OscConfig+0x242>
 8001c16:	e018      	b.n	8001c4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c18:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1c:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	438a      	bics	r2, r1
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7fe fed4 	bl	80009d0 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7fe fecf 	bl	80009d0 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e1c6      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	d1f1      	bne.n	8001c2e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4013      	ands	r3, r2
 8001c52:	d100      	bne.n	8001c56 <HAL_RCC_OscConfig+0x29e>
 8001c54:	e0b4      	b.n	8001dc0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c56:	201f      	movs	r0, #31
 8001c58:	183b      	adds	r3, r7, r0
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	055b      	lsls	r3, r3, #21
 8001c66:	4013      	ands	r3, r2
 8001c68:	d110      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0549      	lsls	r1, r1, #21
 8001c74:	430a      	orrs	r2, r1
 8001c76:	61da      	str	r2, [r3, #28]
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	055b      	lsls	r3, r3, #21
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	d11a      	bne.n	8001cce <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	0049      	lsls	r1, r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca6:	f7fe fe93 	bl	80009d0 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7fe fe8e 	bl	80009d0 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e185      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x33c>
 8001cd6:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	6a1a      	ldr	r2, [r3, #32]
 8001cda:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	621a      	str	r2, [r3, #32]
 8001ce2:	e035      	b.n	8001d50 <HAL_RCC_OscConfig+0x398>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	fffeffff 	.word	0xfffeffff
 8001cec:	fffbffff 	.word	0xfffbffff
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x35e>
 8001cfc:	4bb6      	ldr	r3, [pc, #728]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001cfe:	6a1a      	ldr	r2, [r3, #32]
 8001d00:	4bb5      	ldr	r3, [pc, #724]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	438a      	bics	r2, r1
 8001d06:	621a      	str	r2, [r3, #32]
 8001d08:	4bb3      	ldr	r3, [pc, #716]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	6a1a      	ldr	r2, [r3, #32]
 8001d0c:	4bb2      	ldr	r3, [pc, #712]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	2104      	movs	r1, #4
 8001d10:	438a      	bics	r2, r1
 8001d12:	621a      	str	r2, [r3, #32]
 8001d14:	e01c      	b.n	8001d50 <HAL_RCC_OscConfig+0x398>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x380>
 8001d1e:	4bae      	ldr	r3, [pc, #696]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	4bad      	ldr	r3, [pc, #692]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d24:	2104      	movs	r1, #4
 8001d26:	430a      	orrs	r2, r1
 8001d28:	621a      	str	r2, [r3, #32]
 8001d2a:	4bab      	ldr	r3, [pc, #684]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d2c:	6a1a      	ldr	r2, [r3, #32]
 8001d2e:	4baa      	ldr	r3, [pc, #680]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d30:	2101      	movs	r1, #1
 8001d32:	430a      	orrs	r2, r1
 8001d34:	621a      	str	r2, [r3, #32]
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0x398>
 8001d38:	4ba7      	ldr	r3, [pc, #668]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d3a:	6a1a      	ldr	r2, [r3, #32]
 8001d3c:	4ba6      	ldr	r3, [pc, #664]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	438a      	bics	r2, r1
 8001d42:	621a      	str	r2, [r3, #32]
 8001d44:	4ba4      	ldr	r3, [pc, #656]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d46:	6a1a      	ldr	r2, [r3, #32]
 8001d48:	4ba3      	ldr	r3, [pc, #652]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d014      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7fe fe3a 	bl	80009d0 <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	e009      	b.n	8001d76 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7fe fe35 	bl	80009d0 <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	4a9b      	ldr	r2, [pc, #620]	; (8001fdc <HAL_RCC_OscConfig+0x624>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e12b      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	4b98      	ldr	r3, [pc, #608]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x3aa>
 8001d80:	e013      	b.n	8001daa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7fe fe25 	bl	80009d0 <HAL_GetTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8a:	e009      	b.n	8001da0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7fe fe20 	bl	80009d0 <HAL_GetTick>
 8001d90:	0002      	movs	r2, r0
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	4a91      	ldr	r2, [pc, #580]	; (8001fdc <HAL_RCC_OscConfig+0x624>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e116      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001daa:	231f      	movs	r3, #31
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db4:	4b88      	ldr	r3, [pc, #544]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	4b87      	ldr	r3, [pc, #540]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001dba:	4989      	ldr	r1, [pc, #548]	; (8001fe0 <HAL_RCC_OscConfig+0x628>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d063      	beq.n	8001e92 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d12a      	bne.n	8001e28 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dd2:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd6:	4b80      	ldr	r3, [pc, #512]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001dd8:	2104      	movs	r1, #4
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dde:	4b7e      	ldr	r3, [pc, #504]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de2:	4b7d      	ldr	r3, [pc, #500]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001de4:	2101      	movs	r1, #1
 8001de6:	430a      	orrs	r2, r1
 8001de8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7fe fdf1 	bl	80009d0 <HAL_GetTick>
 8001dee:	0003      	movs	r3, r0
 8001df0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001df4:	f7fe fdec 	bl	80009d0 <HAL_GetTick>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0e3      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e06:	4b74      	ldr	r3, [pc, #464]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d0f1      	beq.n	8001df4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e10:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	22f8      	movs	r2, #248	; 0xf8
 8001e16:	4393      	bics	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	00da      	lsls	r2, r3, #3
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34
 8001e26:	e034      	b.n	8001e92 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	3305      	adds	r3, #5
 8001e2e:	d111      	bne.n	8001e54 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e30:	4b69      	ldr	r3, [pc, #420]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e34:	4b68      	ldr	r3, [pc, #416]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e36:	2104      	movs	r1, #4
 8001e38:	438a      	bics	r2, r1
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e3c:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e40:	22f8      	movs	r2, #248	; 0xf8
 8001e42:	4393      	bics	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	00da      	lsls	r2, r3, #3
 8001e4c:	4b62      	ldr	r3, [pc, #392]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
 8001e52:	e01e      	b.n	8001e92 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e54:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e58:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e60:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e64:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	438a      	bics	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7fe fdb0 	bl	80009d0 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e76:	f7fe fdab 	bl	80009d0 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0a2      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e88:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d1f1      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d100      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4e4>
 8001e9a:	e097      	b.n	8001fcc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e9c:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	220c      	movs	r2, #12
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d100      	bne.n	8001eaa <HAL_RCC_OscConfig+0x4f2>
 8001ea8:	e06b      	b.n	8001f82 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d14c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001eb8:	494a      	ldr	r1, [pc, #296]	; (8001fe4 <HAL_RCC_OscConfig+0x62c>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7fe fd87 	bl	80009d0 <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7fe fd82 	bl	80009d0 <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e079      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	049b      	lsls	r3, r3, #18
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	220f      	movs	r2, #15
 8001eec:	4393      	bics	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <HAL_RCC_OscConfig+0x630>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	0449      	lsls	r1, r1, #17
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7fe fd55 	bl	80009d0 <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe fd50 	bl	80009d0 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e047      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	049b      	lsls	r3, r3, #18
 8001f46:	4013      	ands	r3, r2
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x574>
 8001f4a:	e03f      	b.n	8001fcc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f52:	4924      	ldr	r1, [pc, #144]	; (8001fe4 <HAL_RCC_OscConfig+0x62c>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fd3a 	bl	80009d0 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe fd35 	bl	80009d0 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e02c      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	049b      	lsls	r3, r3, #18
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5aa>
 8001f80:	e024      	b.n	8001fcc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e01f      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_RCC_OscConfig+0x620>)
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	220f      	movs	r2, #15
 8001fae:	401a      	ands	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	23f0      	movs	r3, #240	; 0xf0
 8001fbc:	039b      	lsls	r3, r3, #14
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b008      	add	sp, #32
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	00001388 	.word	0x00001388
 8001fe0:	efffffff 	.word	0xefffffff
 8001fe4:	feffffff 	.word	0xfeffffff
 8001fe8:	ffc2ffff 	.word	0xffc2ffff

08001fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0b3      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002000:	4b5b      	ldr	r3, [pc, #364]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d911      	bls.n	8002032 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	4393      	bics	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	4b55      	ldr	r3, [pc, #340]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	4013      	ands	r3, r2
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e09a      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d015      	beq.n	8002068 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2204      	movs	r2, #4
 8002042:	4013      	ands	r3, r2
 8002044:	d006      	beq.n	8002054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002046:	4b4b      	ldr	r3, [pc, #300]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4b4a      	ldr	r3, [pc, #296]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 800204c:	21e0      	movs	r1, #224	; 0xe0
 800204e:	00c9      	lsls	r1, r1, #3
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	22f0      	movs	r2, #240	; 0xf0
 800205a:	4393      	bics	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	4b44      	ldr	r3, [pc, #272]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002064:	430a      	orrs	r2, r1
 8002066:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	d040      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	029b      	lsls	r3, r3, #10
 8002082:	4013      	ands	r3, r2
 8002084:	d114      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06e      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	049b      	lsls	r3, r3, #18
 800209a:	4013      	ands	r3, r2
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e062      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b34      	ldr	r3, [pc, #208]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e05b      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2203      	movs	r2, #3
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fc84 	bl	80009d0 <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020cc:	e009      	b.n	80020e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ce:	f7fe fc7f 	bl	80009d0 <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	4a27      	ldr	r2, [pc, #156]	; (8002178 <HAL_RCC_ClockConfig+0x18c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e042      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	220c      	movs	r2, #12
 80020e8:	401a      	ands	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1ec      	bne.n	80020ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d211      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	4393      	bics	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_RCC_ClockConfig+0x184>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	4013      	ands	r3, r2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e020      	b.n	8002168 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d009      	beq.n	8002144 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <HAL_RCC_ClockConfig+0x190>)
 8002136:	4013      	ands	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002144:	f000 f820 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002148:	0001      	movs	r1, r0
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x188>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	220f      	movs	r2, #15
 8002152:	4013      	ands	r3, r2
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x194>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	000a      	movs	r2, r1
 800215a:	40da      	lsrs	r2, r3
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x198>)
 800215e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002160:	2000      	movs	r0, #0
 8002162:	f7fe fbef 	bl	8000944 <HAL_InitTick>
  
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b004      	add	sp, #16
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40022000 	.word	0x40022000
 8002174:	40021000 	.word	0x40021000
 8002178:	00001388 	.word	0x00001388
 800217c:	fffff8ff 	.word	0xfffff8ff
 8002180:	08002ccc 	.word	0x08002ccc
 8002184:	20000000 	.word	0x20000000

08002188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	220c      	movs	r2, #12
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d002      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x30>
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x36>
 80021b6:	e02c      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ba:	613b      	str	r3, [r7, #16]
      break;
 80021bc:	e02c      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	0c9b      	lsrs	r3, r3, #18
 80021c2:	220f      	movs	r2, #15
 80021c4:	4013      	ands	r3, r2
 80021c6:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_RCC_GetSysClockFreq+0xa4>)
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021cc:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	220f      	movs	r2, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	4a16      	ldr	r2, [pc, #88]	; (8002230 <HAL_RCC_GetSysClockFreq+0xa8>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	025b      	lsls	r3, r3, #9
 80021e0:	4013      	ands	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	4810      	ldr	r0, [pc, #64]	; (8002228 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e8:	f7fd ffa0 	bl	800012c <__udivsi3>
 80021ec:	0003      	movs	r3, r0
 80021ee:	001a      	movs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4353      	muls	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e009      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	000a      	movs	r2, r1
 80021fc:	0152      	lsls	r2, r2, #5
 80021fe:	1a52      	subs	r2, r2, r1
 8002200:	0193      	lsls	r3, r2, #6
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	185b      	adds	r3, r3, r1
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
      break;
 8002210:	e002      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002214:	613b      	str	r3, [r7, #16]
      break;
 8002216:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002218:	693b      	ldr	r3, [r7, #16]
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b006      	add	sp, #24
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	40021000 	.word	0x40021000
 8002228:	007a1200 	.word	0x007a1200
 800222c:	08002cdc 	.word	0x08002cdc
 8002230:	08002cec 	.word	0x08002cec

08002234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	025b      	lsls	r3, r3, #9
 800224c:	4013      	ands	r3, r2
 800224e:	d100      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002250:	e08e      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002252:	2017      	movs	r0, #23
 8002254:	183b      	adds	r3, r7, r0
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	055b      	lsls	r3, r3, #21
 8002262:	4013      	ands	r3, r2
 8002264:	d110      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	4b5b      	ldr	r3, [pc, #364]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	0549      	lsls	r1, r1, #21
 8002270:	430a      	orrs	r2, r1
 8002272:	61da      	str	r2, [r3, #28]
 8002274:	4b58      	ldr	r3, [pc, #352]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	183b      	adds	r3, r7, r0
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	4b54      	ldr	r3, [pc, #336]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4013      	ands	r3, r2
 8002292:	d11a      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002294:	4b51      	ldr	r3, [pc, #324]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b50      	ldr	r3, [pc, #320]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	0049      	lsls	r1, r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7fe fb95 	bl	80009d0 <HAL_GetTick>
 80022a6:	0003      	movs	r3, r0
 80022a8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	e008      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ac:	f7fe fb90 	bl	80009d0 <HAL_GetTick>
 80022b0:	0002      	movs	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e087      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b47      	ldr	r3, [pc, #284]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ca:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	23c0      	movs	r3, #192	; 0xc0
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d034      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d02c      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022ec:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a3b      	ldr	r2, [pc, #236]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f6:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0249      	lsls	r1, r1, #9
 8002300:	430a      	orrs	r2, r1
 8002302:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002306:	6a1a      	ldr	r2, [r3, #32]
 8002308:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800230a:	4936      	ldr	r1, [pc, #216]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800230c:	400a      	ands	r2, r1
 800230e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002310:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	4013      	ands	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fb57 	bl	80009d0 <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002326:	e009      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7fe fb52 	bl	80009d0 <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	4a2d      	ldr	r2, [pc, #180]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e048      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	2202      	movs	r2, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d0f0      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002356:	430a      	orrs	r2, r1
 8002358:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800235a:	2317      	movs	r3, #23
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800236a:	4920      	ldr	r1, [pc, #128]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800236c:	400a      	ands	r2, r1
 800236e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2201      	movs	r2, #1
 8002376:	4013      	ands	r3, r2
 8002378:	d009      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	2203      	movs	r2, #3
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800238a:	430a      	orrs	r2, r1
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2220      	movs	r2, #32
 8002394:	4013      	ands	r3, r2
 8002396:	d009      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	2210      	movs	r2, #16
 800239e:	4393      	bics	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4013      	ands	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	4393      	bics	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	0018      	movs	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b006      	add	sp, #24
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	fffffcff 	.word	0xfffffcff
 80023e4:	fffeffff 	.word	0xfffeffff
 80023e8:	00001388 	.word	0x00001388
 80023ec:	efffffff 	.word	0xefffffff

080023f0 <__errno>:
 80023f0:	4b01      	ldr	r3, [pc, #4]	; (80023f8 <__errno+0x8>)
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	4770      	bx	lr
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	2000000c 	.word	0x2000000c

080023fc <__libc_init_array>:
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	2600      	movs	r6, #0
 8002400:	4d0c      	ldr	r5, [pc, #48]	; (8002434 <__libc_init_array+0x38>)
 8002402:	4c0d      	ldr	r4, [pc, #52]	; (8002438 <__libc_init_array+0x3c>)
 8002404:	1b64      	subs	r4, r4, r5
 8002406:	10a4      	asrs	r4, r4, #2
 8002408:	42a6      	cmp	r6, r4
 800240a:	d109      	bne.n	8002420 <__libc_init_array+0x24>
 800240c:	2600      	movs	r6, #0
 800240e:	f000 fc49 	bl	8002ca4 <_init>
 8002412:	4d0a      	ldr	r5, [pc, #40]	; (800243c <__libc_init_array+0x40>)
 8002414:	4c0a      	ldr	r4, [pc, #40]	; (8002440 <__libc_init_array+0x44>)
 8002416:	1b64      	subs	r4, r4, r5
 8002418:	10a4      	asrs	r4, r4, #2
 800241a:	42a6      	cmp	r6, r4
 800241c:	d105      	bne.n	800242a <__libc_init_array+0x2e>
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	00b3      	lsls	r3, r6, #2
 8002422:	58eb      	ldr	r3, [r5, r3]
 8002424:	4798      	blx	r3
 8002426:	3601      	adds	r6, #1
 8002428:	e7ee      	b.n	8002408 <__libc_init_array+0xc>
 800242a:	00b3      	lsls	r3, r6, #2
 800242c:	58eb      	ldr	r3, [r5, r3]
 800242e:	4798      	blx	r3
 8002430:	3601      	adds	r6, #1
 8002432:	e7f2      	b.n	800241a <__libc_init_array+0x1e>
 8002434:	08002d30 	.word	0x08002d30
 8002438:	08002d30 	.word	0x08002d30
 800243c:	08002d30 	.word	0x08002d30
 8002440:	08002d34 	.word	0x08002d34

08002444 <memset>:
 8002444:	0003      	movs	r3, r0
 8002446:	1882      	adds	r2, r0, r2
 8002448:	4293      	cmp	r3, r2
 800244a:	d100      	bne.n	800244e <memset+0xa>
 800244c:	4770      	bx	lr
 800244e:	7019      	strb	r1, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	e7f9      	b.n	8002448 <memset+0x4>

08002454 <_vsiprintf_r>:
 8002454:	b500      	push	{lr}
 8002456:	b09b      	sub	sp, #108	; 0x6c
 8002458:	9100      	str	r1, [sp, #0]
 800245a:	9104      	str	r1, [sp, #16]
 800245c:	4906      	ldr	r1, [pc, #24]	; (8002478 <_vsiprintf_r+0x24>)
 800245e:	9105      	str	r1, [sp, #20]
 8002460:	9102      	str	r1, [sp, #8]
 8002462:	4906      	ldr	r1, [pc, #24]	; (800247c <_vsiprintf_r+0x28>)
 8002464:	9103      	str	r1, [sp, #12]
 8002466:	4669      	mov	r1, sp
 8002468:	f000 f878 	bl	800255c <_svfiprintf_r>
 800246c:	2300      	movs	r3, #0
 800246e:	9a00      	ldr	r2, [sp, #0]
 8002470:	7013      	strb	r3, [r2, #0]
 8002472:	b01b      	add	sp, #108	; 0x6c
 8002474:	bd00      	pop	{pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	7fffffff 	.word	0x7fffffff
 800247c:	ffff0208 	.word	0xffff0208

08002480 <vsiprintf>:
 8002480:	b510      	push	{r4, lr}
 8002482:	0013      	movs	r3, r2
 8002484:	000a      	movs	r2, r1
 8002486:	0001      	movs	r1, r0
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <vsiprintf+0x14>)
 800248a:	6800      	ldr	r0, [r0, #0]
 800248c:	f7ff ffe2 	bl	8002454 <_vsiprintf_r>
 8002490:	bd10      	pop	{r4, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	2000000c 	.word	0x2000000c

08002498 <__ssputs_r>:
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	688e      	ldr	r6, [r1, #8]
 800249c:	b085      	sub	sp, #20
 800249e:	0007      	movs	r7, r0
 80024a0:	000c      	movs	r4, r1
 80024a2:	9203      	str	r2, [sp, #12]
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	429e      	cmp	r6, r3
 80024a8:	d83c      	bhi.n	8002524 <__ssputs_r+0x8c>
 80024aa:	2390      	movs	r3, #144	; 0x90
 80024ac:	898a      	ldrh	r2, [r1, #12]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	421a      	tst	r2, r3
 80024b2:	d034      	beq.n	800251e <__ssputs_r+0x86>
 80024b4:	2503      	movs	r5, #3
 80024b6:	6909      	ldr	r1, [r1, #16]
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	1a5b      	subs	r3, r3, r1
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	6963      	ldr	r3, [r4, #20]
 80024c0:	9802      	ldr	r0, [sp, #8]
 80024c2:	435d      	muls	r5, r3
 80024c4:	0feb      	lsrs	r3, r5, #31
 80024c6:	195d      	adds	r5, r3, r5
 80024c8:	9b01      	ldr	r3, [sp, #4]
 80024ca:	106d      	asrs	r5, r5, #1
 80024cc:	3301      	adds	r3, #1
 80024ce:	181b      	adds	r3, r3, r0
 80024d0:	42ab      	cmp	r3, r5
 80024d2:	d900      	bls.n	80024d6 <__ssputs_r+0x3e>
 80024d4:	001d      	movs	r5, r3
 80024d6:	0553      	lsls	r3, r2, #21
 80024d8:	d532      	bpl.n	8002540 <__ssputs_r+0xa8>
 80024da:	0029      	movs	r1, r5
 80024dc:	0038      	movs	r0, r7
 80024de:	f000 fb31 	bl	8002b44 <_malloc_r>
 80024e2:	1e06      	subs	r6, r0, #0
 80024e4:	d109      	bne.n	80024fa <__ssputs_r+0x62>
 80024e6:	230c      	movs	r3, #12
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	2001      	movs	r0, #1
 80024ee:	89a2      	ldrh	r2, [r4, #12]
 80024f0:	4240      	negs	r0, r0
 80024f2:	4313      	orrs	r3, r2
 80024f4:	81a3      	strh	r3, [r4, #12]
 80024f6:	b005      	add	sp, #20
 80024f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fa:	9a02      	ldr	r2, [sp, #8]
 80024fc:	6921      	ldr	r1, [r4, #16]
 80024fe:	f000 faba 	bl	8002a76 <memcpy>
 8002502:	89a3      	ldrh	r3, [r4, #12]
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <__ssputs_r+0xc0>)
 8002506:	401a      	ands	r2, r3
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	4313      	orrs	r3, r2
 800250c:	81a3      	strh	r3, [r4, #12]
 800250e:	9b02      	ldr	r3, [sp, #8]
 8002510:	6126      	str	r6, [r4, #16]
 8002512:	18f6      	adds	r6, r6, r3
 8002514:	6026      	str	r6, [r4, #0]
 8002516:	6165      	str	r5, [r4, #20]
 8002518:	9e01      	ldr	r6, [sp, #4]
 800251a:	1aed      	subs	r5, r5, r3
 800251c:	60a5      	str	r5, [r4, #8]
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	429e      	cmp	r6, r3
 8002522:	d900      	bls.n	8002526 <__ssputs_r+0x8e>
 8002524:	9e01      	ldr	r6, [sp, #4]
 8002526:	0032      	movs	r2, r6
 8002528:	9903      	ldr	r1, [sp, #12]
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	f000 faac 	bl	8002a88 <memmove>
 8002530:	68a3      	ldr	r3, [r4, #8]
 8002532:	2000      	movs	r0, #0
 8002534:	1b9b      	subs	r3, r3, r6
 8002536:	60a3      	str	r3, [r4, #8]
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	199e      	adds	r6, r3, r6
 800253c:	6026      	str	r6, [r4, #0]
 800253e:	e7da      	b.n	80024f6 <__ssputs_r+0x5e>
 8002540:	002a      	movs	r2, r5
 8002542:	0038      	movs	r0, r7
 8002544:	f000 fb5c 	bl	8002c00 <_realloc_r>
 8002548:	1e06      	subs	r6, r0, #0
 800254a:	d1e0      	bne.n	800250e <__ssputs_r+0x76>
 800254c:	0038      	movs	r0, r7
 800254e:	6921      	ldr	r1, [r4, #16]
 8002550:	f000 faae 	bl	8002ab0 <_free_r>
 8002554:	e7c7      	b.n	80024e6 <__ssputs_r+0x4e>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	fffffb7f 	.word	0xfffffb7f

0800255c <_svfiprintf_r>:
 800255c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255e:	b0a1      	sub	sp, #132	; 0x84
 8002560:	9003      	str	r0, [sp, #12]
 8002562:	001d      	movs	r5, r3
 8002564:	898b      	ldrh	r3, [r1, #12]
 8002566:	000f      	movs	r7, r1
 8002568:	0016      	movs	r6, r2
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	d511      	bpl.n	8002592 <_svfiprintf_r+0x36>
 800256e:	690b      	ldr	r3, [r1, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10e      	bne.n	8002592 <_svfiprintf_r+0x36>
 8002574:	2140      	movs	r1, #64	; 0x40
 8002576:	f000 fae5 	bl	8002b44 <_malloc_r>
 800257a:	6038      	str	r0, [r7, #0]
 800257c:	6138      	str	r0, [r7, #16]
 800257e:	2800      	cmp	r0, #0
 8002580:	d105      	bne.n	800258e <_svfiprintf_r+0x32>
 8002582:	230c      	movs	r3, #12
 8002584:	9a03      	ldr	r2, [sp, #12]
 8002586:	3801      	subs	r0, #1
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	b021      	add	sp, #132	; 0x84
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800258e:	2340      	movs	r3, #64	; 0x40
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	2300      	movs	r3, #0
 8002594:	ac08      	add	r4, sp, #32
 8002596:	6163      	str	r3, [r4, #20]
 8002598:	3320      	adds	r3, #32
 800259a:	7663      	strb	r3, [r4, #25]
 800259c:	3310      	adds	r3, #16
 800259e:	76a3      	strb	r3, [r4, #26]
 80025a0:	9507      	str	r5, [sp, #28]
 80025a2:	0035      	movs	r5, r6
 80025a4:	782b      	ldrb	r3, [r5, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <_svfiprintf_r+0x52>
 80025aa:	2b25      	cmp	r3, #37	; 0x25
 80025ac:	d147      	bne.n	800263e <_svfiprintf_r+0xe2>
 80025ae:	1bab      	subs	r3, r5, r6
 80025b0:	9305      	str	r3, [sp, #20]
 80025b2:	42b5      	cmp	r5, r6
 80025b4:	d00c      	beq.n	80025d0 <_svfiprintf_r+0x74>
 80025b6:	0032      	movs	r2, r6
 80025b8:	0039      	movs	r1, r7
 80025ba:	9803      	ldr	r0, [sp, #12]
 80025bc:	f7ff ff6c 	bl	8002498 <__ssputs_r>
 80025c0:	1c43      	adds	r3, r0, #1
 80025c2:	d100      	bne.n	80025c6 <_svfiprintf_r+0x6a>
 80025c4:	e0ae      	b.n	8002724 <_svfiprintf_r+0x1c8>
 80025c6:	6962      	ldr	r2, [r4, #20]
 80025c8:	9b05      	ldr	r3, [sp, #20]
 80025ca:	4694      	mov	ip, r2
 80025cc:	4463      	add	r3, ip
 80025ce:	6163      	str	r3, [r4, #20]
 80025d0:	782b      	ldrb	r3, [r5, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d100      	bne.n	80025d8 <_svfiprintf_r+0x7c>
 80025d6:	e0a5      	b.n	8002724 <_svfiprintf_r+0x1c8>
 80025d8:	2201      	movs	r2, #1
 80025da:	2300      	movs	r3, #0
 80025dc:	4252      	negs	r2, r2
 80025de:	6062      	str	r2, [r4, #4]
 80025e0:	a904      	add	r1, sp, #16
 80025e2:	3254      	adds	r2, #84	; 0x54
 80025e4:	1852      	adds	r2, r2, r1
 80025e6:	1c6e      	adds	r6, r5, #1
 80025e8:	6023      	str	r3, [r4, #0]
 80025ea:	60e3      	str	r3, [r4, #12]
 80025ec:	60a3      	str	r3, [r4, #8]
 80025ee:	7013      	strb	r3, [r2, #0]
 80025f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80025f2:	2205      	movs	r2, #5
 80025f4:	7831      	ldrb	r1, [r6, #0]
 80025f6:	4854      	ldr	r0, [pc, #336]	; (8002748 <_svfiprintf_r+0x1ec>)
 80025f8:	f000 fa32 	bl	8002a60 <memchr>
 80025fc:	1c75      	adds	r5, r6, #1
 80025fe:	2800      	cmp	r0, #0
 8002600:	d11f      	bne.n	8002642 <_svfiprintf_r+0xe6>
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	06d3      	lsls	r3, r2, #27
 8002606:	d504      	bpl.n	8002612 <_svfiprintf_r+0xb6>
 8002608:	2353      	movs	r3, #83	; 0x53
 800260a:	a904      	add	r1, sp, #16
 800260c:	185b      	adds	r3, r3, r1
 800260e:	2120      	movs	r1, #32
 8002610:	7019      	strb	r1, [r3, #0]
 8002612:	0713      	lsls	r3, r2, #28
 8002614:	d504      	bpl.n	8002620 <_svfiprintf_r+0xc4>
 8002616:	2353      	movs	r3, #83	; 0x53
 8002618:	a904      	add	r1, sp, #16
 800261a:	185b      	adds	r3, r3, r1
 800261c:	212b      	movs	r1, #43	; 0x2b
 800261e:	7019      	strb	r1, [r3, #0]
 8002620:	7833      	ldrb	r3, [r6, #0]
 8002622:	2b2a      	cmp	r3, #42	; 0x2a
 8002624:	d016      	beq.n	8002654 <_svfiprintf_r+0xf8>
 8002626:	0035      	movs	r5, r6
 8002628:	2100      	movs	r1, #0
 800262a:	200a      	movs	r0, #10
 800262c:	68e3      	ldr	r3, [r4, #12]
 800262e:	782a      	ldrb	r2, [r5, #0]
 8002630:	1c6e      	adds	r6, r5, #1
 8002632:	3a30      	subs	r2, #48	; 0x30
 8002634:	2a09      	cmp	r2, #9
 8002636:	d94e      	bls.n	80026d6 <_svfiprintf_r+0x17a>
 8002638:	2900      	cmp	r1, #0
 800263a:	d111      	bne.n	8002660 <_svfiprintf_r+0x104>
 800263c:	e017      	b.n	800266e <_svfiprintf_r+0x112>
 800263e:	3501      	adds	r5, #1
 8002640:	e7b0      	b.n	80025a4 <_svfiprintf_r+0x48>
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <_svfiprintf_r+0x1ec>)
 8002644:	6822      	ldr	r2, [r4, #0]
 8002646:	1ac0      	subs	r0, r0, r3
 8002648:	2301      	movs	r3, #1
 800264a:	4083      	lsls	r3, r0
 800264c:	4313      	orrs	r3, r2
 800264e:	002e      	movs	r6, r5
 8002650:	6023      	str	r3, [r4, #0]
 8002652:	e7ce      	b.n	80025f2 <_svfiprintf_r+0x96>
 8002654:	9b07      	ldr	r3, [sp, #28]
 8002656:	1d19      	adds	r1, r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	9107      	str	r1, [sp, #28]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db01      	blt.n	8002664 <_svfiprintf_r+0x108>
 8002660:	930b      	str	r3, [sp, #44]	; 0x2c
 8002662:	e004      	b.n	800266e <_svfiprintf_r+0x112>
 8002664:	425b      	negs	r3, r3
 8002666:	60e3      	str	r3, [r4, #12]
 8002668:	2302      	movs	r3, #2
 800266a:	4313      	orrs	r3, r2
 800266c:	6023      	str	r3, [r4, #0]
 800266e:	782b      	ldrb	r3, [r5, #0]
 8002670:	2b2e      	cmp	r3, #46	; 0x2e
 8002672:	d10a      	bne.n	800268a <_svfiprintf_r+0x12e>
 8002674:	786b      	ldrb	r3, [r5, #1]
 8002676:	2b2a      	cmp	r3, #42	; 0x2a
 8002678:	d135      	bne.n	80026e6 <_svfiprintf_r+0x18a>
 800267a:	9b07      	ldr	r3, [sp, #28]
 800267c:	3502      	adds	r5, #2
 800267e:	1d1a      	adds	r2, r3, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	9207      	str	r2, [sp, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db2b      	blt.n	80026e0 <_svfiprintf_r+0x184>
 8002688:	9309      	str	r3, [sp, #36]	; 0x24
 800268a:	4e30      	ldr	r6, [pc, #192]	; (800274c <_svfiprintf_r+0x1f0>)
 800268c:	2203      	movs	r2, #3
 800268e:	0030      	movs	r0, r6
 8002690:	7829      	ldrb	r1, [r5, #0]
 8002692:	f000 f9e5 	bl	8002a60 <memchr>
 8002696:	2800      	cmp	r0, #0
 8002698:	d006      	beq.n	80026a8 <_svfiprintf_r+0x14c>
 800269a:	2340      	movs	r3, #64	; 0x40
 800269c:	1b80      	subs	r0, r0, r6
 800269e:	4083      	lsls	r3, r0
 80026a0:	6822      	ldr	r2, [r4, #0]
 80026a2:	3501      	adds	r5, #1
 80026a4:	4313      	orrs	r3, r2
 80026a6:	6023      	str	r3, [r4, #0]
 80026a8:	7829      	ldrb	r1, [r5, #0]
 80026aa:	2206      	movs	r2, #6
 80026ac:	4828      	ldr	r0, [pc, #160]	; (8002750 <_svfiprintf_r+0x1f4>)
 80026ae:	1c6e      	adds	r6, r5, #1
 80026b0:	7621      	strb	r1, [r4, #24]
 80026b2:	f000 f9d5 	bl	8002a60 <memchr>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d03c      	beq.n	8002734 <_svfiprintf_r+0x1d8>
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <_svfiprintf_r+0x1f8>)
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d125      	bne.n	800270c <_svfiprintf_r+0x1b0>
 80026c0:	2207      	movs	r2, #7
 80026c2:	9b07      	ldr	r3, [sp, #28]
 80026c4:	3307      	adds	r3, #7
 80026c6:	4393      	bics	r3, r2
 80026c8:	3308      	adds	r3, #8
 80026ca:	9307      	str	r3, [sp, #28]
 80026cc:	6963      	ldr	r3, [r4, #20]
 80026ce:	9a04      	ldr	r2, [sp, #16]
 80026d0:	189b      	adds	r3, r3, r2
 80026d2:	6163      	str	r3, [r4, #20]
 80026d4:	e765      	b.n	80025a2 <_svfiprintf_r+0x46>
 80026d6:	4343      	muls	r3, r0
 80026d8:	0035      	movs	r5, r6
 80026da:	2101      	movs	r1, #1
 80026dc:	189b      	adds	r3, r3, r2
 80026de:	e7a6      	b.n	800262e <_svfiprintf_r+0xd2>
 80026e0:	2301      	movs	r3, #1
 80026e2:	425b      	negs	r3, r3
 80026e4:	e7d0      	b.n	8002688 <_svfiprintf_r+0x12c>
 80026e6:	2300      	movs	r3, #0
 80026e8:	200a      	movs	r0, #10
 80026ea:	001a      	movs	r2, r3
 80026ec:	3501      	adds	r5, #1
 80026ee:	6063      	str	r3, [r4, #4]
 80026f0:	7829      	ldrb	r1, [r5, #0]
 80026f2:	1c6e      	adds	r6, r5, #1
 80026f4:	3930      	subs	r1, #48	; 0x30
 80026f6:	2909      	cmp	r1, #9
 80026f8:	d903      	bls.n	8002702 <_svfiprintf_r+0x1a6>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0c5      	beq.n	800268a <_svfiprintf_r+0x12e>
 80026fe:	9209      	str	r2, [sp, #36]	; 0x24
 8002700:	e7c3      	b.n	800268a <_svfiprintf_r+0x12e>
 8002702:	4342      	muls	r2, r0
 8002704:	0035      	movs	r5, r6
 8002706:	2301      	movs	r3, #1
 8002708:	1852      	adds	r2, r2, r1
 800270a:	e7f1      	b.n	80026f0 <_svfiprintf_r+0x194>
 800270c:	ab07      	add	r3, sp, #28
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	003a      	movs	r2, r7
 8002712:	0021      	movs	r1, r4
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <_svfiprintf_r+0x1fc>)
 8002716:	9803      	ldr	r0, [sp, #12]
 8002718:	e000      	b.n	800271c <_svfiprintf_r+0x1c0>
 800271a:	bf00      	nop
 800271c:	9004      	str	r0, [sp, #16]
 800271e:	9b04      	ldr	r3, [sp, #16]
 8002720:	3301      	adds	r3, #1
 8002722:	d1d3      	bne.n	80026cc <_svfiprintf_r+0x170>
 8002724:	89bb      	ldrh	r3, [r7, #12]
 8002726:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002728:	065b      	lsls	r3, r3, #25
 800272a:	d400      	bmi.n	800272e <_svfiprintf_r+0x1d2>
 800272c:	e72d      	b.n	800258a <_svfiprintf_r+0x2e>
 800272e:	2001      	movs	r0, #1
 8002730:	4240      	negs	r0, r0
 8002732:	e72a      	b.n	800258a <_svfiprintf_r+0x2e>
 8002734:	ab07      	add	r3, sp, #28
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	003a      	movs	r2, r7
 800273a:	0021      	movs	r1, r4
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <_svfiprintf_r+0x1fc>)
 800273e:	9803      	ldr	r0, [sp, #12]
 8002740:	f000 f87c 	bl	800283c <_printf_i>
 8002744:	e7ea      	b.n	800271c <_svfiprintf_r+0x1c0>
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	08002cfc 	.word	0x08002cfc
 800274c:	08002d02 	.word	0x08002d02
 8002750:	08002d06 	.word	0x08002d06
 8002754:	00000000 	.word	0x00000000
 8002758:	08002499 	.word	0x08002499

0800275c <_printf_common>:
 800275c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800275e:	0015      	movs	r5, r2
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	688a      	ldr	r2, [r1, #8]
 8002764:	690b      	ldr	r3, [r1, #16]
 8002766:	000c      	movs	r4, r1
 8002768:	9000      	str	r0, [sp, #0]
 800276a:	4293      	cmp	r3, r2
 800276c:	da00      	bge.n	8002770 <_printf_common+0x14>
 800276e:	0013      	movs	r3, r2
 8002770:	0022      	movs	r2, r4
 8002772:	602b      	str	r3, [r5, #0]
 8002774:	3243      	adds	r2, #67	; 0x43
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	2a00      	cmp	r2, #0
 800277a:	d001      	beq.n	8002780 <_printf_common+0x24>
 800277c:	3301      	adds	r3, #1
 800277e:	602b      	str	r3, [r5, #0]
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	069b      	lsls	r3, r3, #26
 8002784:	d502      	bpl.n	800278c <_printf_common+0x30>
 8002786:	682b      	ldr	r3, [r5, #0]
 8002788:	3302      	adds	r3, #2
 800278a:	602b      	str	r3, [r5, #0]
 800278c:	6822      	ldr	r2, [r4, #0]
 800278e:	2306      	movs	r3, #6
 8002790:	0017      	movs	r7, r2
 8002792:	401f      	ands	r7, r3
 8002794:	421a      	tst	r2, r3
 8002796:	d027      	beq.n	80027e8 <_printf_common+0x8c>
 8002798:	0023      	movs	r3, r4
 800279a:	3343      	adds	r3, #67	; 0x43
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	4193      	sbcs	r3, r2
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	0692      	lsls	r2, r2, #26
 80027a6:	d430      	bmi.n	800280a <_printf_common+0xae>
 80027a8:	0022      	movs	r2, r4
 80027aa:	9901      	ldr	r1, [sp, #4]
 80027ac:	9800      	ldr	r0, [sp, #0]
 80027ae:	9e08      	ldr	r6, [sp, #32]
 80027b0:	3243      	adds	r2, #67	; 0x43
 80027b2:	47b0      	blx	r6
 80027b4:	1c43      	adds	r3, r0, #1
 80027b6:	d025      	beq.n	8002804 <_printf_common+0xa8>
 80027b8:	2306      	movs	r3, #6
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	682a      	ldr	r2, [r5, #0]
 80027be:	68e1      	ldr	r1, [r4, #12]
 80027c0:	2500      	movs	r5, #0
 80027c2:	4003      	ands	r3, r0
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d103      	bne.n	80027d0 <_printf_common+0x74>
 80027c8:	1a8d      	subs	r5, r1, r2
 80027ca:	43eb      	mvns	r3, r5
 80027cc:	17db      	asrs	r3, r3, #31
 80027ce:	401d      	ands	r5, r3
 80027d0:	68a3      	ldr	r3, [r4, #8]
 80027d2:	6922      	ldr	r2, [r4, #16]
 80027d4:	4293      	cmp	r3, r2
 80027d6:	dd01      	ble.n	80027dc <_printf_common+0x80>
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	18ed      	adds	r5, r5, r3
 80027dc:	2700      	movs	r7, #0
 80027de:	42bd      	cmp	r5, r7
 80027e0:	d120      	bne.n	8002824 <_printf_common+0xc8>
 80027e2:	2000      	movs	r0, #0
 80027e4:	e010      	b.n	8002808 <_printf_common+0xac>
 80027e6:	3701      	adds	r7, #1
 80027e8:	68e3      	ldr	r3, [r4, #12]
 80027ea:	682a      	ldr	r2, [r5, #0]
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	42bb      	cmp	r3, r7
 80027f0:	ddd2      	ble.n	8002798 <_printf_common+0x3c>
 80027f2:	0022      	movs	r2, r4
 80027f4:	2301      	movs	r3, #1
 80027f6:	9901      	ldr	r1, [sp, #4]
 80027f8:	9800      	ldr	r0, [sp, #0]
 80027fa:	9e08      	ldr	r6, [sp, #32]
 80027fc:	3219      	adds	r2, #25
 80027fe:	47b0      	blx	r6
 8002800:	1c43      	adds	r3, r0, #1
 8002802:	d1f0      	bne.n	80027e6 <_printf_common+0x8a>
 8002804:	2001      	movs	r0, #1
 8002806:	4240      	negs	r0, r0
 8002808:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800280a:	2030      	movs	r0, #48	; 0x30
 800280c:	18e1      	adds	r1, r4, r3
 800280e:	3143      	adds	r1, #67	; 0x43
 8002810:	7008      	strb	r0, [r1, #0]
 8002812:	0021      	movs	r1, r4
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	3145      	adds	r1, #69	; 0x45
 8002818:	7809      	ldrb	r1, [r1, #0]
 800281a:	18a2      	adds	r2, r4, r2
 800281c:	3243      	adds	r2, #67	; 0x43
 800281e:	3302      	adds	r3, #2
 8002820:	7011      	strb	r1, [r2, #0]
 8002822:	e7c1      	b.n	80027a8 <_printf_common+0x4c>
 8002824:	0022      	movs	r2, r4
 8002826:	2301      	movs	r3, #1
 8002828:	9901      	ldr	r1, [sp, #4]
 800282a:	9800      	ldr	r0, [sp, #0]
 800282c:	9e08      	ldr	r6, [sp, #32]
 800282e:	321a      	adds	r2, #26
 8002830:	47b0      	blx	r6
 8002832:	1c43      	adds	r3, r0, #1
 8002834:	d0e6      	beq.n	8002804 <_printf_common+0xa8>
 8002836:	3701      	adds	r7, #1
 8002838:	e7d1      	b.n	80027de <_printf_common+0x82>
	...

0800283c <_printf_i>:
 800283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283e:	b08b      	sub	sp, #44	; 0x2c
 8002840:	9206      	str	r2, [sp, #24]
 8002842:	000a      	movs	r2, r1
 8002844:	3243      	adds	r2, #67	; 0x43
 8002846:	9307      	str	r3, [sp, #28]
 8002848:	9005      	str	r0, [sp, #20]
 800284a:	9204      	str	r2, [sp, #16]
 800284c:	7e0a      	ldrb	r2, [r1, #24]
 800284e:	000c      	movs	r4, r1
 8002850:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002852:	2a78      	cmp	r2, #120	; 0x78
 8002854:	d806      	bhi.n	8002864 <_printf_i+0x28>
 8002856:	2a62      	cmp	r2, #98	; 0x62
 8002858:	d808      	bhi.n	800286c <_printf_i+0x30>
 800285a:	2a00      	cmp	r2, #0
 800285c:	d100      	bne.n	8002860 <_printf_i+0x24>
 800285e:	e0c0      	b.n	80029e2 <_printf_i+0x1a6>
 8002860:	2a58      	cmp	r2, #88	; 0x58
 8002862:	d052      	beq.n	800290a <_printf_i+0xce>
 8002864:	0026      	movs	r6, r4
 8002866:	3642      	adds	r6, #66	; 0x42
 8002868:	7032      	strb	r2, [r6, #0]
 800286a:	e022      	b.n	80028b2 <_printf_i+0x76>
 800286c:	0010      	movs	r0, r2
 800286e:	3863      	subs	r0, #99	; 0x63
 8002870:	2815      	cmp	r0, #21
 8002872:	d8f7      	bhi.n	8002864 <_printf_i+0x28>
 8002874:	f7fd fc50 	bl	8000118 <__gnu_thumb1_case_shi>
 8002878:	001f0016 	.word	0x001f0016
 800287c:	fff6fff6 	.word	0xfff6fff6
 8002880:	fff6fff6 	.word	0xfff6fff6
 8002884:	fff6001f 	.word	0xfff6001f
 8002888:	fff6fff6 	.word	0xfff6fff6
 800288c:	00a8fff6 	.word	0x00a8fff6
 8002890:	009a0036 	.word	0x009a0036
 8002894:	fff6fff6 	.word	0xfff6fff6
 8002898:	fff600b9 	.word	0xfff600b9
 800289c:	fff60036 	.word	0xfff60036
 80028a0:	009efff6 	.word	0x009efff6
 80028a4:	0026      	movs	r6, r4
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	3642      	adds	r6, #66	; 0x42
 80028aa:	1d11      	adds	r1, r2, #4
 80028ac:	6019      	str	r1, [r3, #0]
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	7033      	strb	r3, [r6, #0]
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0a7      	b.n	8002a06 <_printf_i+0x1ca>
 80028b6:	6808      	ldr	r0, [r1, #0]
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	1d0a      	adds	r2, r1, #4
 80028bc:	0605      	lsls	r5, r0, #24
 80028be:	d50b      	bpl.n	80028d8 <_printf_i+0x9c>
 80028c0:	680d      	ldr	r5, [r1, #0]
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	2d00      	cmp	r5, #0
 80028c6:	da03      	bge.n	80028d0 <_printf_i+0x94>
 80028c8:	232d      	movs	r3, #45	; 0x2d
 80028ca:	9a04      	ldr	r2, [sp, #16]
 80028cc:	426d      	negs	r5, r5
 80028ce:	7013      	strb	r3, [r2, #0]
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <_printf_i+0x21c>)
 80028d2:	270a      	movs	r7, #10
 80028d4:	9303      	str	r3, [sp, #12]
 80028d6:	e032      	b.n	800293e <_printf_i+0x102>
 80028d8:	680d      	ldr	r5, [r1, #0]
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	0641      	lsls	r1, r0, #25
 80028de:	d5f1      	bpl.n	80028c4 <_printf_i+0x88>
 80028e0:	b22d      	sxth	r5, r5
 80028e2:	e7ef      	b.n	80028c4 <_printf_i+0x88>
 80028e4:	680d      	ldr	r5, [r1, #0]
 80028e6:	6819      	ldr	r1, [r3, #0]
 80028e8:	1d08      	adds	r0, r1, #4
 80028ea:	6018      	str	r0, [r3, #0]
 80028ec:	062e      	lsls	r6, r5, #24
 80028ee:	d501      	bpl.n	80028f4 <_printf_i+0xb8>
 80028f0:	680d      	ldr	r5, [r1, #0]
 80028f2:	e003      	b.n	80028fc <_printf_i+0xc0>
 80028f4:	066d      	lsls	r5, r5, #25
 80028f6:	d5fb      	bpl.n	80028f0 <_printf_i+0xb4>
 80028f8:	680d      	ldr	r5, [r1, #0]
 80028fa:	b2ad      	uxth	r5, r5
 80028fc:	4b56      	ldr	r3, [pc, #344]	; (8002a58 <_printf_i+0x21c>)
 80028fe:	270a      	movs	r7, #10
 8002900:	9303      	str	r3, [sp, #12]
 8002902:	2a6f      	cmp	r2, #111	; 0x6f
 8002904:	d117      	bne.n	8002936 <_printf_i+0xfa>
 8002906:	2708      	movs	r7, #8
 8002908:	e015      	b.n	8002936 <_printf_i+0xfa>
 800290a:	3145      	adds	r1, #69	; 0x45
 800290c:	700a      	strb	r2, [r1, #0]
 800290e:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <_printf_i+0x21c>)
 8002910:	9203      	str	r2, [sp, #12]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	6821      	ldr	r1, [r4, #0]
 8002916:	ca20      	ldmia	r2!, {r5}
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	0608      	lsls	r0, r1, #24
 800291c:	d550      	bpl.n	80029c0 <_printf_i+0x184>
 800291e:	07cb      	lsls	r3, r1, #31
 8002920:	d502      	bpl.n	8002928 <_printf_i+0xec>
 8002922:	2320      	movs	r3, #32
 8002924:	4319      	orrs	r1, r3
 8002926:	6021      	str	r1, [r4, #0]
 8002928:	2710      	movs	r7, #16
 800292a:	2d00      	cmp	r5, #0
 800292c:	d103      	bne.n	8002936 <_printf_i+0xfa>
 800292e:	2320      	movs	r3, #32
 8002930:	6822      	ldr	r2, [r4, #0]
 8002932:	439a      	bics	r2, r3
 8002934:	6022      	str	r2, [r4, #0]
 8002936:	0023      	movs	r3, r4
 8002938:	2200      	movs	r2, #0
 800293a:	3343      	adds	r3, #67	; 0x43
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	6863      	ldr	r3, [r4, #4]
 8002940:	60a3      	str	r3, [r4, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	db03      	blt.n	800294e <_printf_i+0x112>
 8002946:	2204      	movs	r2, #4
 8002948:	6821      	ldr	r1, [r4, #0]
 800294a:	4391      	bics	r1, r2
 800294c:	6021      	str	r1, [r4, #0]
 800294e:	2d00      	cmp	r5, #0
 8002950:	d102      	bne.n	8002958 <_printf_i+0x11c>
 8002952:	9e04      	ldr	r6, [sp, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00c      	beq.n	8002972 <_printf_i+0x136>
 8002958:	9e04      	ldr	r6, [sp, #16]
 800295a:	0028      	movs	r0, r5
 800295c:	0039      	movs	r1, r7
 800295e:	f7fd fc6b 	bl	8000238 <__aeabi_uidivmod>
 8002962:	9b03      	ldr	r3, [sp, #12]
 8002964:	3e01      	subs	r6, #1
 8002966:	5c5b      	ldrb	r3, [r3, r1]
 8002968:	7033      	strb	r3, [r6, #0]
 800296a:	002b      	movs	r3, r5
 800296c:	0005      	movs	r5, r0
 800296e:	429f      	cmp	r7, r3
 8002970:	d9f3      	bls.n	800295a <_printf_i+0x11e>
 8002972:	2f08      	cmp	r7, #8
 8002974:	d109      	bne.n	800298a <_printf_i+0x14e>
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	07db      	lsls	r3, r3, #31
 800297a:	d506      	bpl.n	800298a <_printf_i+0x14e>
 800297c:	6863      	ldr	r3, [r4, #4]
 800297e:	6922      	ldr	r2, [r4, #16]
 8002980:	4293      	cmp	r3, r2
 8002982:	dc02      	bgt.n	800298a <_printf_i+0x14e>
 8002984:	2330      	movs	r3, #48	; 0x30
 8002986:	3e01      	subs	r6, #1
 8002988:	7033      	strb	r3, [r6, #0]
 800298a:	9b04      	ldr	r3, [sp, #16]
 800298c:	1b9b      	subs	r3, r3, r6
 800298e:	6123      	str	r3, [r4, #16]
 8002990:	9b07      	ldr	r3, [sp, #28]
 8002992:	0021      	movs	r1, r4
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	9805      	ldr	r0, [sp, #20]
 8002998:	9b06      	ldr	r3, [sp, #24]
 800299a:	aa09      	add	r2, sp, #36	; 0x24
 800299c:	f7ff fede 	bl	800275c <_printf_common>
 80029a0:	1c43      	adds	r3, r0, #1
 80029a2:	d135      	bne.n	8002a10 <_printf_i+0x1d4>
 80029a4:	2001      	movs	r0, #1
 80029a6:	4240      	negs	r0, r0
 80029a8:	b00b      	add	sp, #44	; 0x2c
 80029aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ac:	2220      	movs	r2, #32
 80029ae:	6809      	ldr	r1, [r1, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	6022      	str	r2, [r4, #0]
 80029b4:	0022      	movs	r2, r4
 80029b6:	2178      	movs	r1, #120	; 0x78
 80029b8:	3245      	adds	r2, #69	; 0x45
 80029ba:	7011      	strb	r1, [r2, #0]
 80029bc:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <_printf_i+0x220>)
 80029be:	e7a7      	b.n	8002910 <_printf_i+0xd4>
 80029c0:	0648      	lsls	r0, r1, #25
 80029c2:	d5ac      	bpl.n	800291e <_printf_i+0xe2>
 80029c4:	b2ad      	uxth	r5, r5
 80029c6:	e7aa      	b.n	800291e <_printf_i+0xe2>
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	680d      	ldr	r5, [r1, #0]
 80029cc:	1d10      	adds	r0, r2, #4
 80029ce:	6949      	ldr	r1, [r1, #20]
 80029d0:	6018      	str	r0, [r3, #0]
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	062e      	lsls	r6, r5, #24
 80029d6:	d501      	bpl.n	80029dc <_printf_i+0x1a0>
 80029d8:	6019      	str	r1, [r3, #0]
 80029da:	e002      	b.n	80029e2 <_printf_i+0x1a6>
 80029dc:	066d      	lsls	r5, r5, #25
 80029de:	d5fb      	bpl.n	80029d8 <_printf_i+0x19c>
 80029e0:	8019      	strh	r1, [r3, #0]
 80029e2:	2300      	movs	r3, #0
 80029e4:	9e04      	ldr	r6, [sp, #16]
 80029e6:	6123      	str	r3, [r4, #16]
 80029e8:	e7d2      	b.n	8002990 <_printf_i+0x154>
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	1d11      	adds	r1, r2, #4
 80029ee:	6019      	str	r1, [r3, #0]
 80029f0:	6816      	ldr	r6, [r2, #0]
 80029f2:	2100      	movs	r1, #0
 80029f4:	0030      	movs	r0, r6
 80029f6:	6862      	ldr	r2, [r4, #4]
 80029f8:	f000 f832 	bl	8002a60 <memchr>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d001      	beq.n	8002a04 <_printf_i+0x1c8>
 8002a00:	1b80      	subs	r0, r0, r6
 8002a02:	6060      	str	r0, [r4, #4]
 8002a04:	6863      	ldr	r3, [r4, #4]
 8002a06:	6123      	str	r3, [r4, #16]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9a04      	ldr	r2, [sp, #16]
 8002a0c:	7013      	strb	r3, [r2, #0]
 8002a0e:	e7bf      	b.n	8002990 <_printf_i+0x154>
 8002a10:	6923      	ldr	r3, [r4, #16]
 8002a12:	0032      	movs	r2, r6
 8002a14:	9906      	ldr	r1, [sp, #24]
 8002a16:	9805      	ldr	r0, [sp, #20]
 8002a18:	9d07      	ldr	r5, [sp, #28]
 8002a1a:	47a8      	blx	r5
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d0c1      	beq.n	80029a4 <_printf_i+0x168>
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	079b      	lsls	r3, r3, #30
 8002a24:	d415      	bmi.n	8002a52 <_printf_i+0x216>
 8002a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a28:	68e0      	ldr	r0, [r4, #12]
 8002a2a:	4298      	cmp	r0, r3
 8002a2c:	dabc      	bge.n	80029a8 <_printf_i+0x16c>
 8002a2e:	0018      	movs	r0, r3
 8002a30:	e7ba      	b.n	80029a8 <_printf_i+0x16c>
 8002a32:	0022      	movs	r2, r4
 8002a34:	2301      	movs	r3, #1
 8002a36:	9906      	ldr	r1, [sp, #24]
 8002a38:	9805      	ldr	r0, [sp, #20]
 8002a3a:	9e07      	ldr	r6, [sp, #28]
 8002a3c:	3219      	adds	r2, #25
 8002a3e:	47b0      	blx	r6
 8002a40:	1c43      	adds	r3, r0, #1
 8002a42:	d0af      	beq.n	80029a4 <_printf_i+0x168>
 8002a44:	3501      	adds	r5, #1
 8002a46:	68e3      	ldr	r3, [r4, #12]
 8002a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	42ab      	cmp	r3, r5
 8002a4e:	dcf0      	bgt.n	8002a32 <_printf_i+0x1f6>
 8002a50:	e7e9      	b.n	8002a26 <_printf_i+0x1ea>
 8002a52:	2500      	movs	r5, #0
 8002a54:	e7f7      	b.n	8002a46 <_printf_i+0x20a>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	08002d0d 	.word	0x08002d0d
 8002a5c:	08002d1e 	.word	0x08002d1e

08002a60 <memchr>:
 8002a60:	b2c9      	uxtb	r1, r1
 8002a62:	1882      	adds	r2, r0, r2
 8002a64:	4290      	cmp	r0, r2
 8002a66:	d101      	bne.n	8002a6c <memchr+0xc>
 8002a68:	2000      	movs	r0, #0
 8002a6a:	4770      	bx	lr
 8002a6c:	7803      	ldrb	r3, [r0, #0]
 8002a6e:	428b      	cmp	r3, r1
 8002a70:	d0fb      	beq.n	8002a6a <memchr+0xa>
 8002a72:	3001      	adds	r0, #1
 8002a74:	e7f6      	b.n	8002a64 <memchr+0x4>

08002a76 <memcpy>:
 8002a76:	2300      	movs	r3, #0
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d100      	bne.n	8002a80 <memcpy+0xa>
 8002a7e:	bd10      	pop	{r4, pc}
 8002a80:	5ccc      	ldrb	r4, [r1, r3]
 8002a82:	54c4      	strb	r4, [r0, r3]
 8002a84:	3301      	adds	r3, #1
 8002a86:	e7f8      	b.n	8002a7a <memcpy+0x4>

08002a88 <memmove>:
 8002a88:	b510      	push	{r4, lr}
 8002a8a:	4288      	cmp	r0, r1
 8002a8c:	d902      	bls.n	8002a94 <memmove+0xc>
 8002a8e:	188b      	adds	r3, r1, r2
 8002a90:	4298      	cmp	r0, r3
 8002a92:	d303      	bcc.n	8002a9c <memmove+0x14>
 8002a94:	2300      	movs	r3, #0
 8002a96:	e007      	b.n	8002aa8 <memmove+0x20>
 8002a98:	5c8b      	ldrb	r3, [r1, r2]
 8002a9a:	5483      	strb	r3, [r0, r2]
 8002a9c:	3a01      	subs	r2, #1
 8002a9e:	d2fb      	bcs.n	8002a98 <memmove+0x10>
 8002aa0:	bd10      	pop	{r4, pc}
 8002aa2:	5ccc      	ldrb	r4, [r1, r3]
 8002aa4:	54c4      	strb	r4, [r0, r3]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1fa      	bne.n	8002aa2 <memmove+0x1a>
 8002aac:	e7f8      	b.n	8002aa0 <memmove+0x18>
	...

08002ab0 <_free_r>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	0005      	movs	r5, r0
 8002ab4:	2900      	cmp	r1, #0
 8002ab6:	d010      	beq.n	8002ada <_free_r+0x2a>
 8002ab8:	1f0c      	subs	r4, r1, #4
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	da00      	bge.n	8002ac2 <_free_r+0x12>
 8002ac0:	18e4      	adds	r4, r4, r3
 8002ac2:	0028      	movs	r0, r5
 8002ac4:	f000 f8d4 	bl	8002c70 <__malloc_lock>
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <_free_r+0x90>)
 8002aca:	6813      	ldr	r3, [r2, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <_free_r+0x2c>
 8002ad0:	6063      	str	r3, [r4, #4]
 8002ad2:	6014      	str	r4, [r2, #0]
 8002ad4:	0028      	movs	r0, r5
 8002ad6:	f000 f8d3 	bl	8002c80 <__malloc_unlock>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	42a3      	cmp	r3, r4
 8002ade:	d908      	bls.n	8002af2 <_free_r+0x42>
 8002ae0:	6821      	ldr	r1, [r4, #0]
 8002ae2:	1860      	adds	r0, r4, r1
 8002ae4:	4283      	cmp	r3, r0
 8002ae6:	d1f3      	bne.n	8002ad0 <_free_r+0x20>
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	1841      	adds	r1, r0, r1
 8002aee:	6021      	str	r1, [r4, #0]
 8002af0:	e7ee      	b.n	8002ad0 <_free_r+0x20>
 8002af2:	001a      	movs	r2, r3
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <_free_r+0x4e>
 8002afa:	42a3      	cmp	r3, r4
 8002afc:	d9f9      	bls.n	8002af2 <_free_r+0x42>
 8002afe:	6811      	ldr	r1, [r2, #0]
 8002b00:	1850      	adds	r0, r2, r1
 8002b02:	42a0      	cmp	r0, r4
 8002b04:	d10b      	bne.n	8002b1e <_free_r+0x6e>
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	1809      	adds	r1, r1, r0
 8002b0a:	1850      	adds	r0, r2, r1
 8002b0c:	6011      	str	r1, [r2, #0]
 8002b0e:	4283      	cmp	r3, r0
 8002b10:	d1e0      	bne.n	8002ad4 <_free_r+0x24>
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	1841      	adds	r1, r0, r1
 8002b18:	6011      	str	r1, [r2, #0]
 8002b1a:	6053      	str	r3, [r2, #4]
 8002b1c:	e7da      	b.n	8002ad4 <_free_r+0x24>
 8002b1e:	42a0      	cmp	r0, r4
 8002b20:	d902      	bls.n	8002b28 <_free_r+0x78>
 8002b22:	230c      	movs	r3, #12
 8002b24:	602b      	str	r3, [r5, #0]
 8002b26:	e7d5      	b.n	8002ad4 <_free_r+0x24>
 8002b28:	6821      	ldr	r1, [r4, #0]
 8002b2a:	1860      	adds	r0, r4, r1
 8002b2c:	4283      	cmp	r3, r0
 8002b2e:	d103      	bne.n	8002b38 <_free_r+0x88>
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	1841      	adds	r1, r0, r1
 8002b36:	6021      	str	r1, [r4, #0]
 8002b38:	6063      	str	r3, [r4, #4]
 8002b3a:	6054      	str	r4, [r2, #4]
 8002b3c:	e7ca      	b.n	8002ad4 <_free_r+0x24>
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	20000098 	.word	0x20000098

08002b44 <_malloc_r>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	2303      	movs	r3, #3
 8002b48:	1ccd      	adds	r5, r1, #3
 8002b4a:	439d      	bics	r5, r3
 8002b4c:	3508      	adds	r5, #8
 8002b4e:	0006      	movs	r6, r0
 8002b50:	2d0c      	cmp	r5, #12
 8002b52:	d21f      	bcs.n	8002b94 <_malloc_r+0x50>
 8002b54:	250c      	movs	r5, #12
 8002b56:	42a9      	cmp	r1, r5
 8002b58:	d81e      	bhi.n	8002b98 <_malloc_r+0x54>
 8002b5a:	0030      	movs	r0, r6
 8002b5c:	f000 f888 	bl	8002c70 <__malloc_lock>
 8002b60:	4925      	ldr	r1, [pc, #148]	; (8002bf8 <_malloc_r+0xb4>)
 8002b62:	680a      	ldr	r2, [r1, #0]
 8002b64:	0014      	movs	r4, r2
 8002b66:	2c00      	cmp	r4, #0
 8002b68:	d11a      	bne.n	8002ba0 <_malloc_r+0x5c>
 8002b6a:	4f24      	ldr	r7, [pc, #144]	; (8002bfc <_malloc_r+0xb8>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <_malloc_r+0x38>
 8002b72:	0021      	movs	r1, r4
 8002b74:	0030      	movs	r0, r6
 8002b76:	f000 f869 	bl	8002c4c <_sbrk_r>
 8002b7a:	6038      	str	r0, [r7, #0]
 8002b7c:	0029      	movs	r1, r5
 8002b7e:	0030      	movs	r0, r6
 8002b80:	f000 f864 	bl	8002c4c <_sbrk_r>
 8002b84:	1c43      	adds	r3, r0, #1
 8002b86:	d12b      	bne.n	8002be0 <_malloc_r+0x9c>
 8002b88:	230c      	movs	r3, #12
 8002b8a:	0030      	movs	r0, r6
 8002b8c:	6033      	str	r3, [r6, #0]
 8002b8e:	f000 f877 	bl	8002c80 <__malloc_unlock>
 8002b92:	e003      	b.n	8002b9c <_malloc_r+0x58>
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	dade      	bge.n	8002b56 <_malloc_r+0x12>
 8002b98:	230c      	movs	r3, #12
 8002b9a:	6033      	str	r3, [r6, #0]
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	1b5b      	subs	r3, r3, r5
 8002ba4:	d419      	bmi.n	8002bda <_malloc_r+0x96>
 8002ba6:	2b0b      	cmp	r3, #11
 8002ba8:	d903      	bls.n	8002bb2 <_malloc_r+0x6e>
 8002baa:	6023      	str	r3, [r4, #0]
 8002bac:	18e4      	adds	r4, r4, r3
 8002bae:	6025      	str	r5, [r4, #0]
 8002bb0:	e003      	b.n	8002bba <_malloc_r+0x76>
 8002bb2:	6863      	ldr	r3, [r4, #4]
 8002bb4:	42a2      	cmp	r2, r4
 8002bb6:	d10e      	bne.n	8002bd6 <_malloc_r+0x92>
 8002bb8:	600b      	str	r3, [r1, #0]
 8002bba:	0030      	movs	r0, r6
 8002bbc:	f000 f860 	bl	8002c80 <__malloc_unlock>
 8002bc0:	0020      	movs	r0, r4
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	300b      	adds	r0, #11
 8002bc6:	1d23      	adds	r3, r4, #4
 8002bc8:	4390      	bics	r0, r2
 8002bca:	1ac2      	subs	r2, r0, r3
 8002bcc:	4298      	cmp	r0, r3
 8002bce:	d0e6      	beq.n	8002b9e <_malloc_r+0x5a>
 8002bd0:	1a1b      	subs	r3, r3, r0
 8002bd2:	50a3      	str	r3, [r4, r2]
 8002bd4:	e7e3      	b.n	8002b9e <_malloc_r+0x5a>
 8002bd6:	6053      	str	r3, [r2, #4]
 8002bd8:	e7ef      	b.n	8002bba <_malloc_r+0x76>
 8002bda:	0022      	movs	r2, r4
 8002bdc:	6864      	ldr	r4, [r4, #4]
 8002bde:	e7c2      	b.n	8002b66 <_malloc_r+0x22>
 8002be0:	2303      	movs	r3, #3
 8002be2:	1cc4      	adds	r4, r0, #3
 8002be4:	439c      	bics	r4, r3
 8002be6:	42a0      	cmp	r0, r4
 8002be8:	d0e1      	beq.n	8002bae <_malloc_r+0x6a>
 8002bea:	1a21      	subs	r1, r4, r0
 8002bec:	0030      	movs	r0, r6
 8002bee:	f000 f82d 	bl	8002c4c <_sbrk_r>
 8002bf2:	1c43      	adds	r3, r0, #1
 8002bf4:	d1db      	bne.n	8002bae <_malloc_r+0x6a>
 8002bf6:	e7c7      	b.n	8002b88 <_malloc_r+0x44>
 8002bf8:	20000098 	.word	0x20000098
 8002bfc:	2000009c 	.word	0x2000009c

08002c00 <_realloc_r>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	0007      	movs	r7, r0
 8002c04:	000d      	movs	r5, r1
 8002c06:	0016      	movs	r6, r2
 8002c08:	2900      	cmp	r1, #0
 8002c0a:	d105      	bne.n	8002c18 <_realloc_r+0x18>
 8002c0c:	0011      	movs	r1, r2
 8002c0e:	f7ff ff99 	bl	8002b44 <_malloc_r>
 8002c12:	0004      	movs	r4, r0
 8002c14:	0020      	movs	r0, r4
 8002c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c18:	2a00      	cmp	r2, #0
 8002c1a:	d103      	bne.n	8002c24 <_realloc_r+0x24>
 8002c1c:	f7ff ff48 	bl	8002ab0 <_free_r>
 8002c20:	0034      	movs	r4, r6
 8002c22:	e7f7      	b.n	8002c14 <_realloc_r+0x14>
 8002c24:	f000 f834 	bl	8002c90 <_malloc_usable_size_r>
 8002c28:	002c      	movs	r4, r5
 8002c2a:	42b0      	cmp	r0, r6
 8002c2c:	d2f2      	bcs.n	8002c14 <_realloc_r+0x14>
 8002c2e:	0031      	movs	r1, r6
 8002c30:	0038      	movs	r0, r7
 8002c32:	f7ff ff87 	bl	8002b44 <_malloc_r>
 8002c36:	1e04      	subs	r4, r0, #0
 8002c38:	d0ec      	beq.n	8002c14 <_realloc_r+0x14>
 8002c3a:	0029      	movs	r1, r5
 8002c3c:	0032      	movs	r2, r6
 8002c3e:	f7ff ff1a 	bl	8002a76 <memcpy>
 8002c42:	0029      	movs	r1, r5
 8002c44:	0038      	movs	r0, r7
 8002c46:	f7ff ff33 	bl	8002ab0 <_free_r>
 8002c4a:	e7e3      	b.n	8002c14 <_realloc_r+0x14>

08002c4c <_sbrk_r>:
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	b570      	push	{r4, r5, r6, lr}
 8002c50:	4d06      	ldr	r5, [pc, #24]	; (8002c6c <_sbrk_r+0x20>)
 8002c52:	0004      	movs	r4, r0
 8002c54:	0008      	movs	r0, r1
 8002c56:	602b      	str	r3, [r5, #0]
 8002c58:	f7fd fdfa 	bl	8000850 <_sbrk>
 8002c5c:	1c43      	adds	r3, r0, #1
 8002c5e:	d103      	bne.n	8002c68 <_sbrk_r+0x1c>
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d000      	beq.n	8002c68 <_sbrk_r+0x1c>
 8002c66:	6023      	str	r3, [r4, #0]
 8002c68:	bd70      	pop	{r4, r5, r6, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	200000f8 	.word	0x200000f8

08002c70 <__malloc_lock>:
 8002c70:	b510      	push	{r4, lr}
 8002c72:	4802      	ldr	r0, [pc, #8]	; (8002c7c <__malloc_lock+0xc>)
 8002c74:	f000 f814 	bl	8002ca0 <__retarget_lock_acquire_recursive>
 8002c78:	bd10      	pop	{r4, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	20000100 	.word	0x20000100

08002c80 <__malloc_unlock>:
 8002c80:	b510      	push	{r4, lr}
 8002c82:	4802      	ldr	r0, [pc, #8]	; (8002c8c <__malloc_unlock+0xc>)
 8002c84:	f000 f80d 	bl	8002ca2 <__retarget_lock_release_recursive>
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	20000100 	.word	0x20000100

08002c90 <_malloc_usable_size_r>:
 8002c90:	1f0b      	subs	r3, r1, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	1f18      	subs	r0, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da01      	bge.n	8002c9e <_malloc_usable_size_r+0xe>
 8002c9a:	580b      	ldr	r3, [r1, r0]
 8002c9c:	18c0      	adds	r0, r0, r3
 8002c9e:	4770      	bx	lr

08002ca0 <__retarget_lock_acquire_recursive>:
 8002ca0:	4770      	bx	lr

08002ca2 <__retarget_lock_release_recursive>:
 8002ca2:	4770      	bx	lr

08002ca4 <_init>:
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002caa:	bc08      	pop	{r3}
 8002cac:	469e      	mov	lr, r3
 8002cae:	4770      	bx	lr

08002cb0 <_fini>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr
