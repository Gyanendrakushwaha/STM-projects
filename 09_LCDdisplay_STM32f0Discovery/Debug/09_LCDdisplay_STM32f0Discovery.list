
09_LCDdisplay_STM32f0Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b4c  08000b4c  00010b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b5c  08000b5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b5c  08000b5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b5c  08000b5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b5c  08000b5c  00010b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b60  08000b60  00010b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000b70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000b70  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000211f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b81  00000000  00000000  00022153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d8  00000000  00000000  00022cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000260  00000000  00000000  00022fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fefc  00000000  00000000  00023210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000390c  00000000  00000000  0003310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060154  00000000  00000000  00036a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00096b6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000864  00000000  00000000  00096bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000b34 	.word	0x08000b34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08000b34 	.word	0x08000b34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
void LCD_Command(uint8_t cmd);
void LCD_Data(uint8_t data);
void LCD_SendString(const char *str);

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    HAL_Init();
 8000224:	f000 f998 	bl	8000558 <HAL_Init>
    LCD_Init();
 8000228:	f000 f814 	bl	8000254 <LCD_Init>

    while (1)
    {
        LCD_SendString("Hello, STM32F0!");
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <main+0x30>)
 800022e:	0018      	movs	r0, r3
 8000230:	f000 f912 	bl	8000458 <LCD_SendString>
        HAL_Delay(1000);
 8000234:	23fa      	movs	r3, #250	; 0xfa
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	0018      	movs	r0, r3
 800023a:	f000 f9f1 	bl	8000620 <HAL_Delay>
        LCD_Command(0x01);  // Clear display
 800023e:	2001      	movs	r0, #1
 8000240:	f000 f872 	bl	8000328 <LCD_Command>
        HAL_Delay(1000);
 8000244:	23fa      	movs	r3, #250	; 0xfa
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f9e9 	bl	8000620 <HAL_Delay>
        LCD_SendString("Hello, STM32F0!");
 800024e:	e7ed      	b.n	800022c <main+0xc>
 8000250:	08000b4c 	.word	0x08000b4c

08000254 <LCD_Init>:
    }
}

void LCD_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	4b32      	ldr	r3, [pc, #200]	; (8000324 <LCD_Init+0xd0>)
 800025c:	695a      	ldr	r2, [r3, #20]
 800025e:	4b31      	ldr	r3, [pc, #196]	; (8000324 <LCD_Init+0xd0>)
 8000260:	2180      	movs	r1, #128	; 0x80
 8000262:	0289      	lsls	r1, r1, #10
 8000264:	430a      	orrs	r2, r1
 8000266:	615a      	str	r2, [r3, #20]
 8000268:	4b2e      	ldr	r3, [pc, #184]	; (8000324 <LCD_Init+0xd0>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	029b      	lsls	r3, r3, #10
 8000270:	4013      	ands	r3, r2
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	683b      	ldr	r3, [r7, #0]

    // Configure GPIO pins as output
    GPIO_InitStruct.Pin = LCD_RS_PIN | LCD_RW_PIN | LCD_EN_PIN | LCD_DATA_PIN4 | LCD_DATA_PIN5 | LCD_DATA_PIN6 | LCD_DATA_PIN7;
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	22f7      	movs	r2, #247	; 0xf7
 800027a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2201      	movs	r2, #1
 8000280:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(LCD_GPIO_PORT, &GPIO_InitStruct);
 8000288:	1d3a      	adds	r2, r7, #4
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	0011      	movs	r1, r2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fa9d 	bl	80007d0 <HAL_GPIO_Init>

    // Initialization sequence
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8000296:	2390      	movs	r3, #144	; 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2200      	movs	r2, #0
 800029c:	2101      	movs	r1, #1
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fc06 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 80002a4:	2390      	movs	r3, #144	; 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	2200      	movs	r2, #0
 80002aa:	2102      	movs	r1, #2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fbff 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 80002b2:	2390      	movs	r3, #144	; 0x90
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	2200      	movs	r2, #0
 80002b8:	2104      	movs	r1, #4
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fbf8 	bl	8000ab0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_DATA_PIN4 | LCD_DATA_PIN5 | LCD_DATA_PIN6 | LCD_DATA_PIN7, GPIO_PIN_RESET);
 80002c0:	2390      	movs	r3, #144	; 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2200      	movs	r2, #0
 80002c6:	21f0      	movs	r1, #240	; 0xf0
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fbf1 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 80002ce:	2028      	movs	r0, #40	; 0x28
 80002d0:	f000 f9a6 	bl	8000620 <HAL_Delay>

    LCD_Command(0x03);
 80002d4:	2003      	movs	r0, #3
 80002d6:	f000 f827 	bl	8000328 <LCD_Command>
    HAL_Delay(5);
 80002da:	2005      	movs	r0, #5
 80002dc:	f000 f9a0 	bl	8000620 <HAL_Delay>

    LCD_Command(0x03);
 80002e0:	2003      	movs	r0, #3
 80002e2:	f000 f821 	bl	8000328 <LCD_Command>
    HAL_Delay(5);
 80002e6:	2005      	movs	r0, #5
 80002e8:	f000 f99a 	bl	8000620 <HAL_Delay>

    LCD_Command(0x03);
 80002ec:	2003      	movs	r0, #3
 80002ee:	f000 f81b 	bl	8000328 <LCD_Command>
    HAL_Delay(5);
 80002f2:	2005      	movs	r0, #5
 80002f4:	f000 f994 	bl	8000620 <HAL_Delay>

    LCD_Command(0x02);
 80002f8:	2002      	movs	r0, #2
 80002fa:	f000 f815 	bl	8000328 <LCD_Command>

    LCD_Command(0x28);  // 4-bit data, 2-line display, 5x8 font
 80002fe:	2028      	movs	r0, #40	; 0x28
 8000300:	f000 f812 	bl	8000328 <LCD_Command>
    LCD_Command(0x08);  // Display off
 8000304:	2008      	movs	r0, #8
 8000306:	f000 f80f 	bl	8000328 <LCD_Command>
    LCD_Command(0x01);  // Clear display
 800030a:	2001      	movs	r0, #1
 800030c:	f000 f80c 	bl	8000328 <LCD_Command>
    LCD_Command(0x06);  // Entry mode set: increment cursor, no shift
 8000310:	2006      	movs	r0, #6
 8000312:	f000 f809 	bl	8000328 <LCD_Command>
    LCD_Command(0x0C);  // Display on, cursor off, blink off
 8000316:	200c      	movs	r0, #12
 8000318:	f000 f806 	bl	8000328 <LCD_Command>
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b006      	add	sp, #24
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40021000 	.word	0x40021000

08000328 <LCD_Command>:

void LCD_Command(uint8_t cmd)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	0002      	movs	r2, r0
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8000334:	2390      	movs	r3, #144	; 0x90
 8000336:	05db      	lsls	r3, r3, #23
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fbb7 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 8000342:	2390      	movs	r3, #144	; 0x90
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	2200      	movs	r2, #0
 8000348:	2102      	movs	r1, #2
 800034a:	0018      	movs	r0, r3
 800034c:	f000 fbb0 	bl	8000ab0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_DATA_PIN4 | LCD_DATA_PIN5 | LCD_DATA_PIN6 | LCD_DATA_PIN7, (cmd >> 4) & 0x0F);
 8000350:	1dfb      	adds	r3, r7, #7
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	091b      	lsrs	r3, r3, #4
 8000356:	b2da      	uxtb	r2, r3
 8000358:	2390      	movs	r3, #144	; 0x90
 800035a:	05db      	lsls	r3, r3, #23
 800035c:	21f0      	movs	r1, #240	; 0xf0
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fba6 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_EN_PIN, GPIO_PIN_SET);
 8000364:	2390      	movs	r3, #144	; 0x90
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	2201      	movs	r2, #1
 800036a:	2104      	movs	r1, #4
 800036c:	0018      	movs	r0, r3
 800036e:	f000 fb9f 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 8000372:	2390      	movs	r3, #144	; 0x90
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	2200      	movs	r2, #0
 8000378:	2104      	movs	r1, #4
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fb98 	bl	8000ab0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_DATA_PIN4 | LCD_DATA_PIN5 | LCD_DATA_PIN6 | LCD_DATA_PIN7, cmd & 0x0F);
 8000380:	1dfb      	adds	r3, r7, #7
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	220f      	movs	r2, #15
 8000386:	4013      	ands	r3, r2
 8000388:	b2da      	uxtb	r2, r3
 800038a:	2390      	movs	r3, #144	; 0x90
 800038c:	05db      	lsls	r3, r3, #23
 800038e:	21f0      	movs	r1, #240	; 0xf0
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fb8d 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_EN_PIN, GPIO_PIN_SET);
 8000396:	2390      	movs	r3, #144	; 0x90
 8000398:	05db      	lsls	r3, r3, #23
 800039a:	2201      	movs	r2, #1
 800039c:	2104      	movs	r1, #4
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 fb86 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 80003a4:	2390      	movs	r3, #144	; 0x90
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 fb7f 	bl	8000ab0 <HAL_GPIO_WritePin>

    HAL_Delay(1);  // Delay for command execution
 80003b2:	2001      	movs	r0, #1
 80003b4:	f000 f934 	bl	8000620 <HAL_Delay>
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b002      	add	sp, #8
 80003be:	bd80      	pop	{r7, pc}

080003c0 <LCD_Data>:

void LCD_Data(uint8_t data)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	0002      	movs	r2, r0
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_RS_PIN, GPIO_PIN_SET);
 80003cc:	2390      	movs	r3, #144	; 0x90
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	2201      	movs	r2, #1
 80003d2:	2101      	movs	r1, #1
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 fb6b 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 80003da:	2390      	movs	r3, #144	; 0x90
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	2200      	movs	r2, #0
 80003e0:	2102      	movs	r1, #2
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 fb64 	bl	8000ab0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_DATA_PIN4 | LCD_DATA_PIN5 | LCD_DATA_PIN6 | LCD_DATA_PIN7, (data >> 4) & 0x0F);
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	091b      	lsrs	r3, r3, #4
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	2390      	movs	r3, #144	; 0x90
 80003f2:	05db      	lsls	r3, r3, #23
 80003f4:	21f0      	movs	r1, #240	; 0xf0
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 fb5a 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_EN_PIN, GPIO_PIN_SET);
 80003fc:	2390      	movs	r3, #144	; 0x90
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	2201      	movs	r2, #1
 8000402:	2104      	movs	r1, #4
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fb53 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 800040a:	2390      	movs	r3, #144	; 0x90
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	2200      	movs	r2, #0
 8000410:	2104      	movs	r1, #4
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fb4c 	bl	8000ab0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_DATA_PIN4 | LCD_DATA_PIN5 | LCD_DATA_PIN6 | LCD_DATA_PIN7, data & 0x0F);
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	220f      	movs	r2, #15
 800041e:	4013      	ands	r3, r2
 8000420:	b2da      	uxtb	r2, r3
 8000422:	2390      	movs	r3, #144	; 0x90
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	21f0      	movs	r1, #240	; 0xf0
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fb41 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_EN_PIN, GPIO_PIN_SET);
 800042e:	2390      	movs	r3, #144	; 0x90
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	2201      	movs	r2, #1
 8000434:	2104      	movs	r1, #4
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fb3a 	bl	8000ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 800043c:	2390      	movs	r3, #144	; 0x90
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	2200      	movs	r2, #0
 8000442:	2104      	movs	r1, #4
 8000444:	0018      	movs	r0, r3
 8000446:	f000 fb33 	bl	8000ab0 <HAL_GPIO_WritePin>

    HAL_Delay(1);  // Delay for data write
 800044a:	2001      	movs	r0, #1
 800044c:	f000 f8e8 	bl	8000620 <HAL_Delay>
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b002      	add	sp, #8
 8000456:	bd80      	pop	{r7, pc}

08000458 <LCD_SendString>:

void LCD_SendString(const char *str)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
    while (*str)
 8000460:	e006      	b.n	8000470 <LCD_SendString+0x18>
    {
        LCD_Data(*str++);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	607a      	str	r2, [r7, #4]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	0018      	movs	r0, r3
 800046c:	f7ff ffa8 	bl	80003c0 <LCD_Data>
    while (*str)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f4      	bne.n	8000462 <LCD_SendString+0xa>
    }
}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x44>)
 800048c:	699a      	ldr	r2, [r3, #24]
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <HAL_MspInit+0x44>)
 8000490:	2101      	movs	r1, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	619a      	str	r2, [r3, #24]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <HAL_MspInit+0x44>)
 80004a4:	69da      	ldr	r2, [r3, #28]
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_MspInit+0x44>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	0549      	lsls	r1, r1, #21
 80004ac:	430a      	orrs	r2, r1
 80004ae:	61da      	str	r2, [r3, #28]
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_MspInit+0x44>)
 80004b2:	69da      	ldr	r2, [r3, #28]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	055b      	lsls	r3, r3, #21
 80004b8:	4013      	ands	r3, r2
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f0:	f000 f87a 	bl	80005e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000506:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000508:	f7ff fff7 	bl	80004fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000532:	f000 fadb 	bl	8000aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000536:	f7ff fe73 	bl	8000220 <main>

0800053a <LoopForever>:

LoopForever:
    b LoopForever
 800053a:	e7fe      	b.n	800053a <LoopForever>
  ldr   r0, =_estack
 800053c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000548:	08000b64 	.word	0x08000b64
  ldr r2, =_sbss
 800054c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000550:	2000002c 	.word	0x2000002c

08000554 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC1_COMP_IRQHandler>
	...

08000558 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <HAL_Init+0x24>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_Init+0x24>)
 8000562:	2110      	movs	r1, #16
 8000564:	430a      	orrs	r2, r1
 8000566:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000568:	2000      	movs	r0, #0
 800056a:	f000 f809 	bl	8000580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800056e:	f7ff ff89 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40022000 	.word	0x40022000

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <HAL_InitTick+0x5c>)
 800058a:	681c      	ldr	r4, [r3, #0]
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <HAL_InitTick+0x60>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	0019      	movs	r1, r3
 8000592:	23fa      	movs	r3, #250	; 0xfa
 8000594:	0098      	lsls	r0, r3, #2
 8000596:	f7ff fdb7 	bl	8000108 <__udivsi3>
 800059a:	0003      	movs	r3, r0
 800059c:	0019      	movs	r1, r3
 800059e:	0020      	movs	r0, r4
 80005a0:	f7ff fdb2 	bl	8000108 <__udivsi3>
 80005a4:	0003      	movs	r3, r0
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 f905 	bl	80007b6 <HAL_SYSTICK_Config>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005b0:	2301      	movs	r3, #1
 80005b2:	e00f      	b.n	80005d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d80b      	bhi.n	80005d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	2301      	movs	r3, #1
 80005be:	425b      	negs	r3, r3
 80005c0:	2200      	movs	r2, #0
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 f8e2 	bl	800078c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_InitTick+0x64>)
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80005ce:	2300      	movs	r3, #0
 80005d0:	e000      	b.n	80005d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
}
 80005d4:	0018      	movs	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b003      	add	sp, #12
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000008 	.word	0x20000008
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <HAL_IncTick+0x1c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	001a      	movs	r2, r3
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_IncTick+0x20>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	18d2      	adds	r2, r2, r3
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_IncTick+0x20>)
 80005fa:	601a      	str	r2, [r3, #0]
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	20000008 	.word	0x20000008
 8000608:	20000028 	.word	0x20000028

0800060c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <HAL_GetTick+0x10>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	0018      	movs	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000028 	.word	0x20000028

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000628:	f7ff fff0 	bl	800060c <HAL_GetTick>
 800062c:	0003      	movs	r3, r0
 800062e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3301      	adds	r3, #1
 8000638:	d005      	beq.n	8000646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_Delay+0x44>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	001a      	movs	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	189b      	adds	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	f7ff ffe0 	bl	800060c <HAL_GetTick>
 800064c:	0002      	movs	r2, r0
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	429a      	cmp	r2, r3
 8000656:	d8f7      	bhi.n	8000648 <HAL_Delay+0x28>
  {
  }
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b004      	add	sp, #16
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20000008 	.word	0x20000008

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	0002      	movs	r2, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b7f      	cmp	r3, #127	; 0x7f
 800067c:	d828      	bhi.n	80006d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800067e:	4a2f      	ldr	r2, [pc, #188]	; (800073c <__NVIC_SetPriority+0xd4>)
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b25b      	sxtb	r3, r3
 8000686:	089b      	lsrs	r3, r3, #2
 8000688:	33c0      	adds	r3, #192	; 0xc0
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	589b      	ldr	r3, [r3, r2]
 800068e:	1dfa      	adds	r2, r7, #7
 8000690:	7812      	ldrb	r2, [r2, #0]
 8000692:	0011      	movs	r1, r2
 8000694:	2203      	movs	r2, #3
 8000696:	400a      	ands	r2, r1
 8000698:	00d2      	lsls	r2, r2, #3
 800069a:	21ff      	movs	r1, #255	; 0xff
 800069c:	4091      	lsls	r1, r2
 800069e:	000a      	movs	r2, r1
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	401a      	ands	r2, r3
 80006a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	019b      	lsls	r3, r3, #6
 80006aa:	22ff      	movs	r2, #255	; 0xff
 80006ac:	401a      	ands	r2, r3
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	0018      	movs	r0, r3
 80006b4:	2303      	movs	r3, #3
 80006b6:	4003      	ands	r3, r0
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006bc:	481f      	ldr	r0, [pc, #124]	; (800073c <__NVIC_SetPriority+0xd4>)
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	089b      	lsrs	r3, r3, #2
 80006c6:	430a      	orrs	r2, r1
 80006c8:	33c0      	adds	r3, #192	; 0xc0
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006ce:	e031      	b.n	8000734 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <__NVIC_SetPriority+0xd8>)
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	0019      	movs	r1, r3
 80006d8:	230f      	movs	r3, #15
 80006da:	400b      	ands	r3, r1
 80006dc:	3b08      	subs	r3, #8
 80006de:	089b      	lsrs	r3, r3, #2
 80006e0:	3306      	adds	r3, #6
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	3304      	adds	r3, #4
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1dfa      	adds	r2, r7, #7
 80006ec:	7812      	ldrb	r2, [r2, #0]
 80006ee:	0011      	movs	r1, r2
 80006f0:	2203      	movs	r2, #3
 80006f2:	400a      	ands	r2, r1
 80006f4:	00d2      	lsls	r2, r2, #3
 80006f6:	21ff      	movs	r1, #255	; 0xff
 80006f8:	4091      	lsls	r1, r2
 80006fa:	000a      	movs	r2, r1
 80006fc:	43d2      	mvns	r2, r2
 80006fe:	401a      	ands	r2, r3
 8000700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	22ff      	movs	r2, #255	; 0xff
 8000708:	401a      	ands	r2, r3
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	0018      	movs	r0, r3
 8000710:	2303      	movs	r3, #3
 8000712:	4003      	ands	r3, r0
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000718:	4809      	ldr	r0, [pc, #36]	; (8000740 <__NVIC_SetPriority+0xd8>)
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	001c      	movs	r4, r3
 8000720:	230f      	movs	r3, #15
 8000722:	4023      	ands	r3, r4
 8000724:	3b08      	subs	r3, #8
 8000726:	089b      	lsrs	r3, r3, #2
 8000728:	430a      	orrs	r2, r1
 800072a:	3306      	adds	r3, #6
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	18c3      	adds	r3, r0, r3
 8000730:	3304      	adds	r3, #4
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b003      	add	sp, #12
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	e000e100 	.word	0xe000e100
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	045b      	lsls	r3, r3, #17
 8000754:	429a      	cmp	r2, r3
 8000756:	d301      	bcc.n	800075c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000758:	2301      	movs	r3, #1
 800075a:	e010      	b.n	800077e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <SysTick_Config+0x44>)
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	3a01      	subs	r2, #1
 8000762:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000764:	2301      	movs	r3, #1
 8000766:	425b      	negs	r3, r3
 8000768:	2103      	movs	r1, #3
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff ff7c 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x44>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x44>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	0018      	movs	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	210f      	movs	r1, #15
 8000798:	187b      	adds	r3, r7, r1
 800079a:	1c02      	adds	r2, r0, #0
 800079c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff ff5d 	bl	8000668 <__NVIC_SetPriority>
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b004      	add	sp, #16
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff ffbf 	bl	8000744 <SysTick_Config>
 80007c6:	0003      	movs	r3, r0
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b002      	add	sp, #8
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007de:	e14f      	b.n	8000a80 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2101      	movs	r1, #1
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4091      	lsls	r1, r2
 80007ea:	000a      	movs	r2, r1
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d100      	bne.n	80007f8 <HAL_GPIO_Init+0x28>
 80007f6:	e140      	b.n	8000a7a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	2203      	movs	r2, #3
 80007fe:	4013      	ands	r3, r2
 8000800:	2b01      	cmp	r3, #1
 8000802:	d005      	beq.n	8000810 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	2203      	movs	r2, #3
 800080a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800080c:	2b02      	cmp	r3, #2
 800080e:	d130      	bne.n	8000872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	2203      	movs	r2, #3
 800081c:	409a      	lsls	r2, r3
 800081e:	0013      	movs	r3, r2
 8000820:	43da      	mvns	r2, r3
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68da      	ldr	r2, [r3, #12]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	409a      	lsls	r2, r3
 8000832:	0013      	movs	r3, r2
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4313      	orrs	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000846:	2201      	movs	r2, #1
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	409a      	lsls	r2, r3
 800084c:	0013      	movs	r3, r2
 800084e:	43da      	mvns	r2, r3
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	4013      	ands	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	2201      	movs	r2, #1
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
 8000864:	0013      	movs	r3, r2
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4313      	orrs	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2203      	movs	r2, #3
 8000878:	4013      	ands	r3, r2
 800087a:	2b03      	cmp	r3, #3
 800087c:	d017      	beq.n	80008ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	409a      	lsls	r2, r3
 800088c:	0013      	movs	r3, r2
 800088e:	43da      	mvns	r2, r3
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	409a      	lsls	r2, r3
 80008a0:	0013      	movs	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2203      	movs	r2, #3
 80008b4:	4013      	ands	r3, r2
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d123      	bne.n	8000902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	08da      	lsrs	r2, r3, #3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3208      	adds	r2, #8
 80008c2:	0092      	lsls	r2, r2, #2
 80008c4:	58d3      	ldr	r3, [r2, r3]
 80008c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	2207      	movs	r2, #7
 80008cc:	4013      	ands	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	220f      	movs	r2, #15
 80008d2:	409a      	lsls	r2, r3
 80008d4:	0013      	movs	r3, r2
 80008d6:	43da      	mvns	r2, r3
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	4013      	ands	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	691a      	ldr	r2, [r3, #16]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	2107      	movs	r1, #7
 80008e6:	400b      	ands	r3, r1
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	409a      	lsls	r2, r3
 80008ec:	0013      	movs	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	08da      	lsrs	r2, r3, #3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3208      	adds	r2, #8
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	6939      	ldr	r1, [r7, #16]
 8000900:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	409a      	lsls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	43da      	mvns	r2, r3
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2203      	movs	r2, #3
 8000920:	401a      	ands	r2, r3
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	409a      	lsls	r2, r3
 8000928:	0013      	movs	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	23c0      	movs	r3, #192	; 0xc0
 800093c:	029b      	lsls	r3, r3, #10
 800093e:	4013      	ands	r3, r2
 8000940:	d100      	bne.n	8000944 <HAL_GPIO_Init+0x174>
 8000942:	e09a      	b.n	8000a7a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	4b54      	ldr	r3, [pc, #336]	; (8000a98 <HAL_GPIO_Init+0x2c8>)
 8000946:	699a      	ldr	r2, [r3, #24]
 8000948:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <HAL_GPIO_Init+0x2c8>)
 800094a:	2101      	movs	r1, #1
 800094c:	430a      	orrs	r2, r1
 800094e:	619a      	str	r2, [r3, #24]
 8000950:	4b51      	ldr	r3, [pc, #324]	; (8000a98 <HAL_GPIO_Init+0x2c8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	2201      	movs	r2, #1
 8000956:	4013      	ands	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800095c:	4a4f      	ldr	r2, [pc, #316]	; (8000a9c <HAL_GPIO_Init+0x2cc>)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3302      	adds	r3, #2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	589b      	ldr	r3, [r3, r2]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	2203      	movs	r2, #3
 800096e:	4013      	ands	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	220f      	movs	r2, #15
 8000974:	409a      	lsls	r2, r3
 8000976:	0013      	movs	r3, r2
 8000978:	43da      	mvns	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	2390      	movs	r3, #144	; 0x90
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	429a      	cmp	r2, r3
 8000988:	d013      	beq.n	80009b2 <HAL_GPIO_Init+0x1e2>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a44      	ldr	r2, [pc, #272]	; (8000aa0 <HAL_GPIO_Init+0x2d0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d00d      	beq.n	80009ae <HAL_GPIO_Init+0x1de>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a43      	ldr	r2, [pc, #268]	; (8000aa4 <HAL_GPIO_Init+0x2d4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d007      	beq.n	80009aa <HAL_GPIO_Init+0x1da>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a42      	ldr	r2, [pc, #264]	; (8000aa8 <HAL_GPIO_Init+0x2d8>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d101      	bne.n	80009a6 <HAL_GPIO_Init+0x1d6>
 80009a2:	2303      	movs	r3, #3
 80009a4:	e006      	b.n	80009b4 <HAL_GPIO_Init+0x1e4>
 80009a6:	2305      	movs	r3, #5
 80009a8:	e004      	b.n	80009b4 <HAL_GPIO_Init+0x1e4>
 80009aa:	2302      	movs	r3, #2
 80009ac:	e002      	b.n	80009b4 <HAL_GPIO_Init+0x1e4>
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_Init+0x1e4>
 80009b2:	2300      	movs	r3, #0
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	2103      	movs	r1, #3
 80009b8:	400a      	ands	r2, r1
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	4093      	lsls	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009c4:	4935      	ldr	r1, [pc, #212]	; (8000a9c <HAL_GPIO_Init+0x2cc>)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	3302      	adds	r3, #2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <HAL_GPIO_Init+0x2dc>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	43da      	mvns	r2, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	035b      	lsls	r3, r3, #13
 80009ea:	4013      	ands	r3, r2
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_GPIO_Init+0x2dc>)
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <HAL_GPIO_Init+0x2dc>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	43da      	mvns	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	039b      	lsls	r3, r3, #14
 8000a14:	4013      	ands	r3, r2
 8000a16:	d003      	beq.n	8000a20 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <HAL_GPIO_Init+0x2dc>)
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <HAL_GPIO_Init+0x2dc>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	029b      	lsls	r3, r3, #10
 8000a3e:	4013      	ands	r3, r2
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_GPIO_Init+0x2dc>)
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_GPIO_Init+0x2dc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	43da      	mvns	r2, r3
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	025b      	lsls	r3, r3, #9
 8000a68:	4013      	ands	r3, r2
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_GPIO_Init+0x2dc>)
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	40da      	lsrs	r2, r3
 8000a88:	1e13      	subs	r3, r2, #0
 8000a8a:	d000      	beq.n	8000a8e <HAL_GPIO_Init+0x2be>
 8000a8c:	e6a8      	b.n	80007e0 <HAL_GPIO_Init+0x10>
  } 
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b006      	add	sp, #24
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	48000400 	.word	0x48000400
 8000aa4:	48000800 	.word	0x48000800
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	40010400 	.word	0x40010400

08000ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	0008      	movs	r0, r1
 8000aba:	0011      	movs	r1, r2
 8000abc:	1cbb      	adds	r3, r7, #2
 8000abe:	1c02      	adds	r2, r0, #0
 8000ac0:	801a      	strh	r2, [r3, #0]
 8000ac2:	1c7b      	adds	r3, r7, #1
 8000ac4:	1c0a      	adds	r2, r1, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ac8:	1c7b      	adds	r3, r7, #1
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d004      	beq.n	8000ada <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ad0:	1cbb      	adds	r3, r7, #2
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ad8:	e003      	b.n	8000ae2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ada:	1cbb      	adds	r3, r7, #2
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <__libc_init_array>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	2600      	movs	r6, #0
 8000af0:	4d0c      	ldr	r5, [pc, #48]	; (8000b24 <__libc_init_array+0x38>)
 8000af2:	4c0d      	ldr	r4, [pc, #52]	; (8000b28 <__libc_init_array+0x3c>)
 8000af4:	1b64      	subs	r4, r4, r5
 8000af6:	10a4      	asrs	r4, r4, #2
 8000af8:	42a6      	cmp	r6, r4
 8000afa:	d109      	bne.n	8000b10 <__libc_init_array+0x24>
 8000afc:	2600      	movs	r6, #0
 8000afe:	f000 f819 	bl	8000b34 <_init>
 8000b02:	4d0a      	ldr	r5, [pc, #40]	; (8000b2c <__libc_init_array+0x40>)
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <__libc_init_array+0x44>)
 8000b06:	1b64      	subs	r4, r4, r5
 8000b08:	10a4      	asrs	r4, r4, #2
 8000b0a:	42a6      	cmp	r6, r4
 8000b0c:	d105      	bne.n	8000b1a <__libc_init_array+0x2e>
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	00b3      	lsls	r3, r6, #2
 8000b12:	58eb      	ldr	r3, [r5, r3]
 8000b14:	4798      	blx	r3
 8000b16:	3601      	adds	r6, #1
 8000b18:	e7ee      	b.n	8000af8 <__libc_init_array+0xc>
 8000b1a:	00b3      	lsls	r3, r6, #2
 8000b1c:	58eb      	ldr	r3, [r5, r3]
 8000b1e:	4798      	blx	r3
 8000b20:	3601      	adds	r6, #1
 8000b22:	e7f2      	b.n	8000b0a <__libc_init_array+0x1e>
 8000b24:	08000b5c 	.word	0x08000b5c
 8000b28:	08000b5c 	.word	0x08000b5c
 8000b2c:	08000b5c 	.word	0x08000b5c
 8000b30:	08000b60 	.word	0x08000b60

08000b34 <_init>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr

08000b40 <_fini>:
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b46:	bc08      	pop	{r3}
 8000b48:	469e      	mov	lr, r3
 8000b4a:	4770      	bx	lr
