
07_1_RTOS_stm32l475.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d90  08004d90  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004d90  08004d90  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d90  08004d90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d94  08004d94  00014d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041d0  20000078  08004e10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004248  08004e10  00024248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff29  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256f  00000000  00000000  0002ffd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00032540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00033148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027772  00000000  00000000  00033c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c831  00000000  00000000  0005b3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeac6  00000000  00000000  00067beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001566b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000361c  00000000  00000000  00156704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c9c 	.word	0x08004c9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004c9c 	.word	0x08004c9c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b086      	sub	sp, #24
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 fbcc 	bl	8000972 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f825 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f875 	bl	80002cc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task1", 200, "Hello World from Task-1", 2, &task1_handle);
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2302      	movs	r3, #2
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <main+0x4c>)
 80001ec:	22c8      	movs	r2, #200	; 0xc8
 80001ee:	490c      	ldr	r1, [pc, #48]	; (8000220 <main+0x50>)
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <main+0x54>)
 80001f2:	f002 f9ad 	bl	8002550 <xTaskCreate>
 80001f6:	60f8      	str	r0, [r7, #12]

    configASSERT(status == pdPASS);
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d00a      	beq.n	8000214 <main+0x44>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80001fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000202:	f383 8811 	msr	BASEPRI, r3
 8000206:	f3bf 8f6f 	isb	sy
 800020a:	f3bf 8f4f 	dsb	sy
 800020e:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000210:	bf00      	nop
 8000212:	e7fe      	b.n	8000212 <main+0x42>

    // Start the real time scheduler.
    vTaskStartScheduler();
 8000214:	f002 fb06 	bl	8002824 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000218:	e7fe      	b.n	8000218 <main+0x48>
 800021a:	bf00      	nop
 800021c:	08004cb4 	.word	0x08004cb4
 8000220:	08004ccc 	.word	0x08004ccc
 8000224:	08000741 	.word	0x08000741

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b096      	sub	sp, #88	; 0x58
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0314 	add.w	r3, r7, #20
 8000232:	2244      	movs	r2, #68	; 0x44
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f004 f854 	bl	80042e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800024a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800024e:	f000 fef7 	bl	8001040 <HAL_PWREx_ControlVoltageScaling>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000258:	f000 fa7a 	bl	8000750 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800025c:	2310      	movs	r3, #16
 800025e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000268:	2360      	movs	r3, #96	; 0x60
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026c:	2302      	movs	r3, #2
 800026e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000270:	2301      	movs	r3, #1
 8000272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000274:	2301      	movs	r3, #1
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000278:	2328      	movs	r3, #40	; 0x28
 800027a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800027c:	2307      	movs	r3, #7
 800027e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000280:	2302      	movs	r3, #2
 8000282:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000284:	2302      	movs	r3, #2
 8000286:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	4618      	mov	r0, r3
 800028e:	f000 ff2d 	bl	80010ec <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000298:	f000 fa5a 	bl	8000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2303      	movs	r3, #3
 80002a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002b0:	463b      	mov	r3, r7
 80002b2:	2104      	movs	r1, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 faf3 	bl	80018a0 <HAL_RCC_ClockConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002c0:	f000 fa46 	bl	8000750 <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3758      	adds	r7, #88	; 0x58
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	; 0x28
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002e2:	4bbc      	ldr	r3, [pc, #752]	; (80005d4 <MX_GPIO_Init+0x308>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	4abb      	ldr	r2, [pc, #748]	; (80005d4 <MX_GPIO_Init+0x308>)
 80002e8:	f043 0310 	orr.w	r3, r3, #16
 80002ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ee:	4bb9      	ldr	r3, [pc, #740]	; (80005d4 <MX_GPIO_Init+0x308>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	f003 0310 	and.w	r3, r3, #16
 80002f6:	613b      	str	r3, [r7, #16]
 80002f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fa:	4bb6      	ldr	r3, [pc, #728]	; (80005d4 <MX_GPIO_Init+0x308>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	4ab5      	ldr	r2, [pc, #724]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000306:	4bb3      	ldr	r3, [pc, #716]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	f003 0304 	and.w	r3, r3, #4
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	4bb0      	ldr	r3, [pc, #704]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	4aaf      	ldr	r2, [pc, #700]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031e:	4bad      	ldr	r3, [pc, #692]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4baa      	ldr	r3, [pc, #680]	; (80005d4 <MX_GPIO_Init+0x308>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4aa9      	ldr	r2, [pc, #676]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000330:	f043 0302 	orr.w	r3, r3, #2
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000336:	4ba7      	ldr	r3, [pc, #668]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	f003 0302 	and.w	r3, r3, #2
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000342:	4ba4      	ldr	r3, [pc, #656]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4aa3      	ldr	r2, [pc, #652]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000348:	f043 0308 	orr.w	r3, r3, #8
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034e:	4ba1      	ldr	r3, [pc, #644]	; (80005d4 <MX_GPIO_Init+0x308>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	f003 0308 	and.w	r3, r3, #8
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000360:	489d      	ldr	r0, [pc, #628]	; (80005d8 <MX_GPIO_Init+0x30c>)
 8000362:	f000 fe23 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f248 1104 	movw	r1, #33028	; 0x8104
 800036c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000370:	f000 fe1c 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000374:	2200      	movs	r2, #0
 8000376:	f24f 0114 	movw	r1, #61460	; 0xf014
 800037a:	4898      	ldr	r0, [pc, #608]	; (80005dc <MX_GPIO_Init+0x310>)
 800037c:	f000 fe16 	bl	8000fac <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f241 0181 	movw	r1, #4225	; 0x1081
 8000386:	4896      	ldr	r0, [pc, #600]	; (80005e0 <MX_GPIO_Init+0x314>)
 8000388:	f000 fe10 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000392:	4893      	ldr	r0, [pc, #588]	; (80005e0 <MX_GPIO_Init+0x314>)
 8000394:	f000 fe0a 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800039e:	4891      	ldr	r0, [pc, #580]	; (80005e4 <MX_GPIO_Init+0x318>)
 80003a0:	f000 fe04 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2120      	movs	r1, #32
 80003a8:	488c      	ldr	r0, [pc, #560]	; (80005dc <MX_GPIO_Init+0x310>)
 80003aa:	f000 fdff 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2101      	movs	r1, #1
 80003b2:	4889      	ldr	r0, [pc, #548]	; (80005d8 <MX_GPIO_Init+0x30c>)
 80003b4:	f000 fdfa 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80003b8:	f240 1315 	movw	r3, #277	; 0x115
 80003bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2300      	movs	r3, #0
 80003c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	4619      	mov	r1, r3
 80003d0:	4881      	ldr	r0, [pc, #516]	; (80005d8 <MX_GPIO_Init+0x30c>)
 80003d2:	f000 fc41 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80003d6:	236a      	movs	r3, #106	; 0x6a
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	487b      	ldr	r0, [pc, #492]	; (80005d8 <MX_GPIO_Init+0x30c>)
 80003ec:	f000 fc34 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80003f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	4877      	ldr	r0, [pc, #476]	; (80005e4 <MX_GPIO_Init+0x318>)
 8000408:	f000 fc26 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800040c:	233f      	movs	r3, #63	; 0x3f
 800040e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000410:	230b      	movs	r3, #11
 8000412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4619      	mov	r1, r3
 800041e:	4871      	ldr	r0, [pc, #452]	; (80005e4 <MX_GPIO_Init+0x318>)
 8000420:	f000 fc1a 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000424:	2303      	movs	r3, #3
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000428:	2302      	movs	r3, #2
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000430:	2303      	movs	r3, #3
 8000432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000434:	2308      	movs	r3, #8
 8000436:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	4619      	mov	r1, r3
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f000 fc09 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000446:	f248 1304 	movw	r3, #33028	; 0x8104
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4619      	mov	r1, r3
 800045e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000462:	f000 fbf9 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000466:	2308      	movs	r3, #8
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046a:	2302      	movs	r3, #2
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000476:	2301      	movs	r3, #1
 8000478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4619      	mov	r1, r3
 8000480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000484:	f000 fbe8 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000488:	2310      	movs	r3, #16
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800048c:	230b      	movs	r3, #11
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4619      	mov	r1, r3
 800049a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049e:	f000 fbdb 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80004a2:	23e0      	movs	r3, #224	; 0xe0
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ae:	2303      	movs	r3, #3
 80004b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004b2:	2305      	movs	r3, #5
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f000 fbca 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80004c4:	2301      	movs	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	4840      	ldr	r0, [pc, #256]	; (80005dc <MX_GPIO_Init+0x310>)
 80004da:	f000 fbbd 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80004de:	2302      	movs	r3, #2
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004e2:	230b      	movs	r3, #11
 80004e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	483a      	ldr	r0, [pc, #232]	; (80005dc <MX_GPIO_Init+0x310>)
 80004f2:	f000 fbb1 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80004f6:	f24f 0334 	movw	r3, #61492	; 0xf034
 80004fa:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	4619      	mov	r1, r3
 800050e:	4833      	ldr	r0, [pc, #204]	; (80005dc <MX_GPIO_Init+0x310>)
 8000510:	f000 fba2 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000514:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000526:	2306      	movs	r3, #6
 8000528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4619      	mov	r1, r3
 8000530:	4829      	ldr	r0, [pc, #164]	; (80005d8 <MX_GPIO_Init+0x30c>)
 8000532:	f000 fb91 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000536:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800053a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053c:	2302      	movs	r3, #2
 800053e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000544:	2303      	movs	r3, #3
 8000546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000548:	230a      	movs	r3, #10
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4619      	mov	r1, r3
 8000552:	4821      	ldr	r0, [pc, #132]	; (80005d8 <MX_GPIO_Init+0x30c>)
 8000554:	f000 fb80 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000558:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800055e:	2312      	movs	r3, #18
 8000560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000566:	2303      	movs	r3, #3
 8000568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800056a:	2304      	movs	r3, #4
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4819      	ldr	r0, [pc, #100]	; (80005dc <MX_GPIO_Init+0x310>)
 8000576:	f000 fb6f 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800057a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	2302      	movs	r3, #2
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000588:	2303      	movs	r3, #3
 800058a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800058c:	2307      	movs	r3, #7
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <MX_GPIO_Init+0x314>)
 8000598:	f000 fb5e 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800059c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80005a0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <MX_GPIO_Init+0x314>)
 80005b4:	f000 fb50 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80005b8:	f243 0381 	movw	r3, #12417	; 0x3081
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	e00a      	b.n	80005e8 <MX_GPIO_Init+0x31c>
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48001000 	.word	0x48001000
 80005dc:	48000400 	.word	0x48000400
 80005e0:	48000c00 	.word	0x48000c00
 80005e4:	48000800 	.word	0x48000800
 80005e8:	4852      	ldr	r0, [pc, #328]	; (8000734 <MX_GPIO_Init+0x468>)
 80005ea:	f000 fb35 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80005ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	484c      	ldr	r0, [pc, #304]	; (8000738 <MX_GPIO_Init+0x46c>)
 8000608:	f000 fb26 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800060c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000612:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	4845      	ldr	r0, [pc, #276]	; (8000738 <MX_GPIO_Init+0x46c>)
 8000624:	f000 fb18 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000640:	f000 fb0a 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000644:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000652:	2303      	movs	r3, #3
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000656:	230a      	movs	r3, #10
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f000 faf8 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000668:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800067a:	2306      	movs	r3, #6
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	482c      	ldr	r0, [pc, #176]	; (8000738 <MX_GPIO_Init+0x46c>)
 8000686:	f000 fae7 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800068a:	2302      	movs	r3, #2
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800069a:	2305      	movs	r3, #5
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4823      	ldr	r0, [pc, #140]	; (8000734 <MX_GPIO_Init+0x468>)
 80006a6:	f000 fad7 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80006aa:	2378      	movs	r3, #120	; 0x78
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ba:	2307      	movs	r3, #7
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	481b      	ldr	r0, [pc, #108]	; (8000734 <MX_GPIO_Init+0x468>)
 80006c6:	f000 fac7 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_LINK_UART1_TX_Pin ST_LINK_UART1_RX_Pin */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80006ca:	23c0      	movs	r3, #192	; 0xc0
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006da:	2307      	movs	r3, #7
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4815      	ldr	r0, [pc, #84]	; (800073c <MX_GPIO_Init+0x470>)
 80006e6:	f000 fab7 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80006ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f0:	2312      	movs	r3, #18
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006fc:	2304      	movs	r3, #4
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_GPIO_Init+0x470>)
 8000708:	f000 faa6 	bl	8000c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	2017      	movs	r0, #23
 8000712:	f000 fa6a 	bl	8000bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000716:	2017      	movs	r0, #23
 8000718:	f000 fa83 	bl	8000c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	2028      	movs	r0, #40	; 0x28
 8000722:	f000 fa62 	bl	8000bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000726:	2028      	movs	r0, #40	; 0x28
 8000728:	f000 fa7b 	bl	8000c22 <HAL_NVIC_EnableIRQ>

}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	48000c00 	.word	0x48000c00
 8000738:	48000800 	.word	0x48000800
 800073c:	48000400 	.word	0x48000400

08000740 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f003 fe41 	bl	80043d0 <puts>
 800074e:	e7fb      	b.n	8000748 <task1_handler+0x8>

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x44>)
 8000764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x44>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6613      	str	r3, [r2, #96]	; 0x60
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x44>)
 8000770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x44>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_MspInit+0x44>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6593      	str	r3, [r2, #88]	; 0x58
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_MspInit+0x44>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80007d4:	2020      	movs	r0, #32
 80007d6:	f000 fc01 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80007da:	2040      	movs	r0, #64	; 0x40
 80007dc:	f000 fbfe 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80007e0:	2080      	movs	r0, #128	; 0x80
 80007e2:	f000 fbfb 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80007e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007ea:	f000 fbf7 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80007f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007fa:	f000 fbef 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80007fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000802:	f000 fbeb 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000806:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800080a:	f000 fbe7 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800080e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000812:	f000 fbe3 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000816:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800081a:	f000 fbdf 	bl	8000fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}

08000822 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e00a      	b.n	800084a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000834:	f3af 8000 	nop.w
 8000838:	4601      	mov	r1, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	60ba      	str	r2, [r7, #8]
 8000840:	b2ca      	uxtb	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3301      	adds	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	dbf0      	blt.n	8000834 <_read+0x12>
	}

return len;
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e009      	b.n	8000882 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	60ba      	str	r2, [r7, #8]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbf1      	blt.n	800086e <_write+0x12>
	}
	return len;
 800088a:	687b      	ldr	r3, [r7, #4]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <_close>:

int _close(int file)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	return -1;
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008bc:	605a      	str	r2, [r3, #4]
	return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <_isatty>:

int _isatty(int file)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	return 1;
 80008d4:	2301      	movs	r3, #1
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b085      	sub	sp, #20
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
	return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000958 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000924:	f7ff ffea 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <LoopForever+0x6>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	; (8000960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LoopForever+0xe>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <LoopForever+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094e:	f003 fc97 	bl	8004280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000952:	f7ff fc3d 	bl	80001d0 <main>

08000956 <LoopForever>:

LoopForever:
    b LoopForever
 8000956:	e7fe      	b.n	8000956 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000958:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000964:	08004d98 	.word	0x08004d98
  ldr r2, =_sbss
 8000968:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800096c:	20004248 	.word	0x20004248

08000970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC1_2_IRQHandler>

08000972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f929 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000982:	2000      	movs	r0, #0
 8000984:	f000 f80e 	bl	80009a4 <HAL_InitTick>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	e001      	b.n	8000998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000994:	f7ff fee2 	bl	800075c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000998:	79fb      	ldrb	r3, [r7, #7]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <HAL_InitTick+0x6c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d023      	beq.n	8000a00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_InitTick+0x70>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_InitTick+0x6c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f935 	bl	8000c3e <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10f      	bne.n	80009fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d809      	bhi.n	80009f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f8ff 	bl	8000bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_InitTick+0x74>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	e007      	b.n	8000a04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
 80009f8:	e004      	b.n	8000a04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e001      	b.n	8000a04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000420c 	.word	0x2000420c

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <__NVIC_EnableIRQ+0x38>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff8e 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff29 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff3e 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff8e 	bl	8000b28 <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5d 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff31 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffa2 	bl	8000b90 <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c66:	e17f      	b.n	8000f68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8171 	beq.w	8000f62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d005      	beq.n	8000c98 <HAL_GPIO_Init+0x40>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d130      	bne.n	8000cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	f003 0201 	and.w	r2, r3, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d118      	bne.n	8000d38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	08db      	lsrs	r3, r3, #3
 8000d22:	f003 0201 	and.w	r2, r3, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d017      	beq.n	8000d74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d123      	bne.n	8000dc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	6939      	ldr	r1, [r7, #16]
 8000dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0203 	and.w	r2, r3, #3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80ac 	beq.w	8000f62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b5f      	ldr	r3, [pc, #380]	; (8000f88 <HAL_GPIO_Init+0x330>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	4a5e      	ldr	r2, [pc, #376]	; (8000f88 <HAL_GPIO_Init+0x330>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6613      	str	r3, [r2, #96]	; 0x60
 8000e16:	4b5c      	ldr	r3, [pc, #368]	; (8000f88 <HAL_GPIO_Init+0x330>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e22:	4a5a      	ldr	r2, [pc, #360]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e4c:	d025      	beq.n	8000e9a <HAL_GPIO_Init+0x242>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4f      	ldr	r2, [pc, #316]	; (8000f90 <HAL_GPIO_Init+0x338>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01f      	beq.n	8000e96 <HAL_GPIO_Init+0x23e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <HAL_GPIO_Init+0x33c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d019      	beq.n	8000e92 <HAL_GPIO_Init+0x23a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4d      	ldr	r2, [pc, #308]	; (8000f98 <HAL_GPIO_Init+0x340>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d013      	beq.n	8000e8e <HAL_GPIO_Init+0x236>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <HAL_GPIO_Init+0x344>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00d      	beq.n	8000e8a <HAL_GPIO_Init+0x232>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4b      	ldr	r2, [pc, #300]	; (8000fa0 <HAL_GPIO_Init+0x348>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d007      	beq.n	8000e86 <HAL_GPIO_Init+0x22e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4a      	ldr	r2, [pc, #296]	; (8000fa4 <HAL_GPIO_Init+0x34c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_GPIO_Init+0x22a>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e00c      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e82:	2307      	movs	r3, #7
 8000e84:	e00a      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x244>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eac:	4937      	ldr	r1, [pc, #220]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ede:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f32:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f5c:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <HAL_GPIO_Init+0x350>)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f47f ae78 	bne.w	8000c68 <HAL_GPIO_Init+0x10>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	371c      	adds	r7, #28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	48001000 	.word	0x48001000
 8000fa0:	48001400 	.word	0x48001400
 8000fa4:	48001800 	.word	0x48001800
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f806 	bl	800100c <HAL_GPIO_EXTI_Callback>
  }
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <HAL_PWREx_GetVoltageRange+0x18>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40007000 	.word	0x40007000

08001040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800104e:	d130      	bne.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800105c:	d038      	beq.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001066:	4a1e      	ldr	r2, [pc, #120]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2232      	movs	r2, #50	; 0x32
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9b      	lsrs	r3, r3, #18
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001084:	e002      	b.n	800108c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3b01      	subs	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001098:	d102      	bne.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f2      	bne.n	8001086 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ac:	d110      	bne.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e00f      	b.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010be:	d007      	beq.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40007000 	.word	0x40007000
 80010e4:	20000000 	.word	0x20000000
 80010e8:	431bde83 	.word	0x431bde83

080010ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e3c6      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010fe:	4ba1      	ldr	r3, [pc, #644]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001108:	4b9e      	ldr	r3, [pc, #632]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80e4 	beq.w	80012e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <HAL_RCC_OscConfig+0x4a>
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2b0c      	cmp	r3, #12
 800112a:	f040 808b 	bne.w	8001244 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2b01      	cmp	r3, #1
 8001132:	f040 8087 	bne.w	8001244 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001136:	4b93      	ldr	r3, [pc, #588]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_RCC_OscConfig+0x62>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e39e      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1a      	ldr	r2, [r3, #32]
 8001152:	4b8c      	ldr	r3, [pc, #560]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <HAL_RCC_OscConfig+0x7c>
 800115e:	4b89      	ldr	r3, [pc, #548]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001166:	e005      	b.n	8001174 <HAL_RCC_OscConfig+0x88>
 8001168:	4b86      	ldr	r3, [pc, #536]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800116a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001174:	4293      	cmp	r3, r2
 8001176:	d223      	bcs.n	80011c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fd1b 	bl	8001bb8 <RCC_SetFlashLatencyFromMSIRange>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e37f      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800118c:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a7c      	ldr	r2, [pc, #496]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4977      	ldr	r1, [pc, #476]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	4972      	ldr	r1, [pc, #456]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
 80011be:	e025      	b.n	800120c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c0:	4b70      	ldr	r3, [pc, #448]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a6f      	ldr	r2, [pc, #444]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	496a      	ldr	r1, [pc, #424]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011de:	4b69      	ldr	r3, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	4965      	ldr	r1, [pc, #404]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d109      	bne.n	800120c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fcdb 	bl	8001bb8 <RCC_SetFlashLatencyFromMSIRange>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e33f      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800120c:	f000 fc48 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001210:	4602      	mov	r2, r0
 8001212:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	091b      	lsrs	r3, r3, #4
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	495a      	ldr	r1, [pc, #360]	; (8001388 <HAL_RCC_OscConfig+0x29c>)
 800121e:	5ccb      	ldrb	r3, [r1, r3]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	fa22 f303 	lsr.w	r3, r2, r3
 8001228:	4a58      	ldr	r2, [pc, #352]	; (800138c <HAL_RCC_OscConfig+0x2a0>)
 800122a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800122c:	4b58      	ldr	r3, [pc, #352]	; (8001390 <HAL_RCC_OscConfig+0x2a4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fbb7 	bl	80009a4 <HAL_InitTick>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d052      	beq.n	80012e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	e323      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d032      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800124c:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001258:	f7ff fbe0 	bl	8000a1c <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001260:	f7ff fbdc 	bl	8000a1c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e30c      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001272:	4b44      	ldr	r3, [pc, #272]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a40      	ldr	r2, [pc, #256]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	493b      	ldr	r1, [pc, #236]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	4936      	ldr	r1, [pc, #216]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
 80012b0:	e01a      	b.n	80012e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012b2:	4b34      	ldr	r3, [pc, #208]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a33      	ldr	r2, [pc, #204]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012be:	f7ff fbad 	bl	8000a1c <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c6:	f7ff fba9 	bl	8000a1c <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e2d9      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x1da>
 80012e4:	e000      	b.n	80012e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d074      	beq.n	80013de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d005      	beq.n	8001306 <HAL_RCC_OscConfig+0x21a>
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	d10e      	bne.n	800131e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d10b      	bne.n	800131e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d064      	beq.n	80013dc <HAL_RCC_OscConfig+0x2f0>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d160      	bne.n	80013dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e2b6      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001326:	d106      	bne.n	8001336 <HAL_RCC_OscConfig+0x24a>
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a15      	ldr	r2, [pc, #84]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800132e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e01d      	b.n	8001372 <HAL_RCC_OscConfig+0x286>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133e:	d10c      	bne.n	800135a <HAL_RCC_OscConfig+0x26e>
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e00b      	b.n	8001372 <HAL_RCC_OscConfig+0x286>
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 800136c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001370:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d01c      	beq.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fb4f 	bl	8000a1c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001380:	e011      	b.n	80013a6 <HAL_RCC_OscConfig+0x2ba>
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	08004cec 	.word	0x08004cec
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fb42 	bl	8000a1c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e272      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a6:	4baf      	ldr	r3, [pc, #700]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x2a8>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fb32 	bl	8000a1c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb2e 	bl	8000a1c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e25e      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ce:	4ba5      	ldr	r3, [pc, #660]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x2d0>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d060      	beq.n	80014ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_OscConfig+0x310>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d119      	bne.n	800142a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d116      	bne.n	800142a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013fc:	4b99      	ldr	r3, [pc, #612]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x328>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e23b      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	4b93      	ldr	r3, [pc, #588]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	4990      	ldr	r1, [pc, #576]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001428:	e040      	b.n	80014ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d023      	beq.n	800147a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001432:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a8b      	ldr	r2, [pc, #556]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff faed 	bl	8000a1c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fae9 	bl	8000a1c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e219      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001458:	4b82      	ldr	r3, [pc, #520]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	061b      	lsls	r3, r3, #24
 8001472:	497c      	ldr	r1, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e018      	b.n	80014ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a79      	ldr	r2, [pc, #484]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff fac9 	bl	8000a1c <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fac5 	bl	8000a1c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1f5      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a0:	4b70      	ldr	r3, [pc, #448]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d03c      	beq.n	8001532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01c      	beq.n	80014fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c0:	4b68      	ldr	r3, [pc, #416]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80014c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c6:	4a67      	ldr	r2, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff faa4 	bl	8000a1c <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff faa0 	bl	8000a1c <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1d0      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ea:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0ef      	beq.n	80014d8 <HAL_RCC_OscConfig+0x3ec>
 80014f8:	e01b      	b.n	8001532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fa:	4b5a      	ldr	r3, [pc, #360]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80014fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001500:	4a58      	ldr	r2, [pc, #352]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150a:	f7ff fa87 	bl	8000a1c <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001512:	f7ff fa83 	bl	8000a1c <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e1b3      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001524:	4b4f      	ldr	r3, [pc, #316]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ef      	bne.n	8001512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80a6 	beq.w	800168c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001544:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10d      	bne.n	800156c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	4a43      	ldr	r2, [pc, #268]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155a:	6593      	str	r3, [r2, #88]	; 0x58
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001568:	2301      	movs	r3, #1
 800156a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156c:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <HAL_RCC_OscConfig+0x57c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d118      	bne.n	80015aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001578:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <HAL_RCC_OscConfig+0x57c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a3a      	ldr	r2, [pc, #232]	; (8001668 <HAL_RCC_OscConfig+0x57c>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001584:	f7ff fa4a 	bl	8000a1c <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158c:	f7ff fa46 	bl	8000a1c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e176      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x57c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4d8>
 80015b2:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80015b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b8:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c2:	e024      	b.n	800160e <HAL_RCC_OscConfig+0x522>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d110      	bne.n	80015ee <HAL_RCC_OscConfig+0x502>
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d2:	4a24      	ldr	r2, [pc, #144]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e2:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ec:	e00f      	b.n	800160e <HAL_RCC_OscConfig+0x522>
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80015f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001604:	4a17      	ldr	r2, [pc, #92]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001606:	f023 0304 	bic.w	r3, r3, #4
 800160a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d016      	beq.n	8001644 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fa01 	bl	8000a1c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff f9fd 	bl	8000a1c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e12b      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x578>)
 8001636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0ed      	beq.n	800161e <HAL_RCC_OscConfig+0x532>
 8001642:	e01a      	b.n	800167a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff f9ea 	bl	8000a1c <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800164a:	e00f      	b.n	800166c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff f9e6 	bl	8000a1c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d906      	bls.n	800166c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e114      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800166c:	4b89      	ldr	r3, [pc, #548]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1e8      	bne.n	800164c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800167a:	7ffb      	ldrb	r3, [r7, #31]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b84      	ldr	r3, [pc, #528]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	4a83      	ldr	r2, [pc, #524]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 8001686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80fa 	beq.w	800188a <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	2b02      	cmp	r3, #2
 800169c:	f040 80d0 	bne.w	8001840 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016a0:	4b7c      	ldr	r3, [pc, #496]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d130      	bne.n	8001716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	3b01      	subs	r3, #1
 80016c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d127      	bne.n	8001716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d11f      	bne.n	8001716 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016e0:	2a07      	cmp	r2, #7
 80016e2:	bf14      	ite	ne
 80016e4:	2201      	movne	r2, #1
 80016e6:	2200      	moveq	r2, #0
 80016e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d113      	bne.n	8001716 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	3b01      	subs	r3, #1
 80016fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d109      	bne.n	8001716 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	3b01      	subs	r3, #1
 8001710:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d06e      	beq.n	80017f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b0c      	cmp	r3, #12
 800171a:	d069      	beq.n	80017f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800171c:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001728:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0a9      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001738:	4b56      	ldr	r3, [pc, #344]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a55      	ldr	r2, [pc, #340]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800173e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001742:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001744:	f7ff f96a 	bl	8000a1c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff f966 	bl	8000a1c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e096      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175e:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176a:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <HAL_RCC_OscConfig+0x7ac>)
 8001770:	4013      	ands	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800177a:	3a01      	subs	r2, #1
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	4311      	orrs	r1, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001784:	0212      	lsls	r2, r2, #8
 8001786:	4311      	orrs	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800178c:	0852      	lsrs	r2, r2, #1
 800178e:	3a01      	subs	r2, #1
 8001790:	0552      	lsls	r2, r2, #21
 8001792:	4311      	orrs	r1, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001798:	0852      	lsrs	r2, r2, #1
 800179a:	3a01      	subs	r2, #1
 800179c:	0652      	lsls	r2, r2, #25
 800179e:	4311      	orrs	r1, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017a4:	0912      	lsrs	r2, r2, #4
 80017a6:	0452      	lsls	r2, r2, #17
 80017a8:	430a      	orrs	r2, r1
 80017aa:	493a      	ldr	r1, [pc, #232]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017b0:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a37      	ldr	r2, [pc, #220]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017bc:	4b35      	ldr	r3, [pc, #212]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a34      	ldr	r2, [pc, #208]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017c8:	f7ff f928 	bl	8000a1c <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f924 	bl	8000a1c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e054      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e2:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ee:	e04c      	b.n	800188a <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e04b      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d144      	bne.n	800188a <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a23      	ldr	r2, [pc, #140]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 8001806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4a20      	ldr	r2, [pc, #128]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 8001812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001816:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001818:	f7ff f900 	bl	8000a1c <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff f8fc 	bl	8000a1c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e02c      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x734>
 800183e:	e024      	b.n	800188a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d01f      	beq.n	8001886 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800184c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff f8e3 	bl	8000a1c <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff f8df 	bl	8000a1c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e00f      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	4905      	ldr	r1, [pc, #20]	; (8001894 <HAL_RCC_OscConfig+0x7a8>)
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <HAL_RCC_OscConfig+0x7b0>)
 8001880:	4013      	ands	r3, r2
 8001882:	60cb      	str	r3, [r1, #12]
 8001884:	e001      	b.n	800188a <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	f99d808c 	.word	0xf99d808c
 800189c:	feeefffc 	.word	0xfeeefffc

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0e7      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b75      	ldr	r3, [pc, #468]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d910      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 0207 	bic.w	r2, r3, #7
 80018ca:	4970      	ldr	r1, [pc, #448]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b6e      	ldr	r3, [pc, #440]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0cf      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d010      	beq.n	8001912 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	4b66      	ldr	r3, [pc, #408]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d908      	bls.n	8001912 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4960      	ldr	r1, [pc, #384]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d04c      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b5a      	ldr	r3, [pc, #360]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d121      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0a6      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193e:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d115      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e09a      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001956:	4b4e      	ldr	r3, [pc, #312]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e08e      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001966:	4b4a      	ldr	r3, [pc, #296]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e086      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4943      	ldr	r1, [pc, #268]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001988:	f7ff f848 	bl	8000a1c <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff f844 	bl	8000a1c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e06e      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d208      	bcs.n	80019e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	492b      	ldr	r1, [pc, #172]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e6:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d210      	bcs.n	8001a16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 0207 	bic.w	r2, r3, #7
 80019fc:	4923      	ldr	r1, [pc, #140]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e036      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4918      	ldr	r1, [pc, #96]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4910      	ldr	r1, [pc, #64]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a54:	f000 f824 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	490b      	ldr	r1, [pc, #44]	; (8001a94 <HAL_RCC_ClockConfig+0x1f4>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1f8>)
 8001a72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1fc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe ff93 	bl	80009a4 <HAL_InitTick>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a82:	7afb      	ldrb	r3, [r7, #11]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08004cec 	.word	0x08004cec
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aae:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d121      	bne.n	8001b12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d11e      	bne.n	8001b12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ae0:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e005      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001afc:	4a2b      	ldr	r2, [pc, #172]	; (8001bac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10d      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d102      	bne.n	8001b1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	e004      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d134      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d003      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0xac>
 8001b44:	e005      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b48:	617b      	str	r3, [r7, #20]
      break;
 8001b4a:	e005      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b4e:	617b      	str	r3, [r7, #20]
      break;
 8001b50:	e002      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	617b      	str	r3, [r7, #20]
      break;
 8001b56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	fb02 f203 	mul.w	r2, r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	0e5b      	lsrs	r3, r3, #25
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b98:	69bb      	ldr	r3, [r7, #24]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08004cfc 	.word	0x08004cfc
 8001bb0:	00f42400 	.word	0x00f42400
 8001bb4:	007a1200 	.word	0x007a1200

08001bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bd0:	f7ff fa28 	bl	8001024 <HAL_PWREx_GetVoltageRange>
 8001bd4:	6178      	str	r0, [r7, #20]
 8001bd6:	e014      	b.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	4a24      	ldr	r2, [pc, #144]	; (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6593      	str	r3, [r2, #88]	; 0x58
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bf0:	f7ff fa18 	bl	8001024 <HAL_PWREx_GetVoltageRange>
 8001bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c08:	d10b      	bne.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b80      	cmp	r3, #128	; 0x80
 8001c0e:	d919      	bls.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2ba0      	cmp	r3, #160	; 0xa0
 8001c14:	d902      	bls.n	8001c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c16:	2302      	movs	r3, #2
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e013      	b.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e010      	b.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b80      	cmp	r3, #128	; 0x80
 8001c26:	d902      	bls.n	8001c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c28:	2303      	movs	r3, #3
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e00a      	b.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b80      	cmp	r3, #128	; 0x80
 8001c32:	d102      	bne.n	8001c3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c34:	2302      	movs	r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	e004      	b.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b70      	cmp	r3, #112	; 0x70
 8001c3e:	d101      	bne.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c40:	2301      	movs	r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 0207 	bic.w	r2, r3, #7
 8001c4c:	4909      	ldr	r1, [pc, #36]	; (8001c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40022000 	.word	0x40022000

08001c78 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f103 0208 	add.w	r2, r3, #8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f103 0208 	add.w	r2, r3, #8
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f103 0208 	add.w	r2, r3, #8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d103      	bne.n	8001cf2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e00c      	b.n	8001d0c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e002      	b.n	8001d00 <vListInsert+0x2e>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d2f6      	bcs.n	8001cfa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6892      	ldr	r2, [r2, #8]
 8001d5a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6852      	ldr	r2, [r2, #4]
 8001d64:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d103      	bne.n	8001d78 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	1e5a      	subs	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001da2:	2301      	movs	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <xQueueGenericReset+0x2e>
        __asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	60fb      	str	r3, [r7, #12]
    }
 8001dc2:	bf00      	nop
 8001dc4:	e7fe      	b.n	8001dc4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d05d      	beq.n	8001e88 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d059      	beq.n	8001e88 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	2100      	movs	r1, #0
 8001dde:	fba3 2302 	umull	r2, r3, r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d000      	beq.n	8001de8 <xQueueGenericReset+0x50>
 8001de6:	2101      	movs	r1, #1
 8001de8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d14c      	bne.n	8001e88 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001dee:	f001 ffa3 	bl	8003d38 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	6939      	ldr	r1, [r7, #16]
 8001dfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	441a      	add	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6939      	ldr	r1, [r7, #16]
 8001e22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	441a      	add	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	22ff      	movs	r2, #255	; 0xff
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	22ff      	movs	r2, #255	; 0xff
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d114      	bne.n	8001e6e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01a      	beq.n	8001e82 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	3310      	adds	r3, #16
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 f855 	bl	8002f00 <xTaskRemoveFromEventList>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d012      	beq.n	8001e82 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <xQueueGenericReset+0x11c>)
 8001e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	e009      	b.n	8001e82 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	3310      	adds	r3, #16
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff00 	bl	8001c78 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	3324      	adds	r3, #36	; 0x24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fefb 	bl	8001c78 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001e82:	f001 ff89 	bl	8003d98 <vPortExitCritical>
 8001e86:	e001      	b.n	8001e8c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <xQueueGenericReset+0x110>
        __asm volatile
 8001e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e96:	f383 8811 	msr	BASEPRI, r3
 8001e9a:	f3bf 8f6f 	isb	sy
 8001e9e:	f3bf 8f4f 	dsb	sy
 8001ea2:	60bb      	str	r3, [r7, #8]
    }
 8001ea4:	bf00      	nop
 8001ea6:	e7fe      	b.n	8001ea6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001ea8:	697b      	ldr	r3, [r7, #20]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000ed04 	.word	0xe000ed04

08001eb8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d02e      	beq.n	8001f2e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d000      	beq.n	8001ee0 <xQueueGenericCreate+0x28>
 8001ede:	2101      	movs	r1, #1
 8001ee0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d123      	bne.n	8001f2e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001eee:	f113 0f55 	cmn.w	r3, #85	; 0x55
 8001ef2:	d81c      	bhi.n	8001f2e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	fb02 f303 	mul.w	r3, r2, r3
 8001efc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	3354      	adds	r3, #84	; 0x54
 8001f02:	4618      	mov	r0, r3
 8001f04:	f001 fff0 	bl	8003ee8 <pvPortMalloc>
 8001f08:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01c      	beq.n	8001f4a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	3354      	adds	r3, #84	; 0x54
 8001f18:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f1a:	79fa      	ldrb	r2, [r7, #7]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f814 	bl	8001f54 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001f2c:	e00d      	b.n	8001f4a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <xQueueGenericCreate+0x92>
        __asm volatile
 8001f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f38:	f383 8811 	msr	BASEPRI, r3
 8001f3c:	f3bf 8f6f 	isb	sy
 8001f40:	f3bf 8f4f 	dsb	sy
 8001f44:	613b      	str	r3, [r7, #16]
    }
 8001f46:	bf00      	nop
 8001f48:	e7fe      	b.n	8001f48 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
    }
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e002      	b.n	8001f76 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f82:	2101      	movs	r1, #1
 8001f84:	69b8      	ldr	r0, [r7, #24]
 8001f86:	f7ff ff07 	bl	8001d98 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2200      	movs	r2, #0
 8001f96:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <xQueueReceive+0x30>
        __asm volatile
 8001fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	623b      	str	r3, [r7, #32]
    }
 8001fcc:	bf00      	nop
 8001fce:	e7fe      	b.n	8001fce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <xQueueReceive+0x3e>
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <xQueueReceive+0x42>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <xQueueReceive+0x44>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10a      	bne.n	8001ffe <xQueueReceive+0x5e>
        __asm volatile
 8001fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fec:	f383 8811 	msr	BASEPRI, r3
 8001ff0:	f3bf 8f6f 	isb	sy
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	61fb      	str	r3, [r7, #28]
    }
 8001ffa:	bf00      	nop
 8001ffc:	e7fe      	b.n	8001ffc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ffe:	f001 f99f 	bl	8003340 <xTaskGetSchedulerState>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <xQueueReceive+0x6e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <xQueueReceive+0x72>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <xQueueReceive+0x74>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10a      	bne.n	800202e <xQueueReceive+0x8e>
        __asm volatile
 8002018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800201c:	f383 8811 	msr	BASEPRI, r3
 8002020:	f3bf 8f6f 	isb	sy
 8002024:	f3bf 8f4f 	dsb	sy
 8002028:	61bb      	str	r3, [r7, #24]
    }
 800202a:	bf00      	nop
 800202c:	e7fe      	b.n	800202c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800202e:	f001 fe83 	bl	8003d38 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01f      	beq.n	800207e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002042:	f000 f8f7 	bl	8002234 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	1e5a      	subs	r2, r3, #1
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00f      	beq.n	8002076 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	3310      	adds	r3, #16
 800205a:	4618      	mov	r0, r3
 800205c:	f000 ff50 	bl	8002f00 <xTaskRemoveFromEventList>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <xQueueReceive+0x1bc>)
 8002068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f3bf 8f4f 	dsb	sy
 8002072:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002076:	f001 fe8f 	bl	8003d98 <vPortExitCritical>
                return pdPASS;
 800207a:	2301      	movs	r3, #1
 800207c:	e069      	b.n	8002152 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d103      	bne.n	800208c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002084:	f001 fe88 	bl	8003d98 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002088:	2300      	movs	r3, #0
 800208a:	e062      	b.n	8002152 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	4618      	mov	r0, r3
 8002098:	f001 f808 	bl	80030ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800209c:	2301      	movs	r3, #1
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80020a0:	f001 fe7a 	bl	8003d98 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80020a4:	f000 fc10 	bl	80028c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80020a8:	f001 fe46 	bl	8003d38 <vPortEnterCritical>
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020b2:	b25b      	sxtb	r3, r3
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d103      	bne.n	80020c2 <xQueueReceive+0x122>
 80020ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d103      	bne.n	80020d8 <xQueueReceive+0x138>
 80020d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020d8:	f001 fe5e 	bl	8003d98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020dc:	1d3a      	adds	r2, r7, #4
 80020de:	f107 0310 	add.w	r3, r7, #16
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fff7 	bl	80030d8 <xTaskCheckForTimeOut>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d123      	bne.n	8002138 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020f2:	f000 f924 	bl	800233e <prvIsQueueEmpty>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d017      	beq.n	800212c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	3324      	adds	r3, #36	; 0x24
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fe91 	bl	8002e2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800210a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800210c:	f000 f8b8 	bl	8002280 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002110:	f000 fbe8 	bl	80028e4 <xTaskResumeAll>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d189      	bne.n	800202e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <xQueueReceive+0x1bc>)
 800211c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f3bf 8f4f 	dsb	sy
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	e780      	b.n	800202e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800212c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800212e:	f000 f8a7 	bl	8002280 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002132:	f000 fbd7 	bl	80028e4 <xTaskResumeAll>
 8002136:	e77a      	b.n	800202e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800213a:	f000 f8a1 	bl	8002280 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800213e:	f000 fbd1 	bl	80028e4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002144:	f000 f8fb 	bl	800233e <prvIsQueueEmpty>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	f43f af6f 	beq.w	800202e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002150:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002152:	4618      	mov	r0, r3
 8002154:	3730      	adds	r7, #48	; 0x30
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000ed04 	.word	0xe000ed04

08002160 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d14d      	bne.n	8002222 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4618      	mov	r0, r3
 800218c:	f001 f8f6 	bl	800337c <xTaskPriorityDisinherit>
 8002190:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e043      	b.n	8002222 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d119      	bne.n	80021d4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6858      	ldr	r0, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	461a      	mov	r2, r3
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	f002 f88c 	bl	80042c8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	441a      	add	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d32b      	bcc.n	8002222 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	e026      	b.n	8002222 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	68d8      	ldr	r0, [r3, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	461a      	mov	r2, r3
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	f002 f872 	bl	80042c8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	425b      	negs	r3, r3
 80021ee:	441a      	add	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	425b      	negs	r3, r3
 800220a:	441a      	add	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d105      	bne.n	8002222 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	3b01      	subs	r3, #1
 8002220:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800222a:	697b      	ldr	r3, [r7, #20]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d018      	beq.n	8002278 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	441a      	add	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	d303      	bcc.n	8002268 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68d9      	ldr	r1, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	461a      	mov	r2, r3
 8002272:	6838      	ldr	r0, [r7, #0]
 8002274:	f002 f828 	bl	80042c8 <memcpy>
    }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002288:	f001 fd56 	bl	8003d38 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002292:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002294:	e01e      	b.n	80022d4 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f8e6 	bl	8002470 <prvNotifyQueueSetContainer>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 80022aa:	f000 ff8b 	bl	80031c4 <vTaskMissedYield>
 80022ae:	e00d      	b.n	80022cc <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d012      	beq.n	80022de <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3324      	adds	r3, #36	; 0x24
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fe1f 	bl	8002f00 <xTaskRemoveFromEventList>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 80022c8:	f000 ff7c 	bl	80031c4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80022d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	dcdc      	bgt.n	8002296 <prvUnlockQueue+0x16>
 80022dc:	e000      	b.n	80022e0 <prvUnlockQueue+0x60>
                        break;
 80022de:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	22ff      	movs	r2, #255	; 0xff
 80022e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80022e8:	f001 fd56 	bl	8003d98 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80022ec:	f001 fd24 	bl	8003d38 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022f6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80022f8:	e011      	b.n	800231e <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d012      	beq.n	8002328 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3310      	adds	r3, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fdfa 	bl	8002f00 <xTaskRemoveFromEventList>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002312:	f000 ff57 	bl	80031c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002316:	7bbb      	ldrb	r3, [r7, #14]
 8002318:	3b01      	subs	r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800231e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002322:	2b00      	cmp	r3, #0
 8002324:	dce9      	bgt.n	80022fa <prvUnlockQueue+0x7a>
 8002326:	e000      	b.n	800232a <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002328:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002332:	f001 fd31 	bl	8003d98 <vPortExitCritical>
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002346:	f001 fcf7 	bl	8003d38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002352:	2301      	movs	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	e001      	b.n	800235c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800235c:	f001 fd1c 	bl	8003d98 <vPortExitCritical>

    return xReturn;
 8002360:	68fb      	ldr	r3, [r7, #12]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	60fb      	str	r3, [r7, #12]
    }
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d024      	beq.n	80023e6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e01e      	b.n	80023e0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <vQueueAddToRegistry+0x98>)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d105      	bne.n	80023be <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4a13      	ldr	r2, [pc, #76]	; (8002404 <vQueueAddToRegistry+0x98>)
 80023b8:	4413      	add	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
                    break;
 80023bc:	e013      	b.n	80023e6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <vQueueAddToRegistry+0x6e>
 80023c4:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <vQueueAddToRegistry+0x98>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <vQueueAddToRegistry+0x98>)
 80023d6:	4413      	add	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d9dd      	bls.n	80023a2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80023f8:	bf00      	nop
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	20004210 	.word	0x20004210

08002408 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002418:	f001 fc8e 	bl	8003d38 <vPortEnterCritical>
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002422:	b25b      	sxtb	r3, r3
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d103      	bne.n	8002432 <vQueueWaitForMessageRestricted+0x2a>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002438:	b25b      	sxtb	r3, r3
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243e:	d103      	bne.n	8002448 <vQueueWaitForMessageRestricted+0x40>
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002448:	f001 fca6 	bl	8003d98 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3324      	adds	r3, #36	; 0x24
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fd09 	bl	8002e74 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff0c 	bl	8002280 <prvUnlockQueue>
    }
 8002468:	bf00      	nop
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <prvNotifyQueueSetContainer+0x2e>
        __asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	617b      	str	r3, [r7, #20]
    }
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d30a      	bcc.n	80024c0 <prvNotifyQueueSetContainer+0x50>
        __asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	613b      	str	r3, [r7, #16]
    }
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <prvNotifyQueueSetContainer+0x4e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d23c      	bcs.n	8002546 <prvNotifyQueueSetContainer+0xd6>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024d2:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2200      	movs	r2, #0
 80024d8:	4619      	mov	r1, r3
 80024da:	6a38      	ldr	r0, [r7, #32]
 80024dc:	f7ff fe40 	bl	8002160 <prvCopyDataToQueue>
 80024e0:	6278      	str	r0, [r7, #36]	; 0x24

            if( cTxLock == queueUNLOCKED )
 80024e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d10e      	bne.n	800250a <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d028      	beq.n	8002546 <prvNotifyQueueSetContainer+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	3324      	adds	r3, #36	; 0x24
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fd01 	bl	8002f00 <xTaskRemoveFromEventList>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <prvNotifyQueueSetContainer+0xd6>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002504:	2301      	movs	r3, #1
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
 8002508:	e01d      	b.n	8002546 <prvNotifyQueueSetContainer+0xd6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 800250a:	f000 faf7 	bl	8002afc <uxTaskGetNumberOfTasks>
 800250e:	61b8      	str	r0, [r7, #24]
 8002510:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	429a      	cmp	r2, r3
 8002518:	d915      	bls.n	8002546 <prvNotifyQueueSetContainer+0xd6>
 800251a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800251e:	2b7f      	cmp	r3, #127	; 0x7f
 8002520:	d10a      	bne.n	8002538 <prvNotifyQueueSetContainer+0xc8>
        __asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	60fb      	str	r3, [r7, #12]
    }
 8002534:	bf00      	nop
 8002536:	e7fe      	b.n	8002536 <prvNotifyQueueSetContainer+0xc6>
 8002538:	7ffb      	ldrb	r3, [r7, #31]
 800253a:	3301      	adds	r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	b25a      	sxtb	r2, r3
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002548:	4618      	mov	r0, r3
 800254a:	3728      	adds	r7, #40	; 0x28
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af04      	add	r7, sp, #16
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4618      	mov	r0, r3
 8002566:	f001 fcbf 	bl	8003ee8 <pvPortMalloc>
 800256a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d013      	beq.n	800259a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002572:	2068      	movs	r0, #104	; 0x68
 8002574:	f001 fcb8 	bl	8003ee8 <pvPortMalloc>
 8002578:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002580:	2268      	movs	r2, #104	; 0x68
 8002582:	2100      	movs	r1, #0
 8002584:	69f8      	ldr	r0, [r7, #28]
 8002586:	f001 fead 	bl	80042e4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
 8002590:	e005      	b.n	800259e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f001 fd62 	bl	800405c <vPortFree>
 8002598:	e001      	b.n	800259e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9303      	str	r3, [sp, #12]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	9302      	str	r3, [sp, #8]
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f80e 	bl	80025dc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80025c0:	69f8      	ldr	r0, [r7, #28]
 80025c2:	f000 f899 	bl	80026f8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e002      	b.n	80025d2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80025d2:	69bb      	ldr	r3, [r7, #24]
    }
 80025d4:	4618      	mov	r0, r3
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	461a      	mov	r2, r3
 80025f4:	21a5      	movs	r1, #165	; 0xa5
 80025f6:	f001 fe75 	bl	80042e4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002604:	3b01      	subs	r3, #1
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f023 0307 	bic.w	r3, r3, #7
 8002612:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <prvInitialiseNewTask+0x58>
        __asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	617b      	str	r3, [r7, #20]
    }
 8002630:	bf00      	nop
 8002632:	e7fe      	b.n	8002632 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01e      	beq.n	8002678 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e012      	b.n	8002666 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	7819      	ldrb	r1, [r3, #0]
 8002648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	3334      	adds	r3, #52	; 0x34
 8002650:	460a      	mov	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	3301      	adds	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	2b09      	cmp	r3, #9
 800266a:	d9e9      	bls.n	8002640 <prvInitialiseNewTask+0x64>
 800266c:	e000      	b.n	8002670 <prvInitialiseNewTask+0x94>
            {
                break;
 800266e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	2b04      	cmp	r3, #4
 800267c:	d90a      	bls.n	8002694 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002682:	f383 8811 	msr	BASEPRI, r3
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	613b      	str	r3, [r7, #16]
    }
 8002690:	bf00      	nop
 8002692:	e7fe      	b.n	8002692 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	2b04      	cmp	r3, #4
 8002698:	d901      	bls.n	800269e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800269a:	2304      	movs	r3, #4
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	3304      	adds	r3, #4
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fb02 	bl	8001cb8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	3318      	adds	r3, #24
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fafd 	bl	8001cb8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	f1c3 0205 	rsb	r2, r3, #5
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	68f9      	ldr	r1, [r7, #12]
 80026d8:	69b8      	ldr	r0, [r7, #24]
 80026da:	f001 f9fb 	bl	8003ad4 <pxPortInitialiseStack>
 80026de:	4602      	mov	r2, r0
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026f0:	bf00      	nop
 80026f2:	3720      	adds	r7, #32
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002700:	f001 fb1a 	bl	8003d38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002704:	4b40      	ldr	r3, [pc, #256]	; (8002808 <prvAddNewTaskToReadyList+0x110>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	4a3f      	ldr	r2, [pc, #252]	; (8002808 <prvAddNewTaskToReadyList+0x110>)
 800270c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800270e:	4b3f      	ldr	r3, [pc, #252]	; (800280c <prvAddNewTaskToReadyList+0x114>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002716:	4a3d      	ldr	r2, [pc, #244]	; (800280c <prvAddNewTaskToReadyList+0x114>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <prvAddNewTaskToReadyList+0x110>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d110      	bne.n	8002746 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002724:	f000 fd72 	bl	800320c <prvInitialiseTaskLists>
 8002728:	e00d      	b.n	8002746 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <prvAddNewTaskToReadyList+0x118>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002732:	4b36      	ldr	r3, [pc, #216]	; (800280c <prvAddNewTaskToReadyList+0x114>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	429a      	cmp	r2, r3
 800273e:	d802      	bhi.n	8002746 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002740:	4a32      	ldr	r2, [pc, #200]	; (800280c <prvAddNewTaskToReadyList+0x114>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002746:	4b33      	ldr	r3, [pc, #204]	; (8002814 <prvAddNewTaskToReadyList+0x11c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	4a31      	ldr	r2, [pc, #196]	; (8002814 <prvAddNewTaskToReadyList+0x11c>)
 800274e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002750:	4b30      	ldr	r3, [pc, #192]	; (8002814 <prvAddNewTaskToReadyList+0x11c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <prvAddNewTaskToReadyList+0x120>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	4a2c      	ldr	r2, [pc, #176]	; (8002818 <prvAddNewTaskToReadyList+0x120>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276e:	492b      	ldr	r1, [pc, #172]	; (800281c <prvAddNewTaskToReadyList+0x124>)
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3304      	adds	r3, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	3204      	adds	r2, #4
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	1d1a      	adds	r2, r3, #4
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4a1b      	ldr	r2, [pc, #108]	; (800281c <prvAddNewTaskToReadyList+0x124>)
 80027ae:	441a      	add	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	615a      	str	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	4918      	ldr	r1, [pc, #96]	; (800281c <prvAddNewTaskToReadyList+0x124>)
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	1c59      	adds	r1, r3, #1
 80027c8:	4814      	ldr	r0, [pc, #80]	; (800281c <prvAddNewTaskToReadyList+0x124>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4403      	add	r3, r0
 80027d4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80027d6:	f001 fadf 	bl	8003d98 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <prvAddNewTaskToReadyList+0x118>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00e      	beq.n	8002800 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <prvAddNewTaskToReadyList+0x114>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <prvAddNewTaskToReadyList+0x128>)
 80027f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	2000016c 	.word	0x2000016c
 800280c:	20000094 	.word	0x20000094
 8002810:	20000178 	.word	0x20000178
 8002814:	20000188 	.word	0x20000188
 8002818:	20000174 	.word	0x20000174
 800281c:	20000098 	.word	0x20000098
 8002820:	e000ed04 	.word	0xe000ed04

08002824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <vTaskStartScheduler+0x88>)
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	2300      	movs	r3, #0
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	2300      	movs	r3, #0
 8002834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002838:	491d      	ldr	r1, [pc, #116]	; (80028b0 <vTaskStartScheduler+0x8c>)
 800283a:	481e      	ldr	r0, [pc, #120]	; (80028b4 <vTaskStartScheduler+0x90>)
 800283c:	f7ff fe88 	bl	8002550 <xTaskCreate>
 8002840:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d102      	bne.n	800284e <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 8002848:	f000 fec0 	bl	80035cc <xTimerCreateTimerTask>
 800284c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d116      	bne.n	8002882 <vTaskStartScheduler+0x5e>
        __asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	60bb      	str	r3, [r7, #8]
    }
 8002866:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <vTaskStartScheduler+0x94>)
 800286a:	f04f 32ff 	mov.w	r2, #4294967295
 800286e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <vTaskStartScheduler+0x98>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <vTaskStartScheduler+0x9c>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800287c:	f001 f9ba 	bl	8003bf4 <xPortStartScheduler>
 8002880:	e00e      	b.n	80028a0 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d10a      	bne.n	80028a0 <vTaskStartScheduler+0x7c>
        __asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	607b      	str	r3, [r7, #4]
    }
 800289c:	bf00      	nop
 800289e:	e7fe      	b.n	800289e <vTaskStartScheduler+0x7a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <vTaskStartScheduler+0xa0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000190 	.word	0x20000190
 80028b0:	08004cd4 	.word	0x08004cd4
 80028b4:	080031dd 	.word	0x080031dd
 80028b8:	2000018c 	.word	0x2000018c
 80028bc:	20000178 	.word	0x20000178
 80028c0:	20000170 	.word	0x20000170
 80028c4:	2000000c 	.word	0x2000000c

080028c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <vTaskSuspendAll+0x18>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <vTaskSuspendAll+0x18>)
 80028d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	20000194 	.word	0x20000194

080028e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80028f2:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <xTaskResumeAll+0x1d4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <xTaskResumeAll+0x2c>
        __asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	607b      	str	r3, [r7, #4]
    }
 800290c:	bf00      	nop
 800290e:	e7fe      	b.n	800290e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002910:	f001 fa12 	bl	8003d38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002914:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <xTaskResumeAll+0x1d4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	4a67      	ldr	r2, [pc, #412]	; (8002ab8 <xTaskResumeAll+0x1d4>)
 800291c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800291e:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <xTaskResumeAll+0x1d4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 80c0 	bne.w	8002aa8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002928:	4b64      	ldr	r3, [pc, #400]	; (8002abc <xTaskResumeAll+0x1d8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80bb 	beq.w	8002aa8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002932:	e08a      	b.n	8002a4a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002934:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <xTaskResumeAll+0x1dc>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	6a12      	ldr	r2, [r2, #32]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	69d2      	ldr	r2, [r2, #28]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3318      	adds	r3, #24
 800295e:	429a      	cmp	r2, r3
 8002960:	d103      	bne.n	800296a <xTaskResumeAll+0x86>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	6a1a      	ldr	r2, [r3, #32]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	2200      	movs	r2, #0
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	1e5a      	subs	r2, r3, #1
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	68d2      	ldr	r2, [r2, #12]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	6892      	ldr	r2, [r2, #8]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	3304      	adds	r3, #4
 800299c:	429a      	cmp	r2, r3
 800299e:	d103      	bne.n	80029a8 <xTaskResumeAll+0xc4>
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1e5a      	subs	r2, r3, #1
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	2201      	movs	r2, #1
 80029be:	409a      	lsls	r2, r3
 80029c0:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <xTaskResumeAll+0x1e0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	4a3f      	ldr	r2, [pc, #252]	; (8002ac4 <xTaskResumeAll+0x1e0>)
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ce:	493e      	ldr	r1, [pc, #248]	; (8002ac8 <xTaskResumeAll+0x1e4>)
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	3304      	adds	r3, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	3204      	adds	r2, #4
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	1d1a      	adds	r2, r3, #4
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <xTaskResumeAll+0x1e4>)
 8002a0e:	441a      	add	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	615a      	str	r2, [r3, #20]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	492b      	ldr	r1, [pc, #172]	; (8002ac8 <xTaskResumeAll+0x1e4>)
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	1c59      	adds	r1, r3, #1
 8002a28:	4827      	ldr	r0, [pc, #156]	; (8002ac8 <xTaskResumeAll+0x1e4>)
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4403      	add	r3, r0
 8002a34:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <xTaskResumeAll+0x1e8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d302      	bcc.n	8002a4a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <xTaskResumeAll+0x1ec>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <xTaskResumeAll+0x1dc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f af70 	bne.w	8002934 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a5a:	f000 fc55 	bl	8003308 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <xTaskResumeAll+0x1f0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d010      	beq.n	8002a8c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a6a:	f000 f853 	bl	8002b14 <xTaskIncrementTick>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <xTaskResumeAll+0x1ec>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f1      	bne.n	8002a6a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <xTaskResumeAll+0x1f0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <xTaskResumeAll+0x1ec>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <xTaskResumeAll+0x1f4>)
 8002a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002aa8:	f001 f976 	bl	8003d98 <vPortExitCritical>

    return xAlreadyYielded;
 8002aac:	69bb      	ldr	r3, [r7, #24]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000194 	.word	0x20000194
 8002abc:	2000016c 	.word	0x2000016c
 8002ac0:	2000012c 	.word	0x2000012c
 8002ac4:	20000174 	.word	0x20000174
 8002ac8:	20000098 	.word	0x20000098
 8002acc:	20000094 	.word	0x20000094
 8002ad0:	20000180 	.word	0x20000180
 8002ad4:	2000017c 	.word	0x2000017c
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <xTaskGetTickCount+0x1c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002ae8:	687b      	ldr	r3, [r7, #4]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000170 	.word	0x20000170

08002afc <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <uxTaskGetNumberOfTasks+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	2000016c 	.word	0x2000016c

08002b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b1e:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <xTaskIncrementTick+0x200>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 80ec 	bne.w	8002d00 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b28:	4b7b      	ldr	r3, [pc, #492]	; (8002d18 <xTaskIncrementTick+0x204>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b30:	4a79      	ldr	r2, [pc, #484]	; (8002d18 <xTaskIncrementTick+0x204>)
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d120      	bne.n	8002b7e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b3c:	4b77      	ldr	r3, [pc, #476]	; (8002d1c <xTaskIncrementTick+0x208>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <xTaskIncrementTick+0x48>
        __asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	607b      	str	r3, [r7, #4]
    }
 8002b58:	bf00      	nop
 8002b5a:	e7fe      	b.n	8002b5a <xTaskIncrementTick+0x46>
 8002b5c:	4b6f      	ldr	r3, [pc, #444]	; (8002d1c <xTaskIncrementTick+0x208>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <xTaskIncrementTick+0x20c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6d      	ldr	r2, [pc, #436]	; (8002d1c <xTaskIncrementTick+0x208>)
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4a6d      	ldr	r2, [pc, #436]	; (8002d20 <xTaskIncrementTick+0x20c>)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <xTaskIncrementTick+0x210>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a6b      	ldr	r2, [pc, #428]	; (8002d24 <xTaskIncrementTick+0x210>)
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	f000 fbc5 	bl	8003308 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b7e:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <xTaskIncrementTick+0x214>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a3a      	ldr	r2, [r7, #32]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f0c0 80a6 	bcc.w	8002cd6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b8a:	4b64      	ldr	r3, [pc, #400]	; (8002d1c <xTaskIncrementTick+0x208>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d104      	bne.n	8002b9e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b94:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <xTaskIncrementTick+0x214>)
 8002b96:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9a:	601a      	str	r2, [r3, #0]
                    break;
 8002b9c:	e09b      	b.n	8002cd6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b9e:	4b5f      	ldr	r3, [pc, #380]	; (8002d1c <xTaskIncrementTick+0x208>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002bae:	6a3a      	ldr	r2, [r7, #32]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d203      	bcs.n	8002bbe <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <xTaskIncrementTick+0x214>)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002bbc:	e08b      	b.n	8002cd6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	68d2      	ldr	r2, [r2, #12]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	3304      	adds	r3, #4
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d103      	bne.n	8002bec <xTaskIncrementTick+0xd8>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	615a      	str	r2, [r3, #20]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1e5a      	subs	r2, r3, #1
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01e      	beq.n	8002c42 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	6a12      	ldr	r2, [r2, #32]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	69d2      	ldr	r2, [r2, #28]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	3318      	adds	r3, #24
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d103      	bne.n	8002c32 <xTaskIncrementTick+0x11e>
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2200      	movs	r2, #0
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	2201      	movs	r2, #1
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <xTaskIncrementTick+0x218>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	4a36      	ldr	r2, [pc, #216]	; (8002d2c <xTaskIncrementTick+0x218>)
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	4935      	ldr	r1, [pc, #212]	; (8002d30 <xTaskIncrementTick+0x21c>)
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3304      	adds	r3, #4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	3204      	adds	r2, #4
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	1d1a      	adds	r2, r3, #4
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <xTaskIncrementTick+0x21c>)
 8002c98:	441a      	add	r2, r3
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	615a      	str	r2, [r3, #20]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca2:	4923      	ldr	r1, [pc, #140]	; (8002d30 <xTaskIncrementTick+0x21c>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	1c59      	adds	r1, r3, #1
 8002cb2:	481f      	ldr	r0, [pc, #124]	; (8002d30 <xTaskIncrementTick+0x21c>)
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4403      	add	r3, r0
 8002cbe:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <xTaskIncrementTick+0x220>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	f67f af5d 	bls.w	8002b8a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cd4:	e759      	b.n	8002b8a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <xTaskIncrementTick+0x220>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cdc:	4914      	ldr	r1, [pc, #80]	; (8002d30 <xTaskIncrementTick+0x21c>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d901      	bls.n	8002cf2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <xTaskIncrementTick+0x224>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	e004      	b.n	8002d0a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <xTaskIncrementTick+0x228>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <xTaskIncrementTick+0x228>)
 8002d08:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3728      	adds	r7, #40	; 0x28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000194 	.word	0x20000194
 8002d18:	20000170 	.word	0x20000170
 8002d1c:	20000124 	.word	0x20000124
 8002d20:	20000128 	.word	0x20000128
 8002d24:	20000184 	.word	0x20000184
 8002d28:	2000018c 	.word	0x2000018c
 8002d2c:	20000174 	.word	0x20000174
 8002d30:	20000098 	.word	0x20000098
 8002d34:	20000094 	.word	0x20000094
 8002d38:	20000180 	.word	0x20000180
 8002d3c:	2000017c 	.word	0x2000017c

08002d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d46:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <vTaskSwitchContext+0xd0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <vTaskSwitchContext+0xd4>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002d54:	e056      	b.n	8002e04 <vTaskSwitchContext+0xc4>
        xYieldPending = pdFALSE;
 8002d56:	4b2f      	ldr	r3, [pc, #188]	; (8002e14 <vTaskSwitchContext+0xd4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
                ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <vTaskSwitchContext+0xd8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
 8002d62:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <vTaskSwitchContext+0xd8>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <vTaskSwitchContext+0xdc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d909      	bls.n	8002d82 <vTaskSwitchContext+0x42>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8002d6e:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <vTaskSwitchContext+0xd8>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <vTaskSwitchContext+0xdc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	1ad1      	subs	r1, r2, r3
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <vTaskSwitchContext+0xe0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d7e:	440a      	add	r2, r1
 8002d80:	65da      	str	r2, [r3, #92]	; 0x5c
            ulTaskSwitchedInTime = ulTotalRunTime;
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <vTaskSwitchContext+0xd8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <vTaskSwitchContext+0xdc>)
 8002d88:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <vTaskSwitchContext+0xe4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d98:	7afb      	ldrb	r3, [r7, #11]
 8002d9a:	f1c3 031f 	rsb	r3, r3, #31
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	4921      	ldr	r1, [pc, #132]	; (8002e28 <vTaskSwitchContext+0xe8>)
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <vTaskSwitchContext+0x8a>
        __asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	607b      	str	r3, [r7, #4]
    }
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <vTaskSwitchContext+0x88>
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <vTaskSwitchContext+0xe8>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	3308      	adds	r3, #8
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d104      	bne.n	8002dfa <vTaskSwitchContext+0xba>
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <vTaskSwitchContext+0xe0>)
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	20000194 	.word	0x20000194
 8002e14:	20000180 	.word	0x20000180
 8002e18:	2000019c 	.word	0x2000019c
 8002e1c:	20000198 	.word	0x20000198
 8002e20:	20000094 	.word	0x20000094
 8002e24:	20000174 	.word	0x20000174
 8002e28:	20000098 	.word	0x20000098

08002e2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	60fb      	str	r3, [r7, #12]
    }
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <vTaskPlaceOnEventList+0x44>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3318      	adds	r3, #24
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe ff39 	bl	8001cd2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e60:	2101      	movs	r1, #1
 8002e62:	6838      	ldr	r0, [r7, #0]
 8002e64:	f000 fb2e 	bl	80034c4 <prvAddCurrentTaskToDelayedList>
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000094 	.word	0x20000094

08002e74 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	613b      	str	r3, [r7, #16]
    }
 8002e98:	bf00      	nop
 8002e9a:	e7fe      	b.n	8002e9a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <vTaskPlaceOnEventListRestricted+0x88>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	61da      	str	r2, [r3, #28]
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <vTaskPlaceOnEventListRestricted+0x88>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	6892      	ldr	r2, [r2, #8]
 8002eb2:	621a      	str	r2, [r3, #32]
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <vTaskPlaceOnEventListRestricted+0x88>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	3218      	adds	r2, #24
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <vTaskPlaceOnEventListRestricted+0x88>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f103 0218 	add.w	r2, r3, #24
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <vTaskPlaceOnEventListRestricted+0x88>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	68b8      	ldr	r0, [r7, #8]
 8002eee:	f000 fae9 	bl	80034c4 <prvAddCurrentTaskToDelayedList>
    }
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000094 	.word	0x20000094

08002f00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f00:	b480      	push	{r7}
 8002f02:	b08b      	sub	sp, #44	; 0x2c
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	60fb      	str	r3, [r7, #12]
    }
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	6a3a      	ldr	r2, [r7, #32]
 8002f38:	6a12      	ldr	r2, [r2, #32]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	69d2      	ldr	r2, [r2, #28]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d103      	bne.n	8002f5a <xTaskRemoveFromEventList+0x5a>
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	6a1a      	ldr	r2, [r3, #32]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1e5a      	subs	r2, r3, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <xTaskRemoveFromEventList+0x194>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d15e      	bne.n	8003030 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	68d2      	ldr	r2, [r2, #12]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	6a3a      	ldr	r2, [r7, #32]
 8002f88:	6892      	ldr	r2, [r2, #8]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	3304      	adds	r3, #4
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d103      	bne.n	8002fa0 <xTaskRemoveFromEventList+0xa0>
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	615a      	str	r2, [r3, #20]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	1e5a      	subs	r2, r3, #1
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	4b37      	ldr	r3, [pc, #220]	; (8003098 <xTaskRemoveFromEventList+0x198>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	4a36      	ldr	r2, [pc, #216]	; (8003098 <xTaskRemoveFromEventList+0x198>)
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc6:	4935      	ldr	r1, [pc, #212]	; (800309c <xTaskRemoveFromEventList+0x19c>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	6a3a      	ldr	r2, [r7, #32]
 8002fec:	3204      	adds	r2, #4
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4a25      	ldr	r2, [pc, #148]	; (800309c <xTaskRemoveFromEventList+0x19c>)
 8003006:	441a      	add	r2, r3
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	615a      	str	r2, [r3, #20]
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	4922      	ldr	r1, [pc, #136]	; (800309c <xTaskRemoveFromEventList+0x19c>)
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	481e      	ldr	r0, [pc, #120]	; (800309c <xTaskRemoveFromEventList+0x19c>)
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4403      	add	r3, r0
 800302c:	6019      	str	r1, [r3, #0]
 800302e:	e01b      	b.n	8003068 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <xTaskRemoveFromEventList+0x1a0>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	61da      	str	r2, [r3, #28]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	621a      	str	r2, [r3, #32]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	6a3a      	ldr	r2, [r7, #32]
 800304a:	3218      	adds	r2, #24
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	f103 0218 	add.w	r2, r3, #24
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <xTaskRemoveFromEventList+0x1a0>)
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <xTaskRemoveFromEventList+0x1a0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3301      	adds	r3, #1
 8003064:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <xTaskRemoveFromEventList+0x1a0>)
 8003066:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <xTaskRemoveFromEventList+0x1a4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	429a      	cmp	r2, r3
 8003074:	d905      	bls.n	8003082 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003076:	2301      	movs	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <xTaskRemoveFromEventList+0x1a8>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e001      	b.n	8003086 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003088:	4618      	mov	r0, r3
 800308a:	372c      	adds	r7, #44	; 0x2c
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	20000194 	.word	0x20000194
 8003098:	20000174 	.word	0x20000174
 800309c:	20000098 	.word	0x20000098
 80030a0:	2000012c 	.word	0x2000012c
 80030a4:	20000094 	.word	0x20000094
 80030a8:	20000180 	.word	0x20000180

080030ac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <vTaskInternalSetTimeOutState+0x24>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <vTaskInternalSetTimeOutState+0x28>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	605a      	str	r2, [r3, #4]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20000184 	.word	0x20000184
 80030d4:	20000170 	.word	0x20000170

080030d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	613b      	str	r3, [r7, #16]
    }
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	60fb      	str	r3, [r7, #12]
    }
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800311a:	f000 fe0d 	bl	8003d38 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800311e:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <xTaskCheckForTimeOut+0xe0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800312e:	4b23      	ldr	r3, [pc, #140]	; (80031bc <xTaskCheckForTimeOut+0xe4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <xTaskCheckForTimeOut+0x72>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <xTaskCheckForTimeOut+0xe4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                xReturn = pdTRUE;
 8003144:	2301      	movs	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e02e      	b.n	80031a8 <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003152:	d102      	bne.n	800315a <xTaskCheckForTimeOut+0x82>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	e026      	b.n	80031a8 <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <xTaskCheckForTimeOut+0xe8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d00a      	beq.n	800317c <xTaskCheckForTimeOut+0xa4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	429a      	cmp	r2, r3
 800316e:	d305      	bcc.n	800317c <xTaskCheckForTimeOut+0xa4>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003170:	2301      	movs	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e015      	b.n	80031a8 <xTaskCheckForTimeOut+0xd0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	429a      	cmp	r2, r3
 8003184:	d20b      	bcs.n	800319e <xTaskCheckForTimeOut+0xc6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	1ad2      	subs	r2, r2, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ff8a 	bl	80030ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	e004      	b.n	80031a8 <xTaskCheckForTimeOut+0xd0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80031a8:	f000 fdf6 	bl	8003d98 <vPortExitCritical>

    return xReturn;
 80031ac:	69fb      	ldr	r3, [r7, #28]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000170 	.word	0x20000170
 80031bc:	20000094 	.word	0x20000094
 80031c0:	20000184 	.word	0x20000184

080031c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <vTaskMissedYield+0x14>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	20000180 	.word	0x20000180

080031dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80031e4:	f000 f852 	bl	800328c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <prvIdleTask+0x28>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d9f9      	bls.n	80031e4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <prvIdleTask+0x2c>)
 80031f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003200:	e7f0      	b.n	80031e4 <prvIdleTask+0x8>
 8003202:	bf00      	nop
 8003204:	20000098 	.word	0x20000098
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	e00c      	b.n	8003232 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <prvInitialiseTaskLists+0x60>)
 8003224:	4413      	add	r3, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fd26 	bl	8001c78 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3301      	adds	r3, #1
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d9ef      	bls.n	8003218 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003238:	480d      	ldr	r0, [pc, #52]	; (8003270 <prvInitialiseTaskLists+0x64>)
 800323a:	f7fe fd1d 	bl	8001c78 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800323e:	480d      	ldr	r0, [pc, #52]	; (8003274 <prvInitialiseTaskLists+0x68>)
 8003240:	f7fe fd1a 	bl	8001c78 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003244:	480c      	ldr	r0, [pc, #48]	; (8003278 <prvInitialiseTaskLists+0x6c>)
 8003246:	f7fe fd17 	bl	8001c78 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800324a:	480c      	ldr	r0, [pc, #48]	; (800327c <prvInitialiseTaskLists+0x70>)
 800324c:	f7fe fd14 	bl	8001c78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003250:	480b      	ldr	r0, [pc, #44]	; (8003280 <prvInitialiseTaskLists+0x74>)
 8003252:	f7fe fd11 	bl	8001c78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <prvInitialiseTaskLists+0x78>)
 8003258:	4a05      	ldr	r2, [pc, #20]	; (8003270 <prvInitialiseTaskLists+0x64>)
 800325a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <prvInitialiseTaskLists+0x7c>)
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <prvInitialiseTaskLists+0x68>)
 8003260:	601a      	str	r2, [r3, #0]
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000098 	.word	0x20000098
 8003270:	200000fc 	.word	0x200000fc
 8003274:	20000110 	.word	0x20000110
 8003278:	2000012c 	.word	0x2000012c
 800327c:	20000140 	.word	0x20000140
 8003280:	20000158 	.word	0x20000158
 8003284:	20000124 	.word	0x20000124
 8003288:	20000128 	.word	0x20000128

0800328c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003292:	e019      	b.n	80032c8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003294:	f000 fd50 	bl	8003d38 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <prvCheckTasksWaitingTermination+0x50>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fd4d 	bl	8001d44 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <prvCheckTasksWaitingTermination+0x54>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <prvCheckTasksWaitingTermination+0x54>)
 80032b2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <prvCheckTasksWaitingTermination+0x58>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <prvCheckTasksWaitingTermination+0x58>)
 80032bc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80032be:	f000 fd6b 	bl	8003d98 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f810 	bl	80032e8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <prvCheckTasksWaitingTermination+0x58>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e1      	bne.n	8003294 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000140 	.word	0x20000140
 80032e0:	2000016c 	.word	0x2000016c
 80032e4:	20000154 	.word	0x20000154

080032e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 feb1 	bl	800405c <vPortFree>
            vPortFree( pxTCB );
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 feae 	bl	800405c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <prvResetNextTaskUnblockTime+0x30>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d104      	bne.n	8003320 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <prvResetNextTaskUnblockTime+0x34>)
 8003318:	f04f 32ff 	mov.w	r2, #4294967295
 800331c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800331e:	e005      	b.n	800332c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <prvResetNextTaskUnblockTime+0x30>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <prvResetNextTaskUnblockTime+0x34>)
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000124 	.word	0x20000124
 800333c:	2000018c 	.word	0x2000018c

08003340 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <xTaskGetSchedulerState+0x34>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800334e:	2301      	movs	r3, #1
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	e008      	b.n	8003366 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <xTaskGetSchedulerState+0x38>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800335c:	2302      	movs	r3, #2
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	e001      	b.n	8003366 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003366:	687b      	ldr	r3, [r7, #4]
    }
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	20000178 	.word	0x20000178
 8003378:	20000194 	.word	0x20000194

0800337c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 808c 	beq.w	80034ac <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003394:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <xTaskPriorityDisinherit+0x13c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	429a      	cmp	r2, r3
 800339c:	d00a      	beq.n	80033b4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	613b      	str	r3, [r7, #16]
    }
 80033b0:	bf00      	nop
 80033b2:	e7fe      	b.n	80033b2 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	60fb      	str	r3, [r7, #12]
    }
 80033ce:	bf00      	nop
 80033d0:	e7fe      	b.n	80033d0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	1e5a      	subs	r2, r3, #1
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d061      	beq.n	80034ac <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d15d      	bne.n	80034ac <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fca5 	bl	8001d44 <uxListRemove>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	2201      	movs	r2, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <xTaskPriorityDisinherit+0x140>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4013      	ands	r3, r2
 8003412:	4a2a      	ldr	r2, [pc, #168]	; (80034bc <xTaskPriorityDisinherit+0x140>)
 8003414:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	f1c3 0205 	rsb	r2, r3, #5
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	2201      	movs	r2, #1
 8003430:	409a      	lsls	r2, r3
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <xTaskPriorityDisinherit+0x140>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	4a20      	ldr	r2, [pc, #128]	; (80034bc <xTaskPriorityDisinherit+0x140>)
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	491f      	ldr	r1, [pc, #124]	; (80034c0 <xTaskPriorityDisinherit+0x144>)
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3304      	adds	r3, #4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	3204      	adds	r2, #4
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	1d1a      	adds	r2, r3, #4
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <xTaskPriorityDisinherit+0x144>)
 8003480:	441a      	add	r2, r3
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	615a      	str	r2, [r3, #20]
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348a:	490d      	ldr	r1, [pc, #52]	; (80034c0 <xTaskPriorityDisinherit+0x144>)
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	1c59      	adds	r1, r3, #1
 800349a:	4809      	ldr	r0, [pc, #36]	; (80034c0 <xTaskPriorityDisinherit+0x144>)
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4403      	add	r3, r0
 80034a6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80034a8:	2301      	movs	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80034ac:	69fb      	ldr	r3, [r7, #28]
    }
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000094 	.word	0x20000094
 80034bc:	20000174 	.word	0x20000174
 80034c0:	20000098 	.word	0x20000098

080034c4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80034ce:	4b38      	ldr	r3, [pc, #224]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034d4:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034de:	4b35      	ldr	r3, [pc, #212]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fc2d 	bl	8001d44 <uxListRemove>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034f0:	4b30      	ldr	r3, [pc, #192]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	2201      	movs	r2, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43da      	mvns	r2, r3
 80034fe:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4013      	ands	r3, r2
 8003504:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003506:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350e:	d124      	bne.n	800355a <prvAddCurrentTaskToDelayedList+0x96>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d021      	beq.n	800355a <prvAddCurrentTaskToDelayedList+0x96>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf8>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	6892      	ldr	r2, [r2, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	3204      	adds	r2, #4
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf8>)
 800354a:	615a      	str	r2, [r3, #20]
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <prvAddCurrentTaskToDelayedList+0xf8>)
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003558:	e026      	b.n	80035a8 <prvAddCurrentTaskToDelayedList+0xe4>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	429a      	cmp	r2, r3
 8003570:	d209      	bcs.n	8003586 <prvAddCurrentTaskToDelayedList+0xc2>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3304      	adds	r3, #4
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f7fe fba7 	bl	8001cd2 <vListInsert>
}
 8003584:	e010      	b.n	80035a8 <prvAddCurrentTaskToDelayedList+0xe4>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <prvAddCurrentTaskToDelayedList+0x100>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f7fe fb9d 	bl	8001cd2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <prvAddCurrentTaskToDelayedList+0x104>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d202      	bcs.n	80035a8 <prvAddCurrentTaskToDelayedList+0xe4>
                    xNextTaskUnblockTime = xTimeToWake;
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <prvAddCurrentTaskToDelayedList+0x104>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000170 	.word	0x20000170
 80035b4:	20000094 	.word	0x20000094
 80035b8:	20000174 	.word	0x20000174
 80035bc:	20000158 	.word	0x20000158
 80035c0:	20000128 	.word	0x20000128
 80035c4:	20000124 	.word	0x20000124
 80035c8:	2000018c 	.word	0x2000018c

080035cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035d6:	f000 fa47 	bl	8003a68 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <xTimerCreateTimerTask+0x54>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <xTimerCreateTimerTask+0x58>)
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2302      	movs	r3, #2
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035f0:	490d      	ldr	r1, [pc, #52]	; (8003628 <xTimerCreateTimerTask+0x5c>)
 80035f2:	480e      	ldr	r0, [pc, #56]	; (800362c <xTimerCreateTimerTask+0x60>)
 80035f4:	f7fe ffac 	bl	8002550 <xTaskCreate>
 80035f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	603b      	str	r3, [r7, #0]
    }
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003616:	687b      	ldr	r3, [r7, #4]
    }
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200001d0 	.word	0x200001d0
 8003624:	200001d4 	.word	0x200001d4
 8003628:	08004cdc 	.word	0x08004cdc
 800362c:	080036d5 	.word	0x080036d5

08003630 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800363c:	e008      	b.n	8003650 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4413      	add	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	18d1      	adds	r1, r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f8dd 	bl	800381c <prvInsertTimerInActiveList>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ea      	bne.n	800363e <prvReloadTimer+0xe>
        }
    }
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <prvProcessExpiredTimer+0x5c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3304      	adds	r3, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fb59 	bl	8001d44 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff ffc3 	bl	8003630 <prvReloadTimer>
 80036aa:	e008      	b.n	80036be <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	4798      	blx	r3
    }
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200001c8 	.word	0x200001c8

080036d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f857 	bl	8003794 <prvGetNextExpireTime>
 80036e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f803 	bl	80036f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036f2:	f000 f8d5 	bl	80038a0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036f6:	e7f1      	b.n	80036dc <prvTimerTask+0x8>

080036f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003702:	f7ff f8e1 	bl	80028c8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f866 	bl	80037dc <prvSampleTimeNow>
 8003710:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d130      	bne.n	800377a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <prvProcessTimerOrBlockTask+0x3c>
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	429a      	cmp	r2, r3
 8003724:	d806      	bhi.n	8003734 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003726:	f7ff f8dd 	bl	80028e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ffa1 	bl	8003674 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003732:	e024      	b.n	800377e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <prvProcessTimerOrBlockTask+0x90>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <prvProcessTimerOrBlockTask+0x50>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <prvProcessTimerOrBlockTask+0x52>
 8003748:	2300      	movs	r3, #0
 800374a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <prvProcessTimerOrBlockTask+0x94>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	f7fe fe55 	bl	8002408 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800375e:	f7ff f8c1 	bl	80028e4 <xTaskResumeAll>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <prvProcessTimerOrBlockTask+0x98>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
    }
 8003778:	e001      	b.n	800377e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800377a:	f7ff f8b3 	bl	80028e4 <xTaskResumeAll>
    }
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200001cc 	.word	0x200001cc
 800378c:	200001d0 	.word	0x200001d0
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <prvGetNextExpireTime+0x44>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <prvGetNextExpireTime+0x16>
 80037a6:	2201      	movs	r2, #1
 80037a8:	e000      	b.n	80037ac <prvGetNextExpireTime+0x18>
 80037aa:	2200      	movs	r2, #0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <prvGetNextExpireTime+0x44>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	e001      	b.n	80037c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037c8:	68fb      	ldr	r3, [r7, #12]
    }
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	200001c8 	.word	0x200001c8

080037dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037e4:	f7ff f97a 	bl	8002adc <xTaskGetTickCount>
 80037e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <prvSampleTimeNow+0x3c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d205      	bcs.n	8003800 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037f4:	f000 f912 	bl	8003a1c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e002      	b.n	8003806 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <prvSampleTimeNow+0x3c>)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800380c:	68fb      	ldr	r3, [r7, #12]
    }
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200001d8 	.word	0x200001d8

0800381c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d812      	bhi.n	8003868 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e01b      	b.n	800388e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <prvInsertTimerInActiveList+0x7c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fe fa36 	bl	8001cd2 <vListInsert>
 8003866:	e012      	b.n	800388e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d206      	bcs.n	800387e <prvInsertTimerInActiveList+0x62>
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e007      	b.n	800388e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <prvInsertTimerInActiveList+0x80>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3304      	adds	r3, #4
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f7fe fa22 	bl	8001cd2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800388e:	697b      	ldr	r3, [r7, #20]
    }
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200001cc 	.word	0x200001cc
 800389c:	200001c8 	.word	0x200001c8

080038a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038a6:	e0a6      	b.n	80039f6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f2c0 80a2 	blt.w	80039f4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	3304      	adds	r3, #4
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fa3f 	bl	8001d44 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff87 	bl	80037dc <prvSampleTimeNow>
 80038ce:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	f200 808e 	bhi.w	80039f6 <prvProcessReceivedCommands+0x156>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <prvProcessReceivedCommands+0x40>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003905 	.word	0x08003905
 80038e4:	08003905 	.word	0x08003905
 80038e8:	0800396d 	.word	0x0800396d
 80038ec:	08003981 	.word	0x08003981
 80038f0:	080039cb 	.word	0x080039cb
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003905 	.word	0x08003905
 80038fc:	0800396d 	.word	0x0800396d
 8003900:	08003981 	.word	0x08003981
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	18d1      	adds	r1, r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	69f8      	ldr	r0, [r7, #28]
 8003924:	f7ff ff7a 	bl	800381c <prvInsertTimerInActiveList>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d063      	beq.n	80039f6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	4413      	add	r3, r2
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4619      	mov	r1, r3
 8003948:	69f8      	ldr	r0, [r7, #28]
 800394a:	f7ff fe71 	bl	8003630 <prvReloadTimer>
 800394e:	e008      	b.n	8003962 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	69f8      	ldr	r0, [r7, #28]
 8003968:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800396a:	e044      	b.n	80039f6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	b2da      	uxtb	r2, r3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800397e:	e03a      	b.n	80039f6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	617b      	str	r3, [r7, #20]
    }
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	18d1      	adds	r1, r2, r3
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	69f8      	ldr	r0, [r7, #28]
 80039c4:	f7ff ff2a 	bl	800381c <prvInsertTimerInActiveList>
                        break;
 80039c8:	e015      	b.n	80039f6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80039d8:	69f8      	ldr	r0, [r7, #28]
 80039da:	f000 fb3f 	bl	800405c <vPortFree>
 80039de:	e00a      	b.n	80039f6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039f2:	e000      	b.n	80039f6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039f4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <prvProcessReceivedCommands+0x178>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f107 0108 	add.w	r1, r7, #8
 80039fe:	2200      	movs	r2, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe facd 	bl	8001fa0 <xQueueReceive>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f47f af4d 	bne.w	80038a8 <prvProcessReceivedCommands+0x8>
        }
    }
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	200001d0 	.word	0x200001d0

08003a1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a22:	e009      	b.n	8003a38 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	f7ff fe1e 	bl	8003674 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <prvSwitchTimerLists+0x48>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <prvSwitchTimerLists+0x44>)
 8003a4e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <prvSwitchTimerLists+0x48>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6013      	str	r3, [r2, #0]
    }
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200001c8 	.word	0x200001c8
 8003a64:	200001cc 	.word	0x200001cc

08003a68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a6c:	f000 f964 	bl	8003d38 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a70:	4b12      	ldr	r3, [pc, #72]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11d      	bne.n	8003ab4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a78:	4811      	ldr	r0, [pc, #68]	; (8003ac0 <prvCheckForValidListAndQueue+0x58>)
 8003a7a:	f7fe f8fd 	bl	8001c78 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a7e:	4811      	ldr	r0, [pc, #68]	; (8003ac4 <prvCheckForValidListAndQueue+0x5c>)
 8003a80:	f7fe f8fa 	bl	8001c78 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <prvCheckForValidListAndQueue+0x60>)
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <prvCheckForValidListAndQueue+0x58>)
 8003a88:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <prvCheckForValidListAndQueue+0x64>)
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <prvCheckForValidListAndQueue+0x5c>)
 8003a8e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a90:	2200      	movs	r2, #0
 8003a92:	210c      	movs	r1, #12
 8003a94:	2005      	movs	r0, #5
 8003a96:	f7fe fa0f 	bl	8001eb8 <xQueueGenericCreate>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4a07      	ldr	r2, [pc, #28]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003a9e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <prvCheckForValidListAndQueue+0x54>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <prvCheckForValidListAndQueue+0x68>)
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fc5c 	bl	800236c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ab4:	f000 f970 	bl	8003d98 <vPortExitCritical>
    }
 8003ab8:	bf00      	nop
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	200001d0 	.word	0x200001d0
 8003ac0:	200001a0 	.word	0x200001a0
 8003ac4:	200001b4 	.word	0x200001b4
 8003ac8:	200001c8 	.word	0x200001c8
 8003acc:	200001cc 	.word	0x200001cc
 8003ad0:	08004ce4 	.word	0x08004ce4

08003ad4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3b04      	subs	r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3b04      	subs	r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3b04      	subs	r3, #4
 8003b02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b04:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <pxPortInitialiseStack+0x64>)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3b14      	subs	r3, #20
 8003b0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3b04      	subs	r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f06f 0202 	mvn.w	r2, #2
 8003b22:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b20      	subs	r3, #32
 8003b28:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	08003b3d 	.word	0x08003b3d

08003b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <prvTaskExitError+0x54>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d00a      	beq.n	8003b66 <prvTaskExitError+0x2a>
        __asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	60fb      	str	r3, [r7, #12]
    }
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <prvTaskExitError+0x28>
        __asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60bb      	str	r3, [r7, #8]
    }
 8003b78:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b7a:	bf00      	nop
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0fc      	beq.n	8003b7c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	20000010 	.word	0x20000010
	...

08003ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <pxCurrentTCBConst2>)
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	6808      	ldr	r0, [r1, #0]
 8003ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003baa:	f380 8809 	msr	PSP, r0
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8811 	msr	BASEPRI, r0
 8003bba:	4770      	bx	lr
 8003bbc:	f3af 8000 	nop.w

08003bc0 <pxCurrentTCBConst2>:
 8003bc0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop

08003bc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003bc8:	4808      	ldr	r0, [pc, #32]	; (8003bec <prvPortStartFirstTask+0x24>)
 8003bca:	6800      	ldr	r0, [r0, #0]
 8003bcc:	6800      	ldr	r0, [r0, #0]
 8003bce:	f380 8808 	msr	MSP, r0
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	f380 8814 	msr	CONTROL, r0
 8003bda:	b662      	cpsie	i
 8003bdc:	b661      	cpsie	f
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	df00      	svc	0
 8003be8:	bf00      	nop
 8003bea:	0000      	.short	0x0000
 8003bec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop

08003bf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bfa:	4b46      	ldr	r3, [pc, #280]	; (8003d14 <xPortStartScheduler+0x120>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a46      	ldr	r2, [pc, #280]	; (8003d18 <xPortStartScheduler+0x124>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10a      	bne.n	8003c1a <xPortStartScheduler+0x26>
        __asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	613b      	str	r3, [r7, #16]
    }
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <xPortStartScheduler+0x120>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a3f      	ldr	r2, [pc, #252]	; (8003d1c <xPortStartScheduler+0x128>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d10a      	bne.n	8003c3a <xPortStartScheduler+0x46>
        __asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60fb      	str	r3, [r7, #12]
    }
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c3a:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <xPortStartScheduler+0x12c>)
 8003c3c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <xPortStartScheduler+0x130>)
 8003c60:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c68:	e009      	b.n	8003c7e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	4a2d      	ldr	r2, [pc, #180]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c72:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d0ef      	beq.n	8003c6a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c8a:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <xPortStartScheduler+0x134>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1c3 0307 	rsb	r3, r3, #7
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d00a      	beq.n	8003cac <xPortStartScheduler+0xb8>
        __asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	60bb      	str	r3, [r7, #8]
    }
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cb4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <xPortStartScheduler+0x134>)
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <xPortStartScheduler+0x138>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <xPortStartScheduler+0x138>)
 8003cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cd4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <xPortStartScheduler+0x138>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <xPortStartScheduler+0x138>)
 8003cdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ce0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ce2:	f000 f8db 	bl	8003e9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <xPortStartScheduler+0x13c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003cec:	f000 f8f0 	bl	8003ed0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <xPortStartScheduler+0x140>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <xPortStartScheduler+0x140>)
 8003cf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003cfc:	f7ff ff64 	bl	8003bc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d00:	f7ff f81e 	bl	8002d40 <vTaskSwitchContext>
    prvTaskExitError();
 8003d04:	f7ff ff1a 	bl	8003b3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	e000ed00 	.word	0xe000ed00
 8003d18:	410fc271 	.word	0x410fc271
 8003d1c:	410fc270 	.word	0x410fc270
 8003d20:	e000e400 	.word	0xe000e400
 8003d24:	200001dc 	.word	0x200001dc
 8003d28:	200001e0 	.word	0x200001e0
 8003d2c:	e000ed20 	.word	0xe000ed20
 8003d30:	20000010 	.word	0x20000010
 8003d34:	e000ef34 	.word	0xe000ef34

08003d38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	607b      	str	r3, [r7, #4]
    }
 8003d50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <vPortEnterCritical+0x58>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <vPortEnterCritical+0x58>)
 8003d5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <vPortEnterCritical+0x58>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10f      	bne.n	8003d84 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <vPortEnterCritical+0x5c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <vPortEnterCritical+0x4c>
        __asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	603b      	str	r3, [r7, #0]
    }
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <vPortEnterCritical+0x4a>
    }
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	20000010 	.word	0x20000010
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <vPortExitCritical+0x50>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <vPortExitCritical+0x24>
        __asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	607b      	str	r3, [r7, #4]
    }
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <vPortExitCritical+0x50>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <vPortExitCritical+0x50>)
 8003dc4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <vPortExitCritical+0x50>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <vPortExitCritical+0x42>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003dd8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000010 	.word	0x20000010
 8003dec:	00000000 	.word	0x00000000

08003df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003df0:	f3ef 8009 	mrs	r0, PSP
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <pxCurrentTCBConst>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f01e 0f10 	tst.w	lr, #16
 8003e00:	bf08      	it	eq
 8003e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	6010      	str	r0, [r2, #0]
 8003e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e14:	f380 8811 	msr	BASEPRI, r0
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f7fe ff8e 	bl	8002d40 <vTaskSwitchContext>
 8003e24:	f04f 0000 	mov.w	r0, #0
 8003e28:	f380 8811 	msr	BASEPRI, r0
 8003e2c:	bc09      	pop	{r0, r3}
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	6808      	ldr	r0, [r1, #0]
 8003e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e36:	f01e 0f10 	tst.w	lr, #16
 8003e3a:	bf08      	it	eq
 8003e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e40:	f380 8809 	msr	PSP, r0
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	f3af 8000 	nop.w

08003e50 <pxCurrentTCBConst>:
 8003e50:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	607b      	str	r3, [r7, #4]
    }
 8003e70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e72:	f7fe fe4f 	bl	8002b14 <xTaskIncrementTick>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <SysTick_Handler+0x40>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	2300      	movs	r3, #0
 8003e86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	f383 8811 	msr	BASEPRI, r3
    }
 8003e8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <vPortSetupTimerInterrupt+0x28>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <vPortSetupTimerInterrupt+0x2c>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <vPortSetupTimerInterrupt+0x30>)
 8003eae:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8003eb2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <vPortSetupTimerInterrupt+0x28>)
 8003eb6:	2207      	movs	r2, #7
 8003eb8:	601a      	str	r2, [r3, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000e010 	.word	0xe000e010
 8003ec8:	e000e018 	.word	0xe000e018
 8003ecc:	e000e014 	.word	0xe000e014

08003ed0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ed0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ee0 <vPortEnableVFP+0x10>
 8003ed4:	6801      	ldr	r1, [r0, #0]
 8003ed6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003eda:	6001      	str	r1, [r0, #0]
 8003edc:	4770      	bx	lr
 8003ede:	0000      	.short	0x0000
 8003ee0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop

08003ee8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003ef4:	f7fe fce8 	bl	80028c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ef8:	4b53      	ldr	r3, [pc, #332]	; (8004048 <pvPortMalloc+0x160>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f00:	f000 f908 	bl	8004114 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d012      	beq.n	8003f30 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	3308      	adds	r3, #8
 8003f16:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d804      	bhi.n	8003f2c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	4413      	add	r3, r2
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	e001      	b.n	8003f30 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	db70      	blt.n	8004018 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d06d      	beq.n	8004018 <pvPortMalloc+0x130>
 8003f3c:	4b43      	ldr	r3, [pc, #268]	; (800404c <pvPortMalloc+0x164>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d868      	bhi.n	8004018 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003f46:	4b42      	ldr	r3, [pc, #264]	; (8004050 <pvPortMalloc+0x168>)
 8003f48:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003f4a:	4b41      	ldr	r3, [pc, #260]	; (8004050 <pvPortMalloc+0x168>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f50:	e004      	b.n	8003f5c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d903      	bls.n	8003f6e <pvPortMalloc+0x86>
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f1      	bne.n	8003f52 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <pvPortMalloc+0x160>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d04f      	beq.n	8004018 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	4413      	add	r3, r2
 8003f80:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	1ad2      	subs	r2, r2, r3
 8003f92:	2308      	movs	r3, #8
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d91f      	bls.n	8003fda <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <pvPortMalloc+0xda>
        __asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	613b      	str	r3, [r7, #16]
    }
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	1ad2      	subs	r2, r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fd4:	6978      	ldr	r0, [r7, #20]
 8003fd6:	f000 f8f9 	bl	80041cc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <pvPortMalloc+0x164>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <pvPortMalloc+0x164>)
 8003fe6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fe8:	4b18      	ldr	r3, [pc, #96]	; (800404c <pvPortMalloc+0x164>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <pvPortMalloc+0x16c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d203      	bcs.n	8003ffc <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <pvPortMalloc+0x164>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a16      	ldr	r2, [pc, #88]	; (8004054 <pvPortMalloc+0x16c>)
 8003ffa:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <pvPortMalloc+0x170>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	4a10      	ldr	r2, [pc, #64]	; (8004058 <pvPortMalloc+0x170>)
 8004016:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004018:	f7fe fc64 	bl	80028e4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <pvPortMalloc+0x154>
        __asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	60fb      	str	r3, [r7, #12]
    }
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <pvPortMalloc+0x152>
    return pvReturn;
 800403c:	69fb      	ldr	r3, [r7, #28]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3728      	adds	r7, #40	; 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200041ec 	.word	0x200041ec
 800404c:	200041f0 	.word	0x200041f0
 8004050:	200041e4 	.word	0x200041e4
 8004054:	200041f4 	.word	0x200041f4
 8004058:	200041f8 	.word	0x200041f8

0800405c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d049      	beq.n	8004102 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800406e:	2308      	movs	r3, #8
 8004070:	425b      	negs	r3, r3
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4413      	add	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	db0a      	blt.n	800409a <vPortFree+0x3e>
        __asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60fb      	str	r3, [r7, #12]
    }
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <vPortFree+0x5c>
        __asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60bb      	str	r3, [r7, #8]
    }
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	0fdb      	lsrs	r3, r3, #31
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01c      	beq.n	8004102 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d118      	bne.n	8004102 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80040dc:	f7fe fbf4 	bl	80028c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <vPortFree+0xb0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4413      	add	r3, r2
 80040ea:	4a08      	ldr	r2, [pc, #32]	; (800410c <vPortFree+0xb0>)
 80040ec:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ee:	6938      	ldr	r0, [r7, #16]
 80040f0:	f000 f86c 	bl	80041cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <vPortFree+0xb4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	4a05      	ldr	r2, [pc, #20]	; (8004110 <vPortFree+0xb4>)
 80040fc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80040fe:	f7fe fbf1 	bl	80028e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200041f0 	.word	0x200041f0
 8004110:	200041fc 	.word	0x200041fc

08004114 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800411a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800411e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004120:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <prvHeapInit+0xa4>)
 8004122:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3307      	adds	r3, #7
 8004132:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <prvHeapInit+0xa4>)
 8004144:	4413      	add	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800414c:	4a1b      	ldr	r2, [pc, #108]	; (80041bc <prvHeapInit+0xa8>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004152:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <prvHeapInit+0xa8>)
 8004154:	2200      	movs	r2, #0
 8004156:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	4413      	add	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004160:	2208      	movs	r2, #8
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0307 	bic.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <prvHeapInit+0xac>)
 8004174:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <prvHeapInit+0xac>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2200      	movs	r2, #0
 800417c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <prvHeapInit+0xac>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	1ad2      	subs	r2, r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <prvHeapInit+0xac>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <prvHeapInit+0xb0>)
 80041a2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <prvHeapInit+0xb4>)
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	200001e4 	.word	0x200001e4
 80041bc:	200041e4 	.word	0x200041e4
 80041c0:	200041ec 	.word	0x200041ec
 80041c4:	200041f4 	.word	0x200041f4
 80041c8:	200041f0 	.word	0x200041f0

080041cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041d4:	4b28      	ldr	r3, [pc, #160]	; (8004278 <prvInsertBlockIntoFreeList+0xac>)
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e002      	b.n	80041e0 <prvInsertBlockIntoFreeList+0x14>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d8f7      	bhi.n	80041da <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4413      	add	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d108      	bne.n	800420e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	441a      	add	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	441a      	add	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d118      	bne.n	8004254 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <prvInsertBlockIntoFreeList+0xb0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d00d      	beq.n	800424a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	441a      	add	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e008      	b.n	800425c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <prvInsertBlockIntoFreeList+0xb0>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e003      	b.n	800425c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d002      	beq.n	800426a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	200041e4 	.word	0x200041e4
 800427c:	200041ec 	.word	0x200041ec

08004280 <__libc_init_array>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	4d0d      	ldr	r5, [pc, #52]	; (80042b8 <__libc_init_array+0x38>)
 8004284:	4c0d      	ldr	r4, [pc, #52]	; (80042bc <__libc_init_array+0x3c>)
 8004286:	1b64      	subs	r4, r4, r5
 8004288:	10a4      	asrs	r4, r4, #2
 800428a:	2600      	movs	r6, #0
 800428c:	42a6      	cmp	r6, r4
 800428e:	d109      	bne.n	80042a4 <__libc_init_array+0x24>
 8004290:	4d0b      	ldr	r5, [pc, #44]	; (80042c0 <__libc_init_array+0x40>)
 8004292:	4c0c      	ldr	r4, [pc, #48]	; (80042c4 <__libc_init_array+0x44>)
 8004294:	f000 fd02 	bl	8004c9c <_init>
 8004298:	1b64      	subs	r4, r4, r5
 800429a:	10a4      	asrs	r4, r4, #2
 800429c:	2600      	movs	r6, #0
 800429e:	42a6      	cmp	r6, r4
 80042a0:	d105      	bne.n	80042ae <__libc_init_array+0x2e>
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a8:	4798      	blx	r3
 80042aa:	3601      	adds	r6, #1
 80042ac:	e7ee      	b.n	800428c <__libc_init_array+0xc>
 80042ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b2:	4798      	blx	r3
 80042b4:	3601      	adds	r6, #1
 80042b6:	e7f2      	b.n	800429e <__libc_init_array+0x1e>
 80042b8:	08004d90 	.word	0x08004d90
 80042bc:	08004d90 	.word	0x08004d90
 80042c0:	08004d90 	.word	0x08004d90
 80042c4:	08004d94 	.word	0x08004d94

080042c8 <memcpy>:
 80042c8:	440a      	add	r2, r1
 80042ca:	4291      	cmp	r1, r2
 80042cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80042d0:	d100      	bne.n	80042d4 <memcpy+0xc>
 80042d2:	4770      	bx	lr
 80042d4:	b510      	push	{r4, lr}
 80042d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042de:	4291      	cmp	r1, r2
 80042e0:	d1f9      	bne.n	80042d6 <memcpy+0xe>
 80042e2:	bd10      	pop	{r4, pc}

080042e4 <memset>:
 80042e4:	4402      	add	r2, r0
 80042e6:	4603      	mov	r3, r0
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d100      	bne.n	80042ee <memset+0xa>
 80042ec:	4770      	bx	lr
 80042ee:	f803 1b01 	strb.w	r1, [r3], #1
 80042f2:	e7f9      	b.n	80042e8 <memset+0x4>

080042f4 <_puts_r>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	460e      	mov	r6, r1
 80042f8:	4605      	mov	r5, r0
 80042fa:	b118      	cbz	r0, 8004304 <_puts_r+0x10>
 80042fc:	6983      	ldr	r3, [r0, #24]
 80042fe:	b90b      	cbnz	r3, 8004304 <_puts_r+0x10>
 8004300:	f000 fa48 	bl	8004794 <__sinit>
 8004304:	69ab      	ldr	r3, [r5, #24]
 8004306:	68ac      	ldr	r4, [r5, #8]
 8004308:	b913      	cbnz	r3, 8004310 <_puts_r+0x1c>
 800430a:	4628      	mov	r0, r5
 800430c:	f000 fa42 	bl	8004794 <__sinit>
 8004310:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <_puts_r+0xd0>)
 8004312:	429c      	cmp	r4, r3
 8004314:	d120      	bne.n	8004358 <_puts_r+0x64>
 8004316:	686c      	ldr	r4, [r5, #4]
 8004318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800431a:	07db      	lsls	r3, r3, #31
 800431c:	d405      	bmi.n	800432a <_puts_r+0x36>
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	0598      	lsls	r0, r3, #22
 8004322:	d402      	bmi.n	800432a <_puts_r+0x36>
 8004324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004326:	f000 fad3 	bl	80048d0 <__retarget_lock_acquire_recursive>
 800432a:	89a3      	ldrh	r3, [r4, #12]
 800432c:	0719      	lsls	r1, r3, #28
 800432e:	d51d      	bpl.n	800436c <_puts_r+0x78>
 8004330:	6923      	ldr	r3, [r4, #16]
 8004332:	b1db      	cbz	r3, 800436c <_puts_r+0x78>
 8004334:	3e01      	subs	r6, #1
 8004336:	68a3      	ldr	r3, [r4, #8]
 8004338:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800433c:	3b01      	subs	r3, #1
 800433e:	60a3      	str	r3, [r4, #8]
 8004340:	bb39      	cbnz	r1, 8004392 <_puts_r+0x9e>
 8004342:	2b00      	cmp	r3, #0
 8004344:	da38      	bge.n	80043b8 <_puts_r+0xc4>
 8004346:	4622      	mov	r2, r4
 8004348:	210a      	movs	r1, #10
 800434a:	4628      	mov	r0, r5
 800434c:	f000 f848 	bl	80043e0 <__swbuf_r>
 8004350:	3001      	adds	r0, #1
 8004352:	d011      	beq.n	8004378 <_puts_r+0x84>
 8004354:	250a      	movs	r5, #10
 8004356:	e011      	b.n	800437c <_puts_r+0x88>
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <_puts_r+0xd4>)
 800435a:	429c      	cmp	r4, r3
 800435c:	d101      	bne.n	8004362 <_puts_r+0x6e>
 800435e:	68ac      	ldr	r4, [r5, #8]
 8004360:	e7da      	b.n	8004318 <_puts_r+0x24>
 8004362:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <_puts_r+0xd8>)
 8004364:	429c      	cmp	r4, r3
 8004366:	bf08      	it	eq
 8004368:	68ec      	ldreq	r4, [r5, #12]
 800436a:	e7d5      	b.n	8004318 <_puts_r+0x24>
 800436c:	4621      	mov	r1, r4
 800436e:	4628      	mov	r0, r5
 8004370:	f000 f888 	bl	8004484 <__swsetup_r>
 8004374:	2800      	cmp	r0, #0
 8004376:	d0dd      	beq.n	8004334 <_puts_r+0x40>
 8004378:	f04f 35ff 	mov.w	r5, #4294967295
 800437c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800437e:	07da      	lsls	r2, r3, #31
 8004380:	d405      	bmi.n	800438e <_puts_r+0x9a>
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	059b      	lsls	r3, r3, #22
 8004386:	d402      	bmi.n	800438e <_puts_r+0x9a>
 8004388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800438a:	f000 faa2 	bl	80048d2 <__retarget_lock_release_recursive>
 800438e:	4628      	mov	r0, r5
 8004390:	bd70      	pop	{r4, r5, r6, pc}
 8004392:	2b00      	cmp	r3, #0
 8004394:	da04      	bge.n	80043a0 <_puts_r+0xac>
 8004396:	69a2      	ldr	r2, [r4, #24]
 8004398:	429a      	cmp	r2, r3
 800439a:	dc06      	bgt.n	80043aa <_puts_r+0xb6>
 800439c:	290a      	cmp	r1, #10
 800439e:	d004      	beq.n	80043aa <_puts_r+0xb6>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	6022      	str	r2, [r4, #0]
 80043a6:	7019      	strb	r1, [r3, #0]
 80043a8:	e7c5      	b.n	8004336 <_puts_r+0x42>
 80043aa:	4622      	mov	r2, r4
 80043ac:	4628      	mov	r0, r5
 80043ae:	f000 f817 	bl	80043e0 <__swbuf_r>
 80043b2:	3001      	adds	r0, #1
 80043b4:	d1bf      	bne.n	8004336 <_puts_r+0x42>
 80043b6:	e7df      	b.n	8004378 <_puts_r+0x84>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	250a      	movs	r5, #10
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	6022      	str	r2, [r4, #0]
 80043c0:	701d      	strb	r5, [r3, #0]
 80043c2:	e7db      	b.n	800437c <_puts_r+0x88>
 80043c4:	08004d50 	.word	0x08004d50
 80043c8:	08004d70 	.word	0x08004d70
 80043cc:	08004d30 	.word	0x08004d30

080043d0 <puts>:
 80043d0:	4b02      	ldr	r3, [pc, #8]	; (80043dc <puts+0xc>)
 80043d2:	4601      	mov	r1, r0
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f7ff bf8d 	b.w	80042f4 <_puts_r>
 80043da:	bf00      	nop
 80043dc:	20000014 	.word	0x20000014

080043e0 <__swbuf_r>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	460e      	mov	r6, r1
 80043e4:	4614      	mov	r4, r2
 80043e6:	4605      	mov	r5, r0
 80043e8:	b118      	cbz	r0, 80043f2 <__swbuf_r+0x12>
 80043ea:	6983      	ldr	r3, [r0, #24]
 80043ec:	b90b      	cbnz	r3, 80043f2 <__swbuf_r+0x12>
 80043ee:	f000 f9d1 	bl	8004794 <__sinit>
 80043f2:	4b21      	ldr	r3, [pc, #132]	; (8004478 <__swbuf_r+0x98>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	d12b      	bne.n	8004450 <__swbuf_r+0x70>
 80043f8:	686c      	ldr	r4, [r5, #4]
 80043fa:	69a3      	ldr	r3, [r4, #24]
 80043fc:	60a3      	str	r3, [r4, #8]
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	071a      	lsls	r2, r3, #28
 8004402:	d52f      	bpl.n	8004464 <__swbuf_r+0x84>
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	b36b      	cbz	r3, 8004464 <__swbuf_r+0x84>
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	6820      	ldr	r0, [r4, #0]
 800440c:	1ac0      	subs	r0, r0, r3
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	b2f6      	uxtb	r6, r6
 8004412:	4283      	cmp	r3, r0
 8004414:	4637      	mov	r7, r6
 8004416:	dc04      	bgt.n	8004422 <__swbuf_r+0x42>
 8004418:	4621      	mov	r1, r4
 800441a:	4628      	mov	r0, r5
 800441c:	f000 f926 	bl	800466c <_fflush_r>
 8004420:	bb30      	cbnz	r0, 8004470 <__swbuf_r+0x90>
 8004422:	68a3      	ldr	r3, [r4, #8]
 8004424:	3b01      	subs	r3, #1
 8004426:	60a3      	str	r3, [r4, #8]
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	701e      	strb	r6, [r3, #0]
 8004430:	6963      	ldr	r3, [r4, #20]
 8004432:	3001      	adds	r0, #1
 8004434:	4283      	cmp	r3, r0
 8004436:	d004      	beq.n	8004442 <__swbuf_r+0x62>
 8004438:	89a3      	ldrh	r3, [r4, #12]
 800443a:	07db      	lsls	r3, r3, #31
 800443c:	d506      	bpl.n	800444c <__swbuf_r+0x6c>
 800443e:	2e0a      	cmp	r6, #10
 8004440:	d104      	bne.n	800444c <__swbuf_r+0x6c>
 8004442:	4621      	mov	r1, r4
 8004444:	4628      	mov	r0, r5
 8004446:	f000 f911 	bl	800466c <_fflush_r>
 800444a:	b988      	cbnz	r0, 8004470 <__swbuf_r+0x90>
 800444c:	4638      	mov	r0, r7
 800444e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <__swbuf_r+0x9c>)
 8004452:	429c      	cmp	r4, r3
 8004454:	d101      	bne.n	800445a <__swbuf_r+0x7a>
 8004456:	68ac      	ldr	r4, [r5, #8]
 8004458:	e7cf      	b.n	80043fa <__swbuf_r+0x1a>
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <__swbuf_r+0xa0>)
 800445c:	429c      	cmp	r4, r3
 800445e:	bf08      	it	eq
 8004460:	68ec      	ldreq	r4, [r5, #12]
 8004462:	e7ca      	b.n	80043fa <__swbuf_r+0x1a>
 8004464:	4621      	mov	r1, r4
 8004466:	4628      	mov	r0, r5
 8004468:	f000 f80c 	bl	8004484 <__swsetup_r>
 800446c:	2800      	cmp	r0, #0
 800446e:	d0cb      	beq.n	8004408 <__swbuf_r+0x28>
 8004470:	f04f 37ff 	mov.w	r7, #4294967295
 8004474:	e7ea      	b.n	800444c <__swbuf_r+0x6c>
 8004476:	bf00      	nop
 8004478:	08004d50 	.word	0x08004d50
 800447c:	08004d70 	.word	0x08004d70
 8004480:	08004d30 	.word	0x08004d30

08004484 <__swsetup_r>:
 8004484:	4b32      	ldr	r3, [pc, #200]	; (8004550 <__swsetup_r+0xcc>)
 8004486:	b570      	push	{r4, r5, r6, lr}
 8004488:	681d      	ldr	r5, [r3, #0]
 800448a:	4606      	mov	r6, r0
 800448c:	460c      	mov	r4, r1
 800448e:	b125      	cbz	r5, 800449a <__swsetup_r+0x16>
 8004490:	69ab      	ldr	r3, [r5, #24]
 8004492:	b913      	cbnz	r3, 800449a <__swsetup_r+0x16>
 8004494:	4628      	mov	r0, r5
 8004496:	f000 f97d 	bl	8004794 <__sinit>
 800449a:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <__swsetup_r+0xd0>)
 800449c:	429c      	cmp	r4, r3
 800449e:	d10f      	bne.n	80044c0 <__swsetup_r+0x3c>
 80044a0:	686c      	ldr	r4, [r5, #4]
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044a8:	0719      	lsls	r1, r3, #28
 80044aa:	d42c      	bmi.n	8004506 <__swsetup_r+0x82>
 80044ac:	06dd      	lsls	r5, r3, #27
 80044ae:	d411      	bmi.n	80044d4 <__swsetup_r+0x50>
 80044b0:	2309      	movs	r3, #9
 80044b2:	6033      	str	r3, [r6, #0]
 80044b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044b8:	81a3      	strh	r3, [r4, #12]
 80044ba:	f04f 30ff 	mov.w	r0, #4294967295
 80044be:	e03e      	b.n	800453e <__swsetup_r+0xba>
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <__swsetup_r+0xd4>)
 80044c2:	429c      	cmp	r4, r3
 80044c4:	d101      	bne.n	80044ca <__swsetup_r+0x46>
 80044c6:	68ac      	ldr	r4, [r5, #8]
 80044c8:	e7eb      	b.n	80044a2 <__swsetup_r+0x1e>
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <__swsetup_r+0xd8>)
 80044cc:	429c      	cmp	r4, r3
 80044ce:	bf08      	it	eq
 80044d0:	68ec      	ldreq	r4, [r5, #12]
 80044d2:	e7e6      	b.n	80044a2 <__swsetup_r+0x1e>
 80044d4:	0758      	lsls	r0, r3, #29
 80044d6:	d512      	bpl.n	80044fe <__swsetup_r+0x7a>
 80044d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044da:	b141      	cbz	r1, 80044ee <__swsetup_r+0x6a>
 80044dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044e0:	4299      	cmp	r1, r3
 80044e2:	d002      	beq.n	80044ea <__swsetup_r+0x66>
 80044e4:	4630      	mov	r0, r6
 80044e6:	f000 fa59 	bl	800499c <_free_r>
 80044ea:	2300      	movs	r3, #0
 80044ec:	6363      	str	r3, [r4, #52]	; 0x34
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	2300      	movs	r3, #0
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	6923      	ldr	r3, [r4, #16]
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f043 0308 	orr.w	r3, r3, #8
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	b94b      	cbnz	r3, 800451e <__swsetup_r+0x9a>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004514:	d003      	beq.n	800451e <__swsetup_r+0x9a>
 8004516:	4621      	mov	r1, r4
 8004518:	4630      	mov	r0, r6
 800451a:	f000 f9ff 	bl	800491c <__smakebuf_r>
 800451e:	89a0      	ldrh	r0, [r4, #12]
 8004520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004524:	f010 0301 	ands.w	r3, r0, #1
 8004528:	d00a      	beq.n	8004540 <__swsetup_r+0xbc>
 800452a:	2300      	movs	r3, #0
 800452c:	60a3      	str	r3, [r4, #8]
 800452e:	6963      	ldr	r3, [r4, #20]
 8004530:	425b      	negs	r3, r3
 8004532:	61a3      	str	r3, [r4, #24]
 8004534:	6923      	ldr	r3, [r4, #16]
 8004536:	b943      	cbnz	r3, 800454a <__swsetup_r+0xc6>
 8004538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800453c:	d1ba      	bne.n	80044b4 <__swsetup_r+0x30>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	0781      	lsls	r1, r0, #30
 8004542:	bf58      	it	pl
 8004544:	6963      	ldrpl	r3, [r4, #20]
 8004546:	60a3      	str	r3, [r4, #8]
 8004548:	e7f4      	b.n	8004534 <__swsetup_r+0xb0>
 800454a:	2000      	movs	r0, #0
 800454c:	e7f7      	b.n	800453e <__swsetup_r+0xba>
 800454e:	bf00      	nop
 8004550:	20000014 	.word	0x20000014
 8004554:	08004d50 	.word	0x08004d50
 8004558:	08004d70 	.word	0x08004d70
 800455c:	08004d30 	.word	0x08004d30

08004560 <__sflush_r>:
 8004560:	898a      	ldrh	r2, [r1, #12]
 8004562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004566:	4605      	mov	r5, r0
 8004568:	0710      	lsls	r0, r2, #28
 800456a:	460c      	mov	r4, r1
 800456c:	d458      	bmi.n	8004620 <__sflush_r+0xc0>
 800456e:	684b      	ldr	r3, [r1, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	dc05      	bgt.n	8004580 <__sflush_r+0x20>
 8004574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	dc02      	bgt.n	8004580 <__sflush_r+0x20>
 800457a:	2000      	movs	r0, #0
 800457c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004582:	2e00      	cmp	r6, #0
 8004584:	d0f9      	beq.n	800457a <__sflush_r+0x1a>
 8004586:	2300      	movs	r3, #0
 8004588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800458c:	682f      	ldr	r7, [r5, #0]
 800458e:	602b      	str	r3, [r5, #0]
 8004590:	d032      	beq.n	80045f8 <__sflush_r+0x98>
 8004592:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	075a      	lsls	r2, r3, #29
 8004598:	d505      	bpl.n	80045a6 <__sflush_r+0x46>
 800459a:	6863      	ldr	r3, [r4, #4]
 800459c:	1ac0      	subs	r0, r0, r3
 800459e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045a0:	b10b      	cbz	r3, 80045a6 <__sflush_r+0x46>
 80045a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045a4:	1ac0      	subs	r0, r0, r3
 80045a6:	2300      	movs	r3, #0
 80045a8:	4602      	mov	r2, r0
 80045aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045ac:	6a21      	ldr	r1, [r4, #32]
 80045ae:	4628      	mov	r0, r5
 80045b0:	47b0      	blx	r6
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	d106      	bne.n	80045c6 <__sflush_r+0x66>
 80045b8:	6829      	ldr	r1, [r5, #0]
 80045ba:	291d      	cmp	r1, #29
 80045bc:	d82c      	bhi.n	8004618 <__sflush_r+0xb8>
 80045be:	4a2a      	ldr	r2, [pc, #168]	; (8004668 <__sflush_r+0x108>)
 80045c0:	40ca      	lsrs	r2, r1
 80045c2:	07d6      	lsls	r6, r2, #31
 80045c4:	d528      	bpl.n	8004618 <__sflush_r+0xb8>
 80045c6:	2200      	movs	r2, #0
 80045c8:	6062      	str	r2, [r4, #4]
 80045ca:	04d9      	lsls	r1, r3, #19
 80045cc:	6922      	ldr	r2, [r4, #16]
 80045ce:	6022      	str	r2, [r4, #0]
 80045d0:	d504      	bpl.n	80045dc <__sflush_r+0x7c>
 80045d2:	1c42      	adds	r2, r0, #1
 80045d4:	d101      	bne.n	80045da <__sflush_r+0x7a>
 80045d6:	682b      	ldr	r3, [r5, #0]
 80045d8:	b903      	cbnz	r3, 80045dc <__sflush_r+0x7c>
 80045da:	6560      	str	r0, [r4, #84]	; 0x54
 80045dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045de:	602f      	str	r7, [r5, #0]
 80045e0:	2900      	cmp	r1, #0
 80045e2:	d0ca      	beq.n	800457a <__sflush_r+0x1a>
 80045e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045e8:	4299      	cmp	r1, r3
 80045ea:	d002      	beq.n	80045f2 <__sflush_r+0x92>
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 f9d5 	bl	800499c <_free_r>
 80045f2:	2000      	movs	r0, #0
 80045f4:	6360      	str	r0, [r4, #52]	; 0x34
 80045f6:	e7c1      	b.n	800457c <__sflush_r+0x1c>
 80045f8:	6a21      	ldr	r1, [r4, #32]
 80045fa:	2301      	movs	r3, #1
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b0      	blx	r6
 8004600:	1c41      	adds	r1, r0, #1
 8004602:	d1c7      	bne.n	8004594 <__sflush_r+0x34>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0c4      	beq.n	8004594 <__sflush_r+0x34>
 800460a:	2b1d      	cmp	r3, #29
 800460c:	d001      	beq.n	8004612 <__sflush_r+0xb2>
 800460e:	2b16      	cmp	r3, #22
 8004610:	d101      	bne.n	8004616 <__sflush_r+0xb6>
 8004612:	602f      	str	r7, [r5, #0]
 8004614:	e7b1      	b.n	800457a <__sflush_r+0x1a>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	e7ad      	b.n	800457c <__sflush_r+0x1c>
 8004620:	690f      	ldr	r7, [r1, #16]
 8004622:	2f00      	cmp	r7, #0
 8004624:	d0a9      	beq.n	800457a <__sflush_r+0x1a>
 8004626:	0793      	lsls	r3, r2, #30
 8004628:	680e      	ldr	r6, [r1, #0]
 800462a:	bf08      	it	eq
 800462c:	694b      	ldreq	r3, [r1, #20]
 800462e:	600f      	str	r7, [r1, #0]
 8004630:	bf18      	it	ne
 8004632:	2300      	movne	r3, #0
 8004634:	eba6 0807 	sub.w	r8, r6, r7
 8004638:	608b      	str	r3, [r1, #8]
 800463a:	f1b8 0f00 	cmp.w	r8, #0
 800463e:	dd9c      	ble.n	800457a <__sflush_r+0x1a>
 8004640:	6a21      	ldr	r1, [r4, #32]
 8004642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004644:	4643      	mov	r3, r8
 8004646:	463a      	mov	r2, r7
 8004648:	4628      	mov	r0, r5
 800464a:	47b0      	blx	r6
 800464c:	2800      	cmp	r0, #0
 800464e:	dc06      	bgt.n	800465e <__sflush_r+0xfe>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	e78e      	b.n	800457c <__sflush_r+0x1c>
 800465e:	4407      	add	r7, r0
 8004660:	eba8 0800 	sub.w	r8, r8, r0
 8004664:	e7e9      	b.n	800463a <__sflush_r+0xda>
 8004666:	bf00      	nop
 8004668:	20400001 	.word	0x20400001

0800466c <_fflush_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	690b      	ldr	r3, [r1, #16]
 8004670:	4605      	mov	r5, r0
 8004672:	460c      	mov	r4, r1
 8004674:	b913      	cbnz	r3, 800467c <_fflush_r+0x10>
 8004676:	2500      	movs	r5, #0
 8004678:	4628      	mov	r0, r5
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	b118      	cbz	r0, 8004686 <_fflush_r+0x1a>
 800467e:	6983      	ldr	r3, [r0, #24]
 8004680:	b90b      	cbnz	r3, 8004686 <_fflush_r+0x1a>
 8004682:	f000 f887 	bl	8004794 <__sinit>
 8004686:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <_fflush_r+0x6c>)
 8004688:	429c      	cmp	r4, r3
 800468a:	d11b      	bne.n	80046c4 <_fflush_r+0x58>
 800468c:	686c      	ldr	r4, [r5, #4]
 800468e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ef      	beq.n	8004676 <_fflush_r+0xa>
 8004696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004698:	07d0      	lsls	r0, r2, #31
 800469a:	d404      	bmi.n	80046a6 <_fflush_r+0x3a>
 800469c:	0599      	lsls	r1, r3, #22
 800469e:	d402      	bmi.n	80046a6 <_fflush_r+0x3a>
 80046a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a2:	f000 f915 	bl	80048d0 <__retarget_lock_acquire_recursive>
 80046a6:	4628      	mov	r0, r5
 80046a8:	4621      	mov	r1, r4
 80046aa:	f7ff ff59 	bl	8004560 <__sflush_r>
 80046ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046b0:	07da      	lsls	r2, r3, #31
 80046b2:	4605      	mov	r5, r0
 80046b4:	d4e0      	bmi.n	8004678 <_fflush_r+0xc>
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	059b      	lsls	r3, r3, #22
 80046ba:	d4dd      	bmi.n	8004678 <_fflush_r+0xc>
 80046bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046be:	f000 f908 	bl	80048d2 <__retarget_lock_release_recursive>
 80046c2:	e7d9      	b.n	8004678 <_fflush_r+0xc>
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <_fflush_r+0x70>)
 80046c6:	429c      	cmp	r4, r3
 80046c8:	d101      	bne.n	80046ce <_fflush_r+0x62>
 80046ca:	68ac      	ldr	r4, [r5, #8]
 80046cc:	e7df      	b.n	800468e <_fflush_r+0x22>
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <_fflush_r+0x74>)
 80046d0:	429c      	cmp	r4, r3
 80046d2:	bf08      	it	eq
 80046d4:	68ec      	ldreq	r4, [r5, #12]
 80046d6:	e7da      	b.n	800468e <_fflush_r+0x22>
 80046d8:	08004d50 	.word	0x08004d50
 80046dc:	08004d70 	.word	0x08004d70
 80046e0:	08004d30 	.word	0x08004d30

080046e4 <std>:
 80046e4:	2300      	movs	r3, #0
 80046e6:	b510      	push	{r4, lr}
 80046e8:	4604      	mov	r4, r0
 80046ea:	e9c0 3300 	strd	r3, r3, [r0]
 80046ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046f2:	6083      	str	r3, [r0, #8]
 80046f4:	8181      	strh	r1, [r0, #12]
 80046f6:	6643      	str	r3, [r0, #100]	; 0x64
 80046f8:	81c2      	strh	r2, [r0, #14]
 80046fa:	6183      	str	r3, [r0, #24]
 80046fc:	4619      	mov	r1, r3
 80046fe:	2208      	movs	r2, #8
 8004700:	305c      	adds	r0, #92	; 0x5c
 8004702:	f7ff fdef 	bl	80042e4 <memset>
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <std+0x38>)
 8004708:	6263      	str	r3, [r4, #36]	; 0x24
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <std+0x3c>)
 800470c:	62a3      	str	r3, [r4, #40]	; 0x28
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <std+0x40>)
 8004710:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004712:	4b05      	ldr	r3, [pc, #20]	; (8004728 <std+0x44>)
 8004714:	6224      	str	r4, [r4, #32]
 8004716:	6323      	str	r3, [r4, #48]	; 0x30
 8004718:	bd10      	pop	{r4, pc}
 800471a:	bf00      	nop
 800471c:	08004b11 	.word	0x08004b11
 8004720:	08004b33 	.word	0x08004b33
 8004724:	08004b6b 	.word	0x08004b6b
 8004728:	08004b8f 	.word	0x08004b8f

0800472c <_cleanup_r>:
 800472c:	4901      	ldr	r1, [pc, #4]	; (8004734 <_cleanup_r+0x8>)
 800472e:	f000 b8af 	b.w	8004890 <_fwalk_reent>
 8004732:	bf00      	nop
 8004734:	0800466d 	.word	0x0800466d

08004738 <__sfmoreglue>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	1e4a      	subs	r2, r1, #1
 800473c:	2568      	movs	r5, #104	; 0x68
 800473e:	4355      	muls	r5, r2
 8004740:	460e      	mov	r6, r1
 8004742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004746:	f000 f979 	bl	8004a3c <_malloc_r>
 800474a:	4604      	mov	r4, r0
 800474c:	b140      	cbz	r0, 8004760 <__sfmoreglue+0x28>
 800474e:	2100      	movs	r1, #0
 8004750:	e9c0 1600 	strd	r1, r6, [r0]
 8004754:	300c      	adds	r0, #12
 8004756:	60a0      	str	r0, [r4, #8]
 8004758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800475c:	f7ff fdc2 	bl	80042e4 <memset>
 8004760:	4620      	mov	r0, r4
 8004762:	bd70      	pop	{r4, r5, r6, pc}

08004764 <__sfp_lock_acquire>:
 8004764:	4801      	ldr	r0, [pc, #4]	; (800476c <__sfp_lock_acquire+0x8>)
 8004766:	f000 b8b3 	b.w	80048d0 <__retarget_lock_acquire_recursive>
 800476a:	bf00      	nop
 800476c:	20004240 	.word	0x20004240

08004770 <__sfp_lock_release>:
 8004770:	4801      	ldr	r0, [pc, #4]	; (8004778 <__sfp_lock_release+0x8>)
 8004772:	f000 b8ae 	b.w	80048d2 <__retarget_lock_release_recursive>
 8004776:	bf00      	nop
 8004778:	20004240 	.word	0x20004240

0800477c <__sinit_lock_acquire>:
 800477c:	4801      	ldr	r0, [pc, #4]	; (8004784 <__sinit_lock_acquire+0x8>)
 800477e:	f000 b8a7 	b.w	80048d0 <__retarget_lock_acquire_recursive>
 8004782:	bf00      	nop
 8004784:	2000423b 	.word	0x2000423b

08004788 <__sinit_lock_release>:
 8004788:	4801      	ldr	r0, [pc, #4]	; (8004790 <__sinit_lock_release+0x8>)
 800478a:	f000 b8a2 	b.w	80048d2 <__retarget_lock_release_recursive>
 800478e:	bf00      	nop
 8004790:	2000423b 	.word	0x2000423b

08004794 <__sinit>:
 8004794:	b510      	push	{r4, lr}
 8004796:	4604      	mov	r4, r0
 8004798:	f7ff fff0 	bl	800477c <__sinit_lock_acquire>
 800479c:	69a3      	ldr	r3, [r4, #24]
 800479e:	b11b      	cbz	r3, 80047a8 <__sinit+0x14>
 80047a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a4:	f7ff bff0 	b.w	8004788 <__sinit_lock_release>
 80047a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047ac:	6523      	str	r3, [r4, #80]	; 0x50
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <__sinit+0x68>)
 80047b0:	4a13      	ldr	r2, [pc, #76]	; (8004800 <__sinit+0x6c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80047b6:	42a3      	cmp	r3, r4
 80047b8:	bf04      	itt	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	61a3      	streq	r3, [r4, #24]
 80047be:	4620      	mov	r0, r4
 80047c0:	f000 f820 	bl	8004804 <__sfp>
 80047c4:	6060      	str	r0, [r4, #4]
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 f81c 	bl	8004804 <__sfp>
 80047cc:	60a0      	str	r0, [r4, #8]
 80047ce:	4620      	mov	r0, r4
 80047d0:	f000 f818 	bl	8004804 <__sfp>
 80047d4:	2200      	movs	r2, #0
 80047d6:	60e0      	str	r0, [r4, #12]
 80047d8:	2104      	movs	r1, #4
 80047da:	6860      	ldr	r0, [r4, #4]
 80047dc:	f7ff ff82 	bl	80046e4 <std>
 80047e0:	68a0      	ldr	r0, [r4, #8]
 80047e2:	2201      	movs	r2, #1
 80047e4:	2109      	movs	r1, #9
 80047e6:	f7ff ff7d 	bl	80046e4 <std>
 80047ea:	68e0      	ldr	r0, [r4, #12]
 80047ec:	2202      	movs	r2, #2
 80047ee:	2112      	movs	r1, #18
 80047f0:	f7ff ff78 	bl	80046e4 <std>
 80047f4:	2301      	movs	r3, #1
 80047f6:	61a3      	str	r3, [r4, #24]
 80047f8:	e7d2      	b.n	80047a0 <__sinit+0xc>
 80047fa:	bf00      	nop
 80047fc:	08004d2c 	.word	0x08004d2c
 8004800:	0800472d 	.word	0x0800472d

08004804 <__sfp>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	4607      	mov	r7, r0
 8004808:	f7ff ffac 	bl	8004764 <__sfp_lock_acquire>
 800480c:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <__sfp+0x84>)
 800480e:	681e      	ldr	r6, [r3, #0]
 8004810:	69b3      	ldr	r3, [r6, #24]
 8004812:	b913      	cbnz	r3, 800481a <__sfp+0x16>
 8004814:	4630      	mov	r0, r6
 8004816:	f7ff ffbd 	bl	8004794 <__sinit>
 800481a:	3648      	adds	r6, #72	; 0x48
 800481c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004820:	3b01      	subs	r3, #1
 8004822:	d503      	bpl.n	800482c <__sfp+0x28>
 8004824:	6833      	ldr	r3, [r6, #0]
 8004826:	b30b      	cbz	r3, 800486c <__sfp+0x68>
 8004828:	6836      	ldr	r6, [r6, #0]
 800482a:	e7f7      	b.n	800481c <__sfp+0x18>
 800482c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004830:	b9d5      	cbnz	r5, 8004868 <__sfp+0x64>
 8004832:	4b16      	ldr	r3, [pc, #88]	; (800488c <__sfp+0x88>)
 8004834:	60e3      	str	r3, [r4, #12]
 8004836:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800483a:	6665      	str	r5, [r4, #100]	; 0x64
 800483c:	f000 f847 	bl	80048ce <__retarget_lock_init_recursive>
 8004840:	f7ff ff96 	bl	8004770 <__sfp_lock_release>
 8004844:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004848:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800484c:	6025      	str	r5, [r4, #0]
 800484e:	61a5      	str	r5, [r4, #24]
 8004850:	2208      	movs	r2, #8
 8004852:	4629      	mov	r1, r5
 8004854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004858:	f7ff fd44 	bl	80042e4 <memset>
 800485c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004864:	4620      	mov	r0, r4
 8004866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004868:	3468      	adds	r4, #104	; 0x68
 800486a:	e7d9      	b.n	8004820 <__sfp+0x1c>
 800486c:	2104      	movs	r1, #4
 800486e:	4638      	mov	r0, r7
 8004870:	f7ff ff62 	bl	8004738 <__sfmoreglue>
 8004874:	4604      	mov	r4, r0
 8004876:	6030      	str	r0, [r6, #0]
 8004878:	2800      	cmp	r0, #0
 800487a:	d1d5      	bne.n	8004828 <__sfp+0x24>
 800487c:	f7ff ff78 	bl	8004770 <__sfp_lock_release>
 8004880:	230c      	movs	r3, #12
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	e7ee      	b.n	8004864 <__sfp+0x60>
 8004886:	bf00      	nop
 8004888:	08004d2c 	.word	0x08004d2c
 800488c:	ffff0001 	.word	0xffff0001

08004890 <_fwalk_reent>:
 8004890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004894:	4606      	mov	r6, r0
 8004896:	4688      	mov	r8, r1
 8004898:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800489c:	2700      	movs	r7, #0
 800489e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048a2:	f1b9 0901 	subs.w	r9, r9, #1
 80048a6:	d505      	bpl.n	80048b4 <_fwalk_reent+0x24>
 80048a8:	6824      	ldr	r4, [r4, #0]
 80048aa:	2c00      	cmp	r4, #0
 80048ac:	d1f7      	bne.n	800489e <_fwalk_reent+0xe>
 80048ae:	4638      	mov	r0, r7
 80048b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048b4:	89ab      	ldrh	r3, [r5, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d907      	bls.n	80048ca <_fwalk_reent+0x3a>
 80048ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048be:	3301      	adds	r3, #1
 80048c0:	d003      	beq.n	80048ca <_fwalk_reent+0x3a>
 80048c2:	4629      	mov	r1, r5
 80048c4:	4630      	mov	r0, r6
 80048c6:	47c0      	blx	r8
 80048c8:	4307      	orrs	r7, r0
 80048ca:	3568      	adds	r5, #104	; 0x68
 80048cc:	e7e9      	b.n	80048a2 <_fwalk_reent+0x12>

080048ce <__retarget_lock_init_recursive>:
 80048ce:	4770      	bx	lr

080048d0 <__retarget_lock_acquire_recursive>:
 80048d0:	4770      	bx	lr

080048d2 <__retarget_lock_release_recursive>:
 80048d2:	4770      	bx	lr

080048d4 <__swhatbuf_r>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	460e      	mov	r6, r1
 80048d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048dc:	2900      	cmp	r1, #0
 80048de:	b096      	sub	sp, #88	; 0x58
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	da07      	bge.n	80048f6 <__swhatbuf_r+0x22>
 80048e6:	2300      	movs	r3, #0
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	89b3      	ldrh	r3, [r6, #12]
 80048ec:	061a      	lsls	r2, r3, #24
 80048ee:	d410      	bmi.n	8004912 <__swhatbuf_r+0x3e>
 80048f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f4:	e00e      	b.n	8004914 <__swhatbuf_r+0x40>
 80048f6:	466a      	mov	r2, sp
 80048f8:	f000 f970 	bl	8004bdc <_fstat_r>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	dbf2      	blt.n	80048e6 <__swhatbuf_r+0x12>
 8004900:	9a01      	ldr	r2, [sp, #4]
 8004902:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004906:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800490a:	425a      	negs	r2, r3
 800490c:	415a      	adcs	r2, r3
 800490e:	602a      	str	r2, [r5, #0]
 8004910:	e7ee      	b.n	80048f0 <__swhatbuf_r+0x1c>
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	2000      	movs	r0, #0
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	b016      	add	sp, #88	; 0x58
 800491a:	bd70      	pop	{r4, r5, r6, pc}

0800491c <__smakebuf_r>:
 800491c:	898b      	ldrh	r3, [r1, #12]
 800491e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004920:	079d      	lsls	r5, r3, #30
 8004922:	4606      	mov	r6, r0
 8004924:	460c      	mov	r4, r1
 8004926:	d507      	bpl.n	8004938 <__smakebuf_r+0x1c>
 8004928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	2301      	movs	r3, #1
 8004932:	6163      	str	r3, [r4, #20]
 8004934:	b002      	add	sp, #8
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	ab01      	add	r3, sp, #4
 800493a:	466a      	mov	r2, sp
 800493c:	f7ff ffca 	bl	80048d4 <__swhatbuf_r>
 8004940:	9900      	ldr	r1, [sp, #0]
 8004942:	4605      	mov	r5, r0
 8004944:	4630      	mov	r0, r6
 8004946:	f000 f879 	bl	8004a3c <_malloc_r>
 800494a:	b948      	cbnz	r0, 8004960 <__smakebuf_r+0x44>
 800494c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004950:	059a      	lsls	r2, r3, #22
 8004952:	d4ef      	bmi.n	8004934 <__smakebuf_r+0x18>
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	e7e3      	b.n	8004928 <__smakebuf_r+0xc>
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <__smakebuf_r+0x7c>)
 8004962:	62b3      	str	r3, [r6, #40]	; 0x28
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	6020      	str	r0, [r4, #0]
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	9b00      	ldr	r3, [sp, #0]
 8004970:	6163      	str	r3, [r4, #20]
 8004972:	9b01      	ldr	r3, [sp, #4]
 8004974:	6120      	str	r0, [r4, #16]
 8004976:	b15b      	cbz	r3, 8004990 <__smakebuf_r+0x74>
 8004978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800497c:	4630      	mov	r0, r6
 800497e:	f000 f93f 	bl	8004c00 <_isatty_r>
 8004982:	b128      	cbz	r0, 8004990 <__smakebuf_r+0x74>
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	89a0      	ldrh	r0, [r4, #12]
 8004992:	4305      	orrs	r5, r0
 8004994:	81a5      	strh	r5, [r4, #12]
 8004996:	e7cd      	b.n	8004934 <__smakebuf_r+0x18>
 8004998:	0800472d 	.word	0x0800472d

0800499c <_free_r>:
 800499c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800499e:	2900      	cmp	r1, #0
 80049a0:	d048      	beq.n	8004a34 <_free_r+0x98>
 80049a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a6:	9001      	str	r0, [sp, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f1a1 0404 	sub.w	r4, r1, #4
 80049ae:	bfb8      	it	lt
 80049b0:	18e4      	addlt	r4, r4, r3
 80049b2:	f000 f947 	bl	8004c44 <__malloc_lock>
 80049b6:	4a20      	ldr	r2, [pc, #128]	; (8004a38 <_free_r+0x9c>)
 80049b8:	9801      	ldr	r0, [sp, #4]
 80049ba:	6813      	ldr	r3, [r2, #0]
 80049bc:	4615      	mov	r5, r2
 80049be:	b933      	cbnz	r3, 80049ce <_free_r+0x32>
 80049c0:	6063      	str	r3, [r4, #4]
 80049c2:	6014      	str	r4, [r2, #0]
 80049c4:	b003      	add	sp, #12
 80049c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049ca:	f000 b941 	b.w	8004c50 <__malloc_unlock>
 80049ce:	42a3      	cmp	r3, r4
 80049d0:	d90b      	bls.n	80049ea <_free_r+0x4e>
 80049d2:	6821      	ldr	r1, [r4, #0]
 80049d4:	1862      	adds	r2, r4, r1
 80049d6:	4293      	cmp	r3, r2
 80049d8:	bf04      	itt	eq
 80049da:	681a      	ldreq	r2, [r3, #0]
 80049dc:	685b      	ldreq	r3, [r3, #4]
 80049de:	6063      	str	r3, [r4, #4]
 80049e0:	bf04      	itt	eq
 80049e2:	1852      	addeq	r2, r2, r1
 80049e4:	6022      	streq	r2, [r4, #0]
 80049e6:	602c      	str	r4, [r5, #0]
 80049e8:	e7ec      	b.n	80049c4 <_free_r+0x28>
 80049ea:	461a      	mov	r2, r3
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b10b      	cbz	r3, 80049f4 <_free_r+0x58>
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d9fa      	bls.n	80049ea <_free_r+0x4e>
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	1855      	adds	r5, r2, r1
 80049f8:	42a5      	cmp	r5, r4
 80049fa:	d10b      	bne.n	8004a14 <_free_r+0x78>
 80049fc:	6824      	ldr	r4, [r4, #0]
 80049fe:	4421      	add	r1, r4
 8004a00:	1854      	adds	r4, r2, r1
 8004a02:	42a3      	cmp	r3, r4
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	d1dd      	bne.n	80049c4 <_free_r+0x28>
 8004a08:	681c      	ldr	r4, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	6053      	str	r3, [r2, #4]
 8004a0e:	4421      	add	r1, r4
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	e7d7      	b.n	80049c4 <_free_r+0x28>
 8004a14:	d902      	bls.n	8004a1c <_free_r+0x80>
 8004a16:	230c      	movs	r3, #12
 8004a18:	6003      	str	r3, [r0, #0]
 8004a1a:	e7d3      	b.n	80049c4 <_free_r+0x28>
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	1961      	adds	r1, r4, r5
 8004a20:	428b      	cmp	r3, r1
 8004a22:	bf04      	itt	eq
 8004a24:	6819      	ldreq	r1, [r3, #0]
 8004a26:	685b      	ldreq	r3, [r3, #4]
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	bf04      	itt	eq
 8004a2c:	1949      	addeq	r1, r1, r5
 8004a2e:	6021      	streq	r1, [r4, #0]
 8004a30:	6054      	str	r4, [r2, #4]
 8004a32:	e7c7      	b.n	80049c4 <_free_r+0x28>
 8004a34:	b003      	add	sp, #12
 8004a36:	bd30      	pop	{r4, r5, pc}
 8004a38:	20004200 	.word	0x20004200

08004a3c <_malloc_r>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	1ccd      	adds	r5, r1, #3
 8004a40:	f025 0503 	bic.w	r5, r5, #3
 8004a44:	3508      	adds	r5, #8
 8004a46:	2d0c      	cmp	r5, #12
 8004a48:	bf38      	it	cc
 8004a4a:	250c      	movcc	r5, #12
 8004a4c:	2d00      	cmp	r5, #0
 8004a4e:	4606      	mov	r6, r0
 8004a50:	db01      	blt.n	8004a56 <_malloc_r+0x1a>
 8004a52:	42a9      	cmp	r1, r5
 8004a54:	d903      	bls.n	8004a5e <_malloc_r+0x22>
 8004a56:	230c      	movs	r3, #12
 8004a58:	6033      	str	r3, [r6, #0]
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a5e:	f000 f8f1 	bl	8004c44 <__malloc_lock>
 8004a62:	4921      	ldr	r1, [pc, #132]	; (8004ae8 <_malloc_r+0xac>)
 8004a64:	680a      	ldr	r2, [r1, #0]
 8004a66:	4614      	mov	r4, r2
 8004a68:	b99c      	cbnz	r4, 8004a92 <_malloc_r+0x56>
 8004a6a:	4f20      	ldr	r7, [pc, #128]	; (8004aec <_malloc_r+0xb0>)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	b923      	cbnz	r3, 8004a7a <_malloc_r+0x3e>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4630      	mov	r0, r6
 8004a74:	f000 f83c 	bl	8004af0 <_sbrk_r>
 8004a78:	6038      	str	r0, [r7, #0]
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f000 f837 	bl	8004af0 <_sbrk_r>
 8004a82:	1c43      	adds	r3, r0, #1
 8004a84:	d123      	bne.n	8004ace <_malloc_r+0x92>
 8004a86:	230c      	movs	r3, #12
 8004a88:	6033      	str	r3, [r6, #0]
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	f000 f8e0 	bl	8004c50 <__malloc_unlock>
 8004a90:	e7e3      	b.n	8004a5a <_malloc_r+0x1e>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	1b5b      	subs	r3, r3, r5
 8004a96:	d417      	bmi.n	8004ac8 <_malloc_r+0x8c>
 8004a98:	2b0b      	cmp	r3, #11
 8004a9a:	d903      	bls.n	8004aa4 <_malloc_r+0x68>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	441c      	add	r4, r3
 8004aa0:	6025      	str	r5, [r4, #0]
 8004aa2:	e004      	b.n	8004aae <_malloc_r+0x72>
 8004aa4:	6863      	ldr	r3, [r4, #4]
 8004aa6:	42a2      	cmp	r2, r4
 8004aa8:	bf0c      	ite	eq
 8004aaa:	600b      	streq	r3, [r1, #0]
 8004aac:	6053      	strne	r3, [r2, #4]
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f000 f8ce 	bl	8004c50 <__malloc_unlock>
 8004ab4:	f104 000b 	add.w	r0, r4, #11
 8004ab8:	1d23      	adds	r3, r4, #4
 8004aba:	f020 0007 	bic.w	r0, r0, #7
 8004abe:	1ac2      	subs	r2, r0, r3
 8004ac0:	d0cc      	beq.n	8004a5c <_malloc_r+0x20>
 8004ac2:	1a1b      	subs	r3, r3, r0
 8004ac4:	50a3      	str	r3, [r4, r2]
 8004ac6:	e7c9      	b.n	8004a5c <_malloc_r+0x20>
 8004ac8:	4622      	mov	r2, r4
 8004aca:	6864      	ldr	r4, [r4, #4]
 8004acc:	e7cc      	b.n	8004a68 <_malloc_r+0x2c>
 8004ace:	1cc4      	adds	r4, r0, #3
 8004ad0:	f024 0403 	bic.w	r4, r4, #3
 8004ad4:	42a0      	cmp	r0, r4
 8004ad6:	d0e3      	beq.n	8004aa0 <_malloc_r+0x64>
 8004ad8:	1a21      	subs	r1, r4, r0
 8004ada:	4630      	mov	r0, r6
 8004adc:	f000 f808 	bl	8004af0 <_sbrk_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d1dd      	bne.n	8004aa0 <_malloc_r+0x64>
 8004ae4:	e7cf      	b.n	8004a86 <_malloc_r+0x4a>
 8004ae6:	bf00      	nop
 8004ae8:	20004200 	.word	0x20004200
 8004aec:	20004204 	.word	0x20004204

08004af0 <_sbrk_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4d06      	ldr	r5, [pc, #24]	; (8004b0c <_sbrk_r+0x1c>)
 8004af4:	2300      	movs	r3, #0
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	f000 f8c0 	bl	8004c80 <_sbrk>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_sbrk_r+0x1a>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_sbrk_r+0x1a>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	20004244 	.word	0x20004244

08004b10 <__sread>:
 8004b10:	b510      	push	{r4, lr}
 8004b12:	460c      	mov	r4, r1
 8004b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b18:	f000 f8a0 	bl	8004c5c <_read_r>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	bfab      	itete	ge
 8004b20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b22:	89a3      	ldrhlt	r3, [r4, #12]
 8004b24:	181b      	addge	r3, r3, r0
 8004b26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b2a:	bfac      	ite	ge
 8004b2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b2e:	81a3      	strhlt	r3, [r4, #12]
 8004b30:	bd10      	pop	{r4, pc}

08004b32 <__swrite>:
 8004b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b36:	461f      	mov	r7, r3
 8004b38:	898b      	ldrh	r3, [r1, #12]
 8004b3a:	05db      	lsls	r3, r3, #23
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	4616      	mov	r6, r2
 8004b42:	d505      	bpl.n	8004b50 <__swrite+0x1e>
 8004b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b48:	2302      	movs	r3, #2
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f000 f868 	bl	8004c20 <_lseek_r>
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	463b      	mov	r3, r7
 8004b60:	4628      	mov	r0, r5
 8004b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b66:	f000 b817 	b.w	8004b98 <_write_r>

08004b6a <__sseek>:
 8004b6a:	b510      	push	{r4, lr}
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b72:	f000 f855 	bl	8004c20 <_lseek_r>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	bf15      	itete	ne
 8004b7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b86:	81a3      	strheq	r3, [r4, #12]
 8004b88:	bf18      	it	ne
 8004b8a:	81a3      	strhne	r3, [r4, #12]
 8004b8c:	bd10      	pop	{r4, pc}

08004b8e <__sclose>:
 8004b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b92:	f000 b813 	b.w	8004bbc <_close_r>
	...

08004b98 <_write_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4d07      	ldr	r5, [pc, #28]	; (8004bb8 <_write_r+0x20>)
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	4608      	mov	r0, r1
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	602a      	str	r2, [r5, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f7fb fe58 	bl	800085c <_write>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d102      	bne.n	8004bb6 <_write_r+0x1e>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	b103      	cbz	r3, 8004bb6 <_write_r+0x1e>
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	20004244 	.word	0x20004244

08004bbc <_close_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4d06      	ldr	r5, [pc, #24]	; (8004bd8 <_close_r+0x1c>)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	f7fb fe64 	bl	8000894 <_close>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_close_r+0x1a>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_close_r+0x1a>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	20004244 	.word	0x20004244

08004bdc <_fstat_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d07      	ldr	r5, [pc, #28]	; (8004bfc <_fstat_r+0x20>)
 8004be0:	2300      	movs	r3, #0
 8004be2:	4604      	mov	r4, r0
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	f7fb fe5f 	bl	80008ac <_fstat>
 8004bee:	1c43      	adds	r3, r0, #1
 8004bf0:	d102      	bne.n	8004bf8 <_fstat_r+0x1c>
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	b103      	cbz	r3, 8004bf8 <_fstat_r+0x1c>
 8004bf6:	6023      	str	r3, [r4, #0]
 8004bf8:	bd38      	pop	{r3, r4, r5, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20004244 	.word	0x20004244

08004c00 <_isatty_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4d06      	ldr	r5, [pc, #24]	; (8004c1c <_isatty_r+0x1c>)
 8004c04:	2300      	movs	r3, #0
 8004c06:	4604      	mov	r4, r0
 8004c08:	4608      	mov	r0, r1
 8004c0a:	602b      	str	r3, [r5, #0]
 8004c0c:	f7fb fe5e 	bl	80008cc <_isatty>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d102      	bne.n	8004c1a <_isatty_r+0x1a>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	b103      	cbz	r3, 8004c1a <_isatty_r+0x1a>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	20004244 	.word	0x20004244

08004c20 <_lseek_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4d07      	ldr	r5, [pc, #28]	; (8004c40 <_lseek_r+0x20>)
 8004c24:	4604      	mov	r4, r0
 8004c26:	4608      	mov	r0, r1
 8004c28:	4611      	mov	r1, r2
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	602a      	str	r2, [r5, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f7fb fe57 	bl	80008e2 <_lseek>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d102      	bne.n	8004c3e <_lseek_r+0x1e>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <_lseek_r+0x1e>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	20004244 	.word	0x20004244

08004c44 <__malloc_lock>:
 8004c44:	4801      	ldr	r0, [pc, #4]	; (8004c4c <__malloc_lock+0x8>)
 8004c46:	f7ff be43 	b.w	80048d0 <__retarget_lock_acquire_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	2000423c 	.word	0x2000423c

08004c50 <__malloc_unlock>:
 8004c50:	4801      	ldr	r0, [pc, #4]	; (8004c58 <__malloc_unlock+0x8>)
 8004c52:	f7ff be3e 	b.w	80048d2 <__retarget_lock_release_recursive>
 8004c56:	bf00      	nop
 8004c58:	2000423c 	.word	0x2000423c

08004c5c <_read_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4d07      	ldr	r5, [pc, #28]	; (8004c7c <_read_r+0x20>)
 8004c60:	4604      	mov	r4, r0
 8004c62:	4608      	mov	r0, r1
 8004c64:	4611      	mov	r1, r2
 8004c66:	2200      	movs	r2, #0
 8004c68:	602a      	str	r2, [r5, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f7fb fdd9 	bl	8000822 <_read>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_read_r+0x1e>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_read_r+0x1e>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20004244 	.word	0x20004244

08004c80 <_sbrk>:
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <_sbrk+0x14>)
 8004c82:	6819      	ldr	r1, [r3, #0]
 8004c84:	4602      	mov	r2, r0
 8004c86:	b909      	cbnz	r1, 8004c8c <_sbrk+0xc>
 8004c88:	4903      	ldr	r1, [pc, #12]	; (8004c98 <_sbrk+0x18>)
 8004c8a:	6019      	str	r1, [r3, #0]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	4402      	add	r2, r0
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	4770      	bx	lr
 8004c94:	20004208 	.word	0x20004208
 8004c98:	20004248 	.word	0x20004248

08004c9c <_init>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	bf00      	nop
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr

08004ca8 <_fini>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	bf00      	nop
 8004cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cae:	bc08      	pop	{r3}
 8004cb0:	469e      	mov	lr, r3
 8004cb2:	4770      	bx	lr
