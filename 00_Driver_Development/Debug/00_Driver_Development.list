
00_Driver_Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000704  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080007c4  080007c4  000107c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007d0  080007d0  000107d8  2**0
                  CONTENTS
  4 .ARM          00000000  080007d0  080007d0  000107d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d0  080007d8  000107d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d0  080007d0  000107d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007d4  080007d4  000107d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007d8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000107d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001638  00000000  00000000  00010800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000045c  00000000  00000000  00011e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00012298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  000123b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001fc2  00000000  00000000  00012478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000133c  00000000  00000000  0001443a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008785  00000000  00000000  00015776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001defb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000031c  00000000  00000000  0001df50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080007ac 	.word	0x080007ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080007ac 	.word	0x080007ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <SPI2_GPIOInit>:
 * ALT fun mode is 0
 */
#include<string.h>
#include "stm32f0xx.h"

void SPI2_GPIOInit(void){
 8000118:	b580      	push	{r7, lr}
 800011a:	b084      	sub	sp, #16
 800011c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx=GPIOB;
 800011e:	1d3b      	adds	r3, r7, #4
 8000120:	4a13      	ldr	r2, [pc, #76]	; (8000170 <SPI2_GPIOInit+0x58>)
 8000122:	601a      	str	r2, [r3, #0]
	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000124:	4b12      	ldr	r3, [pc, #72]	; (8000170 <SPI2_GPIOInit+0x58>)
 8000126:	2101      	movs	r1, #1
 8000128:	0018      	movs	r0, r3
 800012a:	f000 f88f 	bl	800024c <GPIO_PeriClockControl>

	SPIPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 800012e:	1d3b      	adds	r3, r7, #4
 8000130:	2202      	movs	r2, #2
 8000132:	715a      	strb	r2, [r3, #5]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 3;
 8000134:	1d3b      	adds	r3, r7, #4
 8000136:	2203      	movs	r2, #3
 8000138:	725a      	strb	r2, [r3, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 800013a:	1d3b      	adds	r3, r7, #4
 800013c:	2200      	movs	r2, #0
 800013e:	721a      	strb	r2, [r3, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000140:	1d3b      	adds	r3, r7, #4
 8000142:	2200      	movs	r2, #0
 8000144:	71da      	strb	r2, [r3, #7]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_HIGH;
 8000146:	1d3b      	adds	r3, r7, #4
 8000148:	2203      	movs	r2, #3
 800014a:	719a      	strb	r2, [r3, #6]


	//SCLK PIN
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 800014c:	1d3b      	adds	r3, r7, #4
 800014e:	220d      	movs	r2, #13
 8000150:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	0018      	movs	r0, r3
 8000156:	f000 f92b 	bl	80003b0 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_15;
 800015a:	1d3b      	adds	r3, r7, #4
 800015c:	220f      	movs	r2, #15
 800015e:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 8000160:	1d3b      	adds	r3, r7, #4
 8000162:	0018      	movs	r0, r3
 8000164:	f000 f924 	bl	80003b0 <GPIO_Init>
	//	GPIO_Init(&SPIPins);

	//NSS
	//	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_12;
	//	GPIO_Init(&SPIPins);
}
 8000168:	46c0      	nop			; (mov r8, r8)
 800016a:	46bd      	mov	sp, r7
 800016c:	b004      	add	sp, #16
 800016e:	bd80      	pop	{r7, pc}
 8000170:	48000400 	.word	0x48000400

08000174 <SPI2_Inits>:

void SPI2_Inits(void){
 8000174:	b580      	push	{r7, lr}
 8000176:	b084      	sub	sp, #16
 8000178:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	4a0f      	ldr	r2, [pc, #60]	; (80001bc <SPI2_Inits+0x48>)
 800017e:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig=SPI_BUS_CONFIG_FD;
 8000180:	1d3b      	adds	r3, r7, #4
 8000182:	2201      	movs	r2, #1
 8000184:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode=SPI_DEVICE_MODE_MASTER;
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	2201      	movs	r2, #1
 800018a:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; //Generates sereal clock OF 8 Mhz
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_CRCL = SPI_CRCL_8BITS;
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL=SPI_CPOL_LOW;
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2200      	movs	r2, #0
 800019c:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA=SPI_CPHA_LOW;
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	2200      	movs	r2, #0
 80001a2:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM=SPI_SSM_EN; 	//software slave management for NSS pin
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2201      	movs	r2, #1
 80001a8:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	0018      	movs	r0, r3
 80001ae:	f000 fa13 	bl	80005d8 <SPI_Init>
}
 80001b2:	46c0      	nop			; (mov r8, r8)
 80001b4:	46bd      	mov	sp, r7
 80001b6:	b004      	add	sp, #16
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	46c0      	nop			; (mov r8, r8)
 80001bc:	40003800 	.word	0x40003800

080001c0 <main>:

int  main(){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
	char *user_data="hello world";
 80001c6:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <main+0x34>)
 80001c8:	607b      	str	r3, [r7, #4]
	SPI2_GPIOInit();
 80001ca:	f7ff ffa5 	bl	8000118 <SPI2_GPIOInit>
	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_Inits();
 80001ce:	f7ff ffd1 	bl	8000174 <SPI2_Inits>

	//enable the SPI peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <main+0x38>)
 80001d4:	2101      	movs	r1, #1
 80001d6:	0018      	movs	r0, r3
 80001d8:	f000 faa7 	bl	800072a <SPI_PeripheralControl>

	//send data
	SPI_SendData(SPI2,user_data,strlen(user_data));
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	0018      	movs	r0, r3
 80001e0:	f7ff ff92 	bl	8000108 <strlen>
 80001e4:	0002      	movs	r2, r0
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <main+0x38>)
 80001ea:	0019      	movs	r1, r3
 80001ec:	f000 fa67 	bl	80006be <SPI_SendData>
	while(1);
 80001f0:	e7fe      	b.n	80001f0 <main+0x30>
 80001f2:	46c0      	nop			; (mov r8, r8)
 80001f4:	080007c4 	.word	0x080007c4
 80001f8:	40003800 	.word	0x40003800

080001fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000200:	e000      	b.n	8000204 <Reset_Handler+0x8>
 8000202:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <LoopForever+0x6>)
  ldr r1, =_edata
 8000206:	490d      	ldr	r1, [pc, #52]	; (800023c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000208:	4a0d      	ldr	r2, [pc, #52]	; (8000240 <LoopForever+0xe>)
  movs r3, #0
 800020a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800020c:	e002      	b.n	8000214 <LoopCopyDataInit>

0800020e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000212:	3304      	adds	r3, #4

08000214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000218:	d3f9      	bcc.n	800020e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021a:	4a0a      	ldr	r2, [pc, #40]	; (8000244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800021c:	4c0a      	ldr	r4, [pc, #40]	; (8000248 <LoopForever+0x16>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000220:	e001      	b.n	8000226 <LoopFillZerobss>

08000222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000224:	3204      	adds	r2, #4

08000226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000228:	d3fb      	bcc.n	8000222 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022a:	f000 fa9b 	bl	8000764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022e:	f7ff ffc7 	bl	80001c0 <main>

08000232 <LoopForever>:

LoopForever:
    b LoopForever
 8000232:	e7fe      	b.n	8000232 <LoopForever>
  ldr   r0, =_estack
 8000234:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800023c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000240:	080007d8 	.word	0x080007d8
  ldr r2, =_sbss
 8000244:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000248:	2000001c 	.word	0x2000001c

0800024c <GPIO_PeriClockControl>:
 * peripheral clock setup
 */
//by using this function we are going to enable or disable the peripheral clock for given gpio base address
//so first parameter pointer to the base address
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	000a      	movs	r2, r1
 8000256:	1cfb      	adds	r3, r7, #3
 8000258:	701a      	strb	r2, [r3, #0]
if(EnorDi == ENABLE)
 800025a:	1cfb      	adds	r3, r7, #3
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d148      	bne.n	80002f4 <GPIO_PeriClockControl+0xa8>
{
	if(pGPIOx == GPIOA)
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	2390      	movs	r3, #144	; 0x90
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	429a      	cmp	r2, r3
 800026a:	d107      	bne.n	800027c <GPIO_PeriClockControl+0x30>
	{
		GPIOA_PCLK_EN();
 800026c:	4b44      	ldr	r3, [pc, #272]	; (8000380 <GPIO_PeriClockControl+0x134>)
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	4b43      	ldr	r3, [pc, #268]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000272:	2180      	movs	r1, #128	; 0x80
 8000274:	0289      	lsls	r1, r1, #10
 8000276:	430a      	orrs	r2, r1
 8000278:	615a      	str	r2, [r3, #20]
		}else if(pGPIOx == GPIOF)
		{
			GPIOF_PCLK_DI();
		}
}
}
 800027a:	e07d      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
	}else if(pGPIOx == GPIOB)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4a41      	ldr	r2, [pc, #260]	; (8000384 <GPIO_PeriClockControl+0x138>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d107      	bne.n	8000294 <GPIO_PeriClockControl+0x48>
		GPIOB_PCLK_EN();
 8000284:	4b3e      	ldr	r3, [pc, #248]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	4b3d      	ldr	r3, [pc, #244]	; (8000380 <GPIO_PeriClockControl+0x134>)
 800028a:	2180      	movs	r1, #128	; 0x80
 800028c:	02c9      	lsls	r1, r1, #11
 800028e:	430a      	orrs	r2, r1
 8000290:	615a      	str	r2, [r3, #20]
}
 8000292:	e071      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
	}else if(pGPIOx == GPIOC)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a3c      	ldr	r2, [pc, #240]	; (8000388 <GPIO_PeriClockControl+0x13c>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d107      	bne.n	80002ac <GPIO_PeriClockControl+0x60>
		GPIOC_PCLK_EN();
 800029c:	4b38      	ldr	r3, [pc, #224]	; (8000380 <GPIO_PeriClockControl+0x134>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	4b37      	ldr	r3, [pc, #220]	; (8000380 <GPIO_PeriClockControl+0x134>)
 80002a2:	2180      	movs	r1, #128	; 0x80
 80002a4:	0309      	lsls	r1, r1, #12
 80002a6:	430a      	orrs	r2, r1
 80002a8:	615a      	str	r2, [r3, #20]
}
 80002aa:	e065      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
	}else if(pGPIOx == GPIOD)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a37      	ldr	r2, [pc, #220]	; (800038c <GPIO_PeriClockControl+0x140>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d107      	bne.n	80002c4 <GPIO_PeriClockControl+0x78>
		GPIOD_PCLK_EN();
 80002b4:	4b32      	ldr	r3, [pc, #200]	; (8000380 <GPIO_PeriClockControl+0x134>)
 80002b6:	695a      	ldr	r2, [r3, #20]
 80002b8:	4b31      	ldr	r3, [pc, #196]	; (8000380 <GPIO_PeriClockControl+0x134>)
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	0349      	lsls	r1, r1, #13
 80002be:	430a      	orrs	r2, r1
 80002c0:	615a      	str	r2, [r3, #20]
}
 80002c2:	e059      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
	}else if(pGPIOx == GPIOE)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a32      	ldr	r2, [pc, #200]	; (8000390 <GPIO_PeriClockControl+0x144>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d107      	bne.n	80002dc <GPIO_PeriClockControl+0x90>
		GPIOE_PCLK_EN();
 80002cc:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <GPIO_PeriClockControl+0x134>)
 80002ce:	695a      	ldr	r2, [r3, #20]
 80002d0:	4b2b      	ldr	r3, [pc, #172]	; (8000380 <GPIO_PeriClockControl+0x134>)
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	0389      	lsls	r1, r1, #14
 80002d6:	430a      	orrs	r2, r1
 80002d8:	615a      	str	r2, [r3, #20]
}
 80002da:	e04d      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
	}else if(pGPIOx == GPIOF)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a2d      	ldr	r2, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x148>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d149      	bne.n	8000378 <GPIO_PeriClockControl+0x12c>
		GPIOF_PCLK_EN();
 80002e4:	4b26      	ldr	r3, [pc, #152]	; (8000380 <GPIO_PeriClockControl+0x134>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4b25      	ldr	r3, [pc, #148]	; (8000380 <GPIO_PeriClockControl+0x134>)
 80002ea:	2180      	movs	r1, #128	; 0x80
 80002ec:	03c9      	lsls	r1, r1, #15
 80002ee:	430a      	orrs	r2, r1
 80002f0:	615a      	str	r2, [r3, #20]
}
 80002f2:	e041      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
		if(pGPIOx == GPIOA)
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	2390      	movs	r3, #144	; 0x90
 80002f8:	05db      	lsls	r3, r3, #23
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClockControl+0xc0>
			GPIOA_PCLK_DI();
 80002fe:	4b20      	ldr	r3, [pc, #128]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000300:	695a      	ldr	r2, [r3, #20]
 8000302:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000304:	4924      	ldr	r1, [pc, #144]	; (8000398 <GPIO_PeriClockControl+0x14c>)
 8000306:	400a      	ands	r2, r1
 8000308:	615a      	str	r2, [r3, #20]
}
 800030a:	e035      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
		}else if(pGPIOx == GPIOB)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a1d      	ldr	r2, [pc, #116]	; (8000384 <GPIO_PeriClockControl+0x138>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClockControl+0xd6>
			GPIOB_PCLK_DI();
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <GPIO_PeriClockControl+0x134>)
 800031a:	4920      	ldr	r1, [pc, #128]	; (800039c <GPIO_PeriClockControl+0x150>)
 800031c:	400a      	ands	r2, r1
 800031e:	615a      	str	r2, [r3, #20]
}
 8000320:	e02a      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
		}else if(pGPIOx == GPIOC)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a18      	ldr	r2, [pc, #96]	; (8000388 <GPIO_PeriClockControl+0x13c>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0xec>
			GPIOC_PCLK_DI();
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <GPIO_PeriClockControl+0x134>)
 800032c:	695a      	ldr	r2, [r3, #20]
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000330:	491b      	ldr	r1, [pc, #108]	; (80003a0 <GPIO_PeriClockControl+0x154>)
 8000332:	400a      	ands	r2, r1
 8000334:	615a      	str	r2, [r3, #20]
}
 8000336:	e01f      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
		}else if(pGPIOx == GPIOD)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <GPIO_PeriClockControl+0x140>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriClockControl+0x102>
			GPIOD_PCLK_DI();
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000342:	695a      	ldr	r2, [r3, #20]
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000346:	4917      	ldr	r1, [pc, #92]	; (80003a4 <GPIO_PeriClockControl+0x158>)
 8000348:	400a      	ands	r2, r1
 800034a:	615a      	str	r2, [r3, #20]
}
 800034c:	e014      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
		}else if(pGPIOx == GPIOE)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <GPIO_PeriClockControl+0x144>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0x118>
			GPIOE_PCLK_DI();
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000358:	695a      	ldr	r2, [r3, #20]
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <GPIO_PeriClockControl+0x134>)
 800035c:	4912      	ldr	r1, [pc, #72]	; (80003a8 <GPIO_PeriClockControl+0x15c>)
 800035e:	400a      	ands	r2, r1
 8000360:	615a      	str	r2, [r3, #20]
}
 8000362:	e009      	b.n	8000378 <GPIO_PeriClockControl+0x12c>
		}else if(pGPIOx == GPIOF)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x148>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d105      	bne.n	8000378 <GPIO_PeriClockControl+0x12c>
			GPIOF_PCLK_DI();
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <GPIO_PeriClockControl+0x134>)
 800036e:	695a      	ldr	r2, [r3, #20]
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <GPIO_PeriClockControl+0x134>)
 8000372:	490e      	ldr	r1, [pc, #56]	; (80003ac <GPIO_PeriClockControl+0x160>)
 8000374:	400a      	ands	r2, r1
 8000376:	615a      	str	r2, [r3, #20]
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b002      	add	sp, #8
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	48000400 	.word	0x48000400
 8000388:	48000800 	.word	0x48000800
 800038c:	48000c00 	.word	0x48000c00
 8000390:	48001000 	.word	0x48001000
 8000394:	48001400 	.word	0x48001400
 8000398:	fffdffff 	.word	0xfffdffff
 800039c:	fffbffff 	.word	0xfffbffff
 80003a0:	fff7ffff 	.word	0xfff7ffff
 80003a4:	ffefffff 	.word	0xffefffff
 80003a8:	ffdfffff 	.word	0xffdfffff
 80003ac:	ffbfffff 	.word	0xffbfffff

080003b0 <GPIO_Init>:
/*
 * initialize  and de-initialize
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)    //API to initialize  given gpio pin.
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2101      	movs	r1, #1
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ff42 	bl	800024c <GPIO_PeriClockControl>

//1.configure the mode of gpio pin.
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG )
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	795b      	ldrb	r3, [r3, #5]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d81e      	bhi.n	800040e <GPIO_Init+0x5e>
	{
		//the non interrupt mode
		//temp is the variable to store the number which will set to the required register.
		temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	001a      	movs	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	409a      	lsls	r2, r3
 80003de:	0013      	movs	r3, r2
 80003e0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing before setting.
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	0019      	movs	r1, r3
 80003ee:	2303      	movs	r3, #3
 80003f0:	408b      	lsls	r3, r1
 80003f2:	43db      	mvns	r3, r3
 80003f4:	0019      	movs	r1, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	400a      	ands	r2, r1
 80003fc:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	6819      	ldr	r1, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	430a      	orrs	r2, r1
 800040c:	601a      	str	r2, [r3, #0]
	}else{
		//this part will see later. //interrupt mode


	}
	temp=0;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
//2. configure the speed.
	temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	799b      	ldrb	r3, [r3, #6]
 8000416:	001a      	movs	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	409a      	lsls	r2, r3
 8000420:	0013      	movs	r3, r2
 8000422:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing bits before setting
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	0019      	movs	r1, r3
 8000430:	2303      	movs	r3, #3
 8000432:	408b      	lsls	r3, r1
 8000434:	43db      	mvns	r3, r3
 8000436:	0019      	movs	r1, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	400a      	ands	r2, r1
 800043e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |=temp;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	6899      	ldr	r1, [r3, #8]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	697a      	ldr	r2, [r7, #20]
 800044c:	430a      	orrs	r2, r1
 800044e:	609a      	str	r2, [r3, #8]

	temp=0;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]

//3. configure the pull up and pull down speed
	temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	79db      	ldrb	r3, [r3, #7]
 8000458:	001a      	movs	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	409a      	lsls	r2, r3
 8000462:	0013      	movs	r3, r2
 8000464:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing bits before setting
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68da      	ldr	r2, [r3, #12]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	0019      	movs	r1, r3
 8000472:	2303      	movs	r3, #3
 8000474:	408b      	lsls	r3, r1
 8000476:	43db      	mvns	r3, r3
 8000478:	0019      	movs	r1, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	400a      	ands	r2, r1
 8000480:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=temp;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	68d9      	ldr	r1, [r3, #12]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	430a      	orrs	r2, r1
 8000490:	60da      	str	r2, [r3, #12]

	temp=0;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]

//4.configure the output type
	temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	7a1b      	ldrb	r3, [r3, #8]
 800049a:	001a      	movs	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	409a      	lsls	r2, r3
 80004a2:	0013      	movs	r3, r2
 80004a4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing bits before setting
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	0019      	movs	r1, r3
 80004b2:	2301      	movs	r3, #1
 80004b4:	408b      	lsls	r3, r1
 80004b6:	43db      	mvns	r3, r3
 80004b8:	0019      	movs	r1, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	400a      	ands	r2, r1
 80004c0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |=temp;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6859      	ldr	r1, [r3, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	430a      	orrs	r2, r1
 80004d0:	605a      	str	r2, [r3, #4]

	temp=0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]

//5.configure the Alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_ALTFN){
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	7a5b      	ldrb	r3, [r3, #9]
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d133      	bne.n	8000546 <GPIO_Init+0x196>

		//configure the alt function register
		uint32_t temp1, temp2;

		temp1= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;   //this will decide the AFR register
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	08db      	lsrs	r3, r3, #3
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	613b      	str	r3, [r7, #16]
		temp2= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  //this is for reaching the address to set the values
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	001a      	movs	r2, r3
 80004ee:	2307      	movs	r3, #7
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<(4*temp2));  //clearing bits before setting
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	693a      	ldr	r2, [r7, #16]
 80004fa:	3208      	adds	r2, #8
 80004fc:	0092      	lsls	r2, r2, #2
 80004fe:	58d2      	ldr	r2, [r2, r3]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	210f      	movs	r1, #15
 8000506:	4099      	lsls	r1, r3
 8000508:	000b      	movs	r3, r1
 800050a:	43db      	mvns	r3, r3
 800050c:	0019      	movs	r1, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4011      	ands	r1, r2
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	3208      	adds	r2, #8
 8000518:	0092      	lsls	r2, r2, #2
 800051a:	50d1      	str	r1, [r2, r3]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<(4*temp2));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	693a      	ldr	r2, [r7, #16]
 8000522:	3208      	adds	r2, #8
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	58d2      	ldr	r2, [r2, r3]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7a5b      	ldrb	r3, [r3, #9]
 800052c:	0019      	movs	r1, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4099      	lsls	r1, r3
 8000534:	000b      	movs	r3, r1
 8000536:	0019      	movs	r1, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4311      	orrs	r1, r2
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	3208      	adds	r2, #8
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	50d1      	str	r1, [r2, r3]
	}
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b006      	add	sp, #24
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	000a      	movs	r2, r1
 800055a:	1cfb      	adds	r3, r7, #3
 800055c:	701a      	strb	r2, [r3, #0]
if(EnorDi == ENABLE)
 800055e:	1cfb      	adds	r3, r7, #3
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d117      	bne.n	8000596 <SPI_PeriClockControl+0x46>
{
	if(pSPIx == SPI1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <SPI_PeriClockControl+0x78>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d107      	bne.n	800057e <SPI_PeriClockControl+0x2e>
	{
		SPI1_PCLK_EN();
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <SPI_PeriClockControl+0x7c>)
 8000570:	699a      	ldr	r2, [r3, #24]
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <SPI_PeriClockControl+0x7c>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	0149      	lsls	r1, r1, #5
 8000578:	430a      	orrs	r2, r1
 800057a:	619a      	str	r2, [r3, #24]
		}else if(pSPIx == SPI2)
		{
			SPI1_PCLK_DI();
		}
}
}
 800057c:	e020      	b.n	80005c0 <SPI_PeriClockControl+0x70>
	}else if(pSPIx == SPI2)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <SPI_PeriClockControl+0x80>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d11c      	bne.n	80005c0 <SPI_PeriClockControl+0x70>
		SPI2_PCLK_EN();
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <SPI_PeriClockControl+0x7c>)
 8000588:	69da      	ldr	r2, [r3, #28]
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <SPI_PeriClockControl+0x7c>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	01c9      	lsls	r1, r1, #7
 8000590:	430a      	orrs	r2, r1
 8000592:	61da      	str	r2, [r3, #28]
}
 8000594:	e014      	b.n	80005c0 <SPI_PeriClockControl+0x70>
		if(pSPIx == SPI1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <SPI_PeriClockControl+0x78>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <SPI_PeriClockControl+0x5c>
			SPI1_PCLK_DI();
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <SPI_PeriClockControl+0x7c>)
 80005a0:	699a      	ldr	r2, [r3, #24]
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <SPI_PeriClockControl+0x7c>)
 80005a4:	490b      	ldr	r1, [pc, #44]	; (80005d4 <SPI_PeriClockControl+0x84>)
 80005a6:	400a      	ands	r2, r1
 80005a8:	619a      	str	r2, [r3, #24]
}
 80005aa:	e009      	b.n	80005c0 <SPI_PeriClockControl+0x70>
		}else if(pSPIx == SPI2)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <SPI_PeriClockControl+0x80>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d105      	bne.n	80005c0 <SPI_PeriClockControl+0x70>
			SPI1_PCLK_DI();
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <SPI_PeriClockControl+0x7c>)
 80005b6:	699a      	ldr	r2, [r3, #24]
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <SPI_PeriClockControl+0x7c>)
 80005ba:	4906      	ldr	r1, [pc, #24]	; (80005d4 <SPI_PeriClockControl+0x84>)
 80005bc:	400a      	ands	r2, r1
 80005be:	619a      	str	r2, [r3, #24]
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b002      	add	sp, #8
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40013000 	.word	0x40013000
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40003800 	.word	0x40003800
 80005d4:	ffffefff 	.word	0xffffefff

080005d8 <SPI_Init>:
 * @return            -
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
//first lets configure the SPI_CR1 register
	uint32_t tempreg =0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]

	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2101      	movs	r1, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff ffb0 	bl	8000550 <SPI_PeriClockControl>

//1.configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	001a      	movs	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]

//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d104      	bne.n	8000610 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<<15);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4a23      	ldr	r2, [pc, #140]	; (8000698 <SPI_Init+0xc0>)
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e016      	b.n	800063e <SPI_Init+0x66>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	795b      	ldrb	r3, [r3, #5]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d105      	bne.n	8000624 <SPI_Init+0x4c>
	{
		//bidi mode should be set
		tempreg |= (1<<15);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	0212      	lsls	r2, r2, #8
 800061e:	4313      	orrs	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e00c      	b.n	800063e <SPI_Init+0x66>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	795b      	ldrb	r3, [r3, #5]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d108      	bne.n	800063e <SPI_Init+0x66>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<15);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <SPI_Init+0xc0>)
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<10);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	00d2      	lsls	r2, r2, #3
 800063a:	4313      	orrs	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
	}

	//3.configuration the spi serial clock (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed <<SPI_CR1_BR;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	799b      	ldrb	r3, [r3, #6]
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	001a      	movs	r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4313      	orrs	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]

	//4. Configure the CRCL
	tempreg |= pSPIHandle->SPIConfig.SPI_CRCL <<SPI_CR1_CRCL;  //here issue will created
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	79db      	ldrb	r3, [r3, #7]
 8000650:	02db      	lsls	r3, r3, #11
 8000652:	001a      	movs	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4313      	orrs	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]

	//5.configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL <<SPI_CR1_CPOL;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	7a1b      	ldrb	r3, [r3, #8]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	001a      	movs	r2, r3
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4313      	orrs	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]

	//6. configure the CPha
	tempreg|= pSPIHandle->SPIConfig.SPI_CPHA<<SPI_CR1_CPHA;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7a5b      	ldrb	r3, [r3, #9]
 800066c:	001a      	movs	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4313      	orrs	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]


//saving the tempreg in reagister
	pSPIHandle->pSPIx->CR1  = tempreg;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	601a      	str	r2, [r3, #0]

	//additionaly accessing the CR2 register then setting the DS
	pSPIHandle->pSPIx->CR2 |= (SPI_DS_8BITS<<SPI_CR2_DS);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	21e0      	movs	r1, #224	; 0xe0
 8000688:	00c9      	lsls	r1, r1, #3
 800068a:	430a      	orrs	r2, r1
 800068c:	605a      	str	r2, [r3, #4]
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b004      	add	sp, #16
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	ffff7fff 	.word	0xffff7fff

0800069c <SPI_GetFlagStatus>:
void SPI_Denit(SPI_RegDef_t *pSPIx){

}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t FlagName){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	4013      	ands	r3, r2
 80006ae:	d001      	beq.n	80006b4 <SPI_GetFlagStatus+0x18>
	{
		return FLAG_SET;
 80006b0:	2301      	movs	r3, #1
 80006b2:	e000      	b.n	80006b6 <SPI_GetFlagStatus+0x1a>
	}
	return FLAG_RESET;
 80006b4:	2300      	movs	r3, #0

}
 80006b6:	0018      	movs	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}

080006be <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */

void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer,uint32_t Len){
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]

	while(Len>0)
 80006ca:	e026      	b.n	800071a <SPI_SendData+0x5c>
	{
		//1. wait until TXE is set, so check status register if 0 then wait
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)==FLAG_RESET);
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	2102      	movs	r1, #2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ffe2 	bl	800069c <SPI_GetFlagStatus>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d0f8      	beq.n	80006ce <SPI_SendData+0x10>

		//2.check the CRCL bit in CR1
		//if 16 bit
		if(pSPIx->CR1 & (1<<SPI_CRCL_16BITS))      //need to check and update
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2202      	movs	r2, #2
 80006e2:	4013      	ands	r3, r2
 80006e4:	d00e      	beq.n	8000704 <SPI_SendData+0x46>
		{
			//if 16 bit DFF
			//1. load the data in to the data register.
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	001a      	movs	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	60da      	str	r2, [r3, #12]
			Len--;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
			Len--;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3301      	adds	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	e00a      	b.n	800071a <SPI_SendData+0x5c>
		}else{
			//elseif 8 bit DFF
			pSPIx->DR =*pTxBuffer;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	001a      	movs	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	60da      	str	r2, [r3, #12]
			Len--;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3b01      	subs	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	3301      	adds	r3, #1
 8000718:	60bb      	str	r3, [r7, #8]
	while(Len>0)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1d5      	bne.n	80006cc <SPI_SendData+0xe>
		}

	}
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b004      	add	sp, #16
 8000728:	bd80      	pop	{r7, pc}

0800072a <SPI_PeripheralControl>:
/***************************************************************************
 * spi peripheral enable
 */

 void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnOrDi)
 {
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	000a      	movs	r2, r1
 8000734:	1cfb      	adds	r3, r7, #3
 8000736:	701a      	strb	r2, [r3, #0]
	 if(EnOrDi == ENABLE)
 8000738:	1cfb      	adds	r3, r7, #3
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d106      	bne.n	800074e <SPI_PeripheralControl+0x24>
	 {
		 pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2240      	movs	r2, #64	; 0x40
 8000746:	431a      	orrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	601a      	str	r2, [r3, #0]
	 }else{
		 pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	 }
 }
 800074c:	e006      	b.n	800075c <SPI_PeripheralControl+0x32>
		 pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2240      	movs	r2, #64	; 0x40
 8000754:	4393      	bics	r3, r2
 8000756:	001a      	movs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	601a      	str	r2, [r3, #0]
 }
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b002      	add	sp, #8
 8000762:	bd80      	pop	{r7, pc}

08000764 <__libc_init_array>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	2600      	movs	r6, #0
 8000768:	4d0c      	ldr	r5, [pc, #48]	; (800079c <__libc_init_array+0x38>)
 800076a:	4c0d      	ldr	r4, [pc, #52]	; (80007a0 <__libc_init_array+0x3c>)
 800076c:	1b64      	subs	r4, r4, r5
 800076e:	10a4      	asrs	r4, r4, #2
 8000770:	42a6      	cmp	r6, r4
 8000772:	d109      	bne.n	8000788 <__libc_init_array+0x24>
 8000774:	2600      	movs	r6, #0
 8000776:	f000 f819 	bl	80007ac <_init>
 800077a:	4d0a      	ldr	r5, [pc, #40]	; (80007a4 <__libc_init_array+0x40>)
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <__libc_init_array+0x44>)
 800077e:	1b64      	subs	r4, r4, r5
 8000780:	10a4      	asrs	r4, r4, #2
 8000782:	42a6      	cmp	r6, r4
 8000784:	d105      	bne.n	8000792 <__libc_init_array+0x2e>
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	00b3      	lsls	r3, r6, #2
 800078a:	58eb      	ldr	r3, [r5, r3]
 800078c:	4798      	blx	r3
 800078e:	3601      	adds	r6, #1
 8000790:	e7ee      	b.n	8000770 <__libc_init_array+0xc>
 8000792:	00b3      	lsls	r3, r6, #2
 8000794:	58eb      	ldr	r3, [r5, r3]
 8000796:	4798      	blx	r3
 8000798:	3601      	adds	r6, #1
 800079a:	e7f2      	b.n	8000782 <__libc_init_array+0x1e>
 800079c:	080007d0 	.word	0x080007d0
 80007a0:	080007d0 	.word	0x080007d0
 80007a4:	080007d0 	.word	0x080007d0
 80007a8:	080007d4 	.word	0x080007d4

080007ac <_init>:
 80007ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b2:	bc08      	pop	{r3}
 80007b4:	469e      	mov	lr, r3
 80007b6:	4770      	bx	lr

080007b8 <_fini>:
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007be:	bc08      	pop	{r3}
 80007c0:	469e      	mov	lr, r3
 80007c2:	4770      	bx	lr
