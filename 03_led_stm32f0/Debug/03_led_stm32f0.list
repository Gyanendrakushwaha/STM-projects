
03_led_stm32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000290  08000290  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000290  08000290  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000290  08000290  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000290  08000290  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000290  08000290  00010290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000294  08000294  00010294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000298  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800029c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800029c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000176f  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000632  00000000  00000000  0002179b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00021dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  00021f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010594  00000000  00000000  00022088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fdc  00000000  00000000  0003261c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063cb3  00000000  00000000  000345f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000982ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003e8  00000000  00000000  00098300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000278 	.word	0x08000278

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000278 	.word	0x08000278

08000108 <main>:
#include"stm32F0xx.h"
#include<stdio.h>
extern void initialise_monitor_handles(void);
int main()
{	//to blink led on port c.9 first we need to enable CLK for port C
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0


	//1//to enable clock we use RCC reset and clock control
	//AHB peripheral clock enable register (RCC_AHBENR) is 32 bit register used to set clock for ports
	//port c is at 19 th bit
    RCC -> AHBENR |= (1<<19); //ORing of RCC->AHBENR and (1 at 19th bit)
 800010e:	4b18      	ldr	r3, [pc, #96]	; (8000170 <main+0x68>)
 8000110:	695a      	ldr	r2, [r3, #20]
 8000112:	4b17      	ldr	r3, [pc, #92]	; (8000170 <main+0x68>)
 8000114:	2180      	movs	r1, #128	; 0x80
 8000116:	0309      	lsls	r1, r1, #12
 8000118:	430a      	orrs	r2, r1
 800011a:	615a      	str	r2, [r3, #20]



    //2//now we need to set Port C.8 as output port.
    // GPIOx_MODER general purpose I/Os port Mode Registers, used to set pin of port as output/input.
    GPIOC -> MODER |= (1<<18); // enable Port C pin 9 as a digital output.
 800011c:	4b15      	ldr	r3, [pc, #84]	; (8000174 <main+0x6c>)
 800011e:	681a      	ldr	r2, [r3, #0]
 8000120:	4b14      	ldr	r3, [pc, #80]	; (8000174 <main+0x6c>)
 8000122:	2180      	movs	r1, #128	; 0x80
 8000124:	02c9      	lsls	r1, r1, #11
 8000126:	430a      	orrs	r2, r1
 8000128:	601a      	str	r2, [r3, #0]



    //3// // turn GPIOC pin 8 ON or asset high
//     GPIO port output data register (GPIOx_ODR) (x = A to F) used to send 0 or 1 on port pins
    GPIOC -> ODR |= (1<<9);
 800012a:	4b12      	ldr	r3, [pc, #72]	; (8000174 <main+0x6c>)
 800012c:	695a      	ldr	r2, [r3, #20]
 800012e:	4b11      	ldr	r3, [pc, #68]	; (8000174 <main+0x6c>)
 8000130:	2180      	movs	r1, #128	; 0x80
 8000132:	0089      	lsls	r1, r1, #2
 8000134:	430a      	orrs	r2, r1
 8000136:	615a      	str	r2, [r3, #20]
//    initialise_monitor_handles();
//    printf("on");
    for(int i =0 ;i<1000000;i++);
 8000138:	2300      	movs	r3, #0
 800013a:	607b      	str	r3, [r7, #4]
 800013c:	e002      	b.n	8000144 <main+0x3c>
 800013e:	687b      	ldr	r3, [r7, #4]
 8000140:	3301      	adds	r3, #1
 8000142:	607b      	str	r3, [r7, #4]
 8000144:	687b      	ldr	r3, [r7, #4]
 8000146:	4a0c      	ldr	r2, [pc, #48]	; (8000178 <main+0x70>)
 8000148:	4293      	cmp	r3, r2
 800014a:	ddf8      	ble.n	800013e <main+0x36>
    GPIOC -> ODR &= ~(1<<9);
 800014c:	4b09      	ldr	r3, [pc, #36]	; (8000174 <main+0x6c>)
 800014e:	695a      	ldr	r2, [r3, #20]
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <main+0x6c>)
 8000152:	490a      	ldr	r1, [pc, #40]	; (800017c <main+0x74>)
 8000154:	400a      	ands	r2, r1
 8000156:	615a      	str	r2, [r3, #20]
//    initialise_monitor_handles();
//    printf("off");
    for(int i=0;i<1000000;i++);
 8000158:	2300      	movs	r3, #0
 800015a:	603b      	str	r3, [r7, #0]
 800015c:	e002      	b.n	8000164 <main+0x5c>
 800015e:	683b      	ldr	r3, [r7, #0]
 8000160:	3301      	adds	r3, #1
 8000162:	603b      	str	r3, [r7, #0]
 8000164:	683b      	ldr	r3, [r7, #0]
 8000166:	4a04      	ldr	r2, [pc, #16]	; (8000178 <main+0x70>)
 8000168:	4293      	cmp	r3, r2
 800016a:	ddf8      	ble.n	800015e <main+0x56>
    GPIOC -> ODR |= (1<<9);
 800016c:	e7dd      	b.n	800012a <main+0x22>
 800016e:	46c0      	nop			; (mov r8, r8)
 8000170:	40021000 	.word	0x40021000
 8000174:	48000800 	.word	0x48000800
 8000178:	000f423f 	.word	0x000f423f
 800017c:	fffffdff 	.word	0xfffffdff

08000180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000184:	e7fe      	b.n	8000184 <NMI_Handler+0x4>

08000186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000186:	b580      	push	{r7, lr}
 8000188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800018a:	e7fe      	b.n	800018a <HardFault_Handler+0x4>

0800018c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000190:	46c0      	nop			; (mov r8, r8)
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}

08000196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000196:	b580      	push	{r7, lr}
 8000198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800019a:	46c0      	nop			; (mov r8, r8)
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}

080001a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001a4:	f000 f832 	bl	800020c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001a8:	46c0      	nop			; (mov r8, r8)
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}

080001ae <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80001b2:	46c0      	nop			; (mov r8, r8)
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}

080001b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001b8:	480d      	ldr	r0, [pc, #52]	; (80001f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ba:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80001bc:	f7ff fff7 	bl	80001ae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001c0:	480c      	ldr	r0, [pc, #48]	; (80001f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80001c2:	490d      	ldr	r1, [pc, #52]	; (80001f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001c4:	4a0d      	ldr	r2, [pc, #52]	; (80001fc <LoopForever+0xe>)
  movs r3, #0
 80001c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001c8:	e002      	b.n	80001d0 <LoopCopyDataInit>

080001ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ce:	3304      	adds	r3, #4

080001d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001d4:	d3f9      	bcc.n	80001ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001d6:	4a0a      	ldr	r2, [pc, #40]	; (8000200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001d8:	4c0a      	ldr	r4, [pc, #40]	; (8000204 <LoopForever+0x16>)
  movs r3, #0
 80001da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001dc:	e001      	b.n	80001e2 <LoopFillZerobss>

080001de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001e0:	3204      	adds	r2, #4

080001e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001e4:	d3fb      	bcc.n	80001de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001e6:	f000 f823 	bl	8000230 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001ea:	f7ff ff8d 	bl	8000108 <main>

080001ee <LoopForever>:

LoopForever:
    b LoopForever
 80001ee:	e7fe      	b.n	80001ee <LoopForever>
  ldr   r0, =_estack
 80001f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80001fc:	08000298 	.word	0x08000298
  ldr r2, =_sbss
 8000200:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000204:	20000024 	.word	0x20000024

08000208 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000208:	e7fe      	b.n	8000208 <ADC1_COMP_IRQHandler>
	...

0800020c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <HAL_IncTick+0x1c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	001a      	movs	r2, r3
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <HAL_IncTick+0x20>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	18d2      	adds	r2, r2, r3
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <HAL_IncTick+0x20>)
 800021e:	601a      	str	r2, [r3, #0]
}
 8000220:	46c0      	nop			; (mov r8, r8)
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	46c0      	nop			; (mov r8, r8)
 8000228:	20000000 	.word	0x20000000
 800022c:	20000020 	.word	0x20000020

08000230 <__libc_init_array>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	2600      	movs	r6, #0
 8000234:	4d0c      	ldr	r5, [pc, #48]	; (8000268 <__libc_init_array+0x38>)
 8000236:	4c0d      	ldr	r4, [pc, #52]	; (800026c <__libc_init_array+0x3c>)
 8000238:	1b64      	subs	r4, r4, r5
 800023a:	10a4      	asrs	r4, r4, #2
 800023c:	42a6      	cmp	r6, r4
 800023e:	d109      	bne.n	8000254 <__libc_init_array+0x24>
 8000240:	2600      	movs	r6, #0
 8000242:	f000 f819 	bl	8000278 <_init>
 8000246:	4d0a      	ldr	r5, [pc, #40]	; (8000270 <__libc_init_array+0x40>)
 8000248:	4c0a      	ldr	r4, [pc, #40]	; (8000274 <__libc_init_array+0x44>)
 800024a:	1b64      	subs	r4, r4, r5
 800024c:	10a4      	asrs	r4, r4, #2
 800024e:	42a6      	cmp	r6, r4
 8000250:	d105      	bne.n	800025e <__libc_init_array+0x2e>
 8000252:	bd70      	pop	{r4, r5, r6, pc}
 8000254:	00b3      	lsls	r3, r6, #2
 8000256:	58eb      	ldr	r3, [r5, r3]
 8000258:	4798      	blx	r3
 800025a:	3601      	adds	r6, #1
 800025c:	e7ee      	b.n	800023c <__libc_init_array+0xc>
 800025e:	00b3      	lsls	r3, r6, #2
 8000260:	58eb      	ldr	r3, [r5, r3]
 8000262:	4798      	blx	r3
 8000264:	3601      	adds	r6, #1
 8000266:	e7f2      	b.n	800024e <__libc_init_array+0x1e>
 8000268:	08000290 	.word	0x08000290
 800026c:	08000290 	.word	0x08000290
 8000270:	08000290 	.word	0x08000290
 8000274:	08000294 	.word	0x08000294

08000278 <_init>:
 8000278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027e:	bc08      	pop	{r3}
 8000280:	469e      	mov	lr, r3
 8000282:	4770      	bx	lr

08000284 <_fini>:
 8000284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800028a:	bc08      	pop	{r3}
 800028c:	469e      	mov	lr, r3
 800028e:	4770      	bx	lr
